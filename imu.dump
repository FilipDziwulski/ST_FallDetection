
imu.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200008a0 	.word	0x200008a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a84 	.word	0x08005a84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005a84 	.word	0x08005a84
 80001d0:	200008a4 	.word	0x200008a4
 80001d4:	2000089c 	.word	0x2000089c
 80001d8:	00000000 	.word	0x00000000

080001dc <_mainCRTStartup>:
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <_mainCRTStartup+0x58>)
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bf08      	it	eq
 80001e2:	4b13      	ldreq	r3, [pc, #76]	; (8000230 <_mainCRTStartup+0x54>)
 80001e4:	469d      	mov	sp, r3
 80001e6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001ea:	2100      	movs	r1, #0
 80001ec:	468b      	mov	fp, r1
 80001ee:	460f      	mov	r7, r1
 80001f0:	4813      	ldr	r0, [pc, #76]	; (8000240 <_mainCRTStartup+0x64>)
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <_mainCRTStartup+0x68>)
 80001f4:	1a12      	subs	r2, r2, r0
 80001f6:	f004 fd5f 	bl	8004cb8 <memset>
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <_mainCRTStartup+0x5c>)
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d000      	beq.n	8000202 <_mainCRTStartup+0x26>
 8000200:	4798      	blx	r3
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <_mainCRTStartup+0x60>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d000      	beq.n	800020a <_mainCRTStartup+0x2e>
 8000208:	4798      	blx	r3
 800020a:	2000      	movs	r0, #0
 800020c:	2100      	movs	r1, #0
 800020e:	0004      	movs	r4, r0
 8000210:	000d      	movs	r5, r1
 8000212:	480d      	ldr	r0, [pc, #52]	; (8000248 <_mainCRTStartup+0x6c>)
 8000214:	2800      	cmp	r0, #0
 8000216:	d002      	beq.n	800021e <_mainCRTStartup+0x42>
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <_mainCRTStartup+0x70>)
 800021a:	f004 fe6f 	bl	8004efc <atexit>
 800021e:	f004 fd23 	bl	8004c68 <__libc_init_array>
 8000222:	0020      	movs	r0, r4
 8000224:	0029      	movs	r1, r5
 8000226:	f004 fb47 	bl	80048b8 <main>
 800022a:	f004 fd0d 	bl	8004c48 <exit>
 800022e:	bf00      	nop
 8000230:	00080000 	.word	0x00080000
	...
 8000240:	200008a0 	.word	0x200008a0
 8000244:	2000092c 	.word	0x2000092c
 8000248:	08004efd 	.word	0x08004efd
 800024c:	08004f09 	.word	0x08004f09

08000250 <printDOF>:
    	delay_ms(1); //main loop runs at 1kHz
    }
}

void printDOF(void)
{
 8000250:	b570      	push	{r4, r5, r6, lr}
	//my_printf does not support float, so data printed over serial is split apart and printed

	my_printf("acc.x: %d.%d g\r\n", (int)dof.acc.x, DECIMAL_PORTION(dof.acc.x));
 8000252:	4c8d      	ldr	r4, [pc, #564]	; (8000488 <printDOF+0x238>)
 8000254:	edd4 7a00 	vldr	s15, [r4]
 8000258:	6820      	ldr	r0, [r4, #0]
 800025a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    	delay_ms(1); //main loop runs at 1kHz
    }
}

void printDOF(void)
{
 800025e:	ed2d 8b02 	vpush	{d8}
	//my_printf does not support float, so data printed over serial is split apart and printed

	my_printf("acc.x: %d.%d g\r\n", (int)dof.acc.x, DECIMAL_PORTION(dof.acc.x));
 8000262:	ed94 8a00 	vldr	s16, [r4]
 8000266:	ee17 6a90 	vmov	r6, s15
 800026a:	f003 ffbf 	bl	80041ec <__aeabi_f2d>
 800026e:	4b87      	ldr	r3, [pc, #540]	; (800048c <printDOF+0x23c>)
 8000270:	2200      	movs	r2, #0
 8000272:	f004 f80f 	bl	8004294 <__aeabi_dmul>
 8000276:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800027a:	f004 faa5 	bl	80047c8 <__aeabi_d2iz>
 800027e:	ee18 2a10 	vmov	r2, s16
 8000282:	f06f 0563 	mvn.w	r5, #99	; 0x63
 8000286:	fb05 0202 	mla	r2, r5, r2, r0
 800028a:	2a00      	cmp	r2, #0
 800028c:	bfb8      	it	lt
 800028e:	4252      	neglt	r2, r2
 8000290:	4631      	mov	r1, r6
 8000292:	487f      	ldr	r0, [pc, #508]	; (8000490 <printDOF+0x240>)
 8000294:	f001 f8bc 	bl	8001410 <my_printf>
	my_printf("acc.y: %d.%d g\r\n", (int)dof.acc.y, DECIMAL_PORTION(dof.acc.y));
 8000298:	edd4 7a01 	vldr	s15, [r4, #4]
 800029c:	6860      	ldr	r0, [r4, #4]
 800029e:	ed94 8a01 	vldr	s16, [r4, #4]
 80002a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002a6:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80002aa:	ee17 6a90 	vmov	r6, s15
 80002ae:	f003 ff9d 	bl	80041ec <__aeabi_f2d>
 80002b2:	4b76      	ldr	r3, [pc, #472]	; (800048c <printDOF+0x23c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	f003 ffed 	bl	8004294 <__aeabi_dmul>
 80002ba:	f004 fa85 	bl	80047c8 <__aeabi_d2iz>
 80002be:	ee18 2a10 	vmov	r2, s16
 80002c2:	fb05 0202 	mla	r2, r5, r2, r0
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	bfb8      	it	lt
 80002ca:	4252      	neglt	r2, r2
 80002cc:	4631      	mov	r1, r6
 80002ce:	4871      	ldr	r0, [pc, #452]	; (8000494 <printDOF+0x244>)
 80002d0:	f001 f89e 	bl	8001410 <my_printf>
	my_printf("acc.z: %d.%d g\r\n", (int)dof.acc.z, DECIMAL_PORTION(dof.acc.z));
 80002d4:	edd4 7a02 	vldr	s15, [r4, #8]
 80002d8:	68a0      	ldr	r0, [r4, #8]
 80002da:	ed94 8a02 	vldr	s16, [r4, #8]
 80002de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002e2:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80002e6:	ee17 6a90 	vmov	r6, s15
 80002ea:	f003 ff7f 	bl	80041ec <__aeabi_f2d>
 80002ee:	4b67      	ldr	r3, [pc, #412]	; (800048c <printDOF+0x23c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	f003 ffcf 	bl	8004294 <__aeabi_dmul>
 80002f6:	f004 fa67 	bl	80047c8 <__aeabi_d2iz>
 80002fa:	ee18 2a10 	vmov	r2, s16
 80002fe:	fb05 0202 	mla	r2, r5, r2, r0
 8000302:	2a00      	cmp	r2, #0
 8000304:	bfb8      	it	lt
 8000306:	4252      	neglt	r2, r2
 8000308:	4631      	mov	r1, r6
 800030a:	4863      	ldr	r0, [pc, #396]	; (8000498 <printDOF+0x248>)
 800030c:	f001 f880 	bl	8001410 <my_printf>

	my_printf("mag.x: %d.%d gauss\r\n", (int)dof.mag.x, DECIMAL_PORTION(dof.mag.x));
 8000310:	edd4 7a03 	vldr	s15, [r4, #12]
 8000314:	68e0      	ldr	r0, [r4, #12]
 8000316:	ed94 8a03 	vldr	s16, [r4, #12]
 800031a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800031e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000322:	ee17 6a90 	vmov	r6, s15
 8000326:	f003 ff61 	bl	80041ec <__aeabi_f2d>
 800032a:	4b58      	ldr	r3, [pc, #352]	; (800048c <printDOF+0x23c>)
 800032c:	2200      	movs	r2, #0
 800032e:	f003 ffb1 	bl	8004294 <__aeabi_dmul>
 8000332:	f004 fa49 	bl	80047c8 <__aeabi_d2iz>
 8000336:	ee18 2a10 	vmov	r2, s16
 800033a:	fb05 0202 	mla	r2, r5, r2, r0
 800033e:	2a00      	cmp	r2, #0
 8000340:	bfb8      	it	lt
 8000342:	4252      	neglt	r2, r2
 8000344:	4631      	mov	r1, r6
 8000346:	4855      	ldr	r0, [pc, #340]	; (800049c <printDOF+0x24c>)
 8000348:	f001 f862 	bl	8001410 <my_printf>
	my_printf("mag.y: %d.%d gauss\r\n", (int)dof.mag.y, DECIMAL_PORTION(dof.mag.y));
 800034c:	edd4 7a04 	vldr	s15, [r4, #16]
 8000350:	6920      	ldr	r0, [r4, #16]
 8000352:	ed94 8a04 	vldr	s16, [r4, #16]
 8000356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800035a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800035e:	ee17 6a90 	vmov	r6, s15
 8000362:	f003 ff43 	bl	80041ec <__aeabi_f2d>
 8000366:	4b49      	ldr	r3, [pc, #292]	; (800048c <printDOF+0x23c>)
 8000368:	2200      	movs	r2, #0
 800036a:	f003 ff93 	bl	8004294 <__aeabi_dmul>
 800036e:	f004 fa2b 	bl	80047c8 <__aeabi_d2iz>
 8000372:	ee18 2a10 	vmov	r2, s16
 8000376:	fb05 0202 	mla	r2, r5, r2, r0
 800037a:	2a00      	cmp	r2, #0
 800037c:	bfb8      	it	lt
 800037e:	4252      	neglt	r2, r2
 8000380:	4631      	mov	r1, r6
 8000382:	4847      	ldr	r0, [pc, #284]	; (80004a0 <printDOF+0x250>)
 8000384:	f001 f844 	bl	8001410 <my_printf>
	my_printf("mag.z: %d.%d gauss\r\n", (int)dof.mag.z, DECIMAL_PORTION(dof.mag.z));
 8000388:	edd4 7a05 	vldr	s15, [r4, #20]
 800038c:	6960      	ldr	r0, [r4, #20]
 800038e:	ed94 8a05 	vldr	s16, [r4, #20]
 8000392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000396:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800039a:	ee17 6a90 	vmov	r6, s15
 800039e:	f003 ff25 	bl	80041ec <__aeabi_f2d>
 80003a2:	4b3a      	ldr	r3, [pc, #232]	; (800048c <printDOF+0x23c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f003 ff75 	bl	8004294 <__aeabi_dmul>
 80003aa:	f004 fa0d 	bl	80047c8 <__aeabi_d2iz>
 80003ae:	ee18 2a10 	vmov	r2, s16
 80003b2:	fb05 0202 	mla	r2, r5, r2, r0
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	bfb8      	it	lt
 80003ba:	4252      	neglt	r2, r2
 80003bc:	4631      	mov	r1, r6
 80003be:	4839      	ldr	r0, [pc, #228]	; (80004a4 <printDOF+0x254>)
 80003c0:	f001 f826 	bl	8001410 <my_printf>

	my_printf("rot.x: %d.%d deg/s\r\n", (int)dof.rot.x, DECIMAL_PORTION(dof.rot.x));
 80003c4:	edd4 7a06 	vldr	s15, [r4, #24]
 80003c8:	69a0      	ldr	r0, [r4, #24]
 80003ca:	ed94 8a06 	vldr	s16, [r4, #24]
 80003ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003d2:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80003d6:	ee17 6a90 	vmov	r6, s15
 80003da:	f003 ff07 	bl	80041ec <__aeabi_f2d>
 80003de:	4b2b      	ldr	r3, [pc, #172]	; (800048c <printDOF+0x23c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	f003 ff57 	bl	8004294 <__aeabi_dmul>
 80003e6:	f004 f9ef 	bl	80047c8 <__aeabi_d2iz>
 80003ea:	ee18 2a10 	vmov	r2, s16
 80003ee:	fb05 0202 	mla	r2, r5, r2, r0
 80003f2:	2a00      	cmp	r2, #0
 80003f4:	bfb8      	it	lt
 80003f6:	4252      	neglt	r2, r2
 80003f8:	4631      	mov	r1, r6
 80003fa:	482b      	ldr	r0, [pc, #172]	; (80004a8 <printDOF+0x258>)
 80003fc:	f001 f808 	bl	8001410 <my_printf>
	my_printf("rot.y: %d.%d deg/s\r\n", (int)dof.rot.y, DECIMAL_PORTION(dof.rot.y));
 8000400:	edd4 7a07 	vldr	s15, [r4, #28]
 8000404:	69e0      	ldr	r0, [r4, #28]
 8000406:	ed94 8a07 	vldr	s16, [r4, #28]
 800040a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000412:	ee17 6a90 	vmov	r6, s15
 8000416:	f003 fee9 	bl	80041ec <__aeabi_f2d>
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <printDOF+0x23c>)
 800041c:	2200      	movs	r2, #0
 800041e:	f003 ff39 	bl	8004294 <__aeabi_dmul>
 8000422:	f004 f9d1 	bl	80047c8 <__aeabi_d2iz>
 8000426:	ee18 2a10 	vmov	r2, s16
 800042a:	fb05 0202 	mla	r2, r5, r2, r0
 800042e:	4631      	mov	r1, r6
 8000430:	2a00      	cmp	r2, #0
 8000432:	bfb8      	it	lt
 8000434:	4252      	neglt	r2, r2
 8000436:	481d      	ldr	r0, [pc, #116]	; (80004ac <printDOF+0x25c>)
 8000438:	f000 ffea 	bl	8001410 <my_printf>
	my_printf("rot.z: %d.%d deg/s\r\n", (int)dof.rot.z, DECIMAL_PORTION(dof.rot.z));
 800043c:	edd4 7a08 	vldr	s15, [r4, #32]
 8000440:	6a20      	ldr	r0, [r4, #32]
 8000442:	ed94 8a08 	vldr	s16, [r4, #32]
 8000446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800044a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800044e:	ee17 4a90 	vmov	r4, s15
 8000452:	f003 fecb 	bl	80041ec <__aeabi_f2d>
 8000456:	2200      	movs	r2, #0
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <printDOF+0x23c>)
 800045a:	f003 ff1b 	bl	8004294 <__aeabi_dmul>
 800045e:	f004 f9b3 	bl	80047c8 <__aeabi_d2iz>
 8000462:	ee18 3a10 	vmov	r3, s16
 8000466:	fb05 0203 	mla	r2, r5, r3, r0
 800046a:	4621      	mov	r1, r4
 800046c:	2a00      	cmp	r2, #0
 800046e:	bfb8      	it	lt
 8000470:	4252      	neglt	r2, r2
 8000472:	480f      	ldr	r0, [pc, #60]	; (80004b0 <printDOF+0x260>)
 8000474:	f000 ffcc 	bl	8001410 <my_printf>
	my_printf("\n");
}
 8000478:	ecbd 8b02 	vpop	{d8}
	my_printf("mag.z: %d.%d gauss\r\n", (int)dof.mag.z, DECIMAL_PORTION(dof.mag.z));

	my_printf("rot.x: %d.%d deg/s\r\n", (int)dof.rot.x, DECIMAL_PORTION(dof.rot.x));
	my_printf("rot.y: %d.%d deg/s\r\n", (int)dof.rot.y, DECIMAL_PORTION(dof.rot.y));
	my_printf("rot.z: %d.%d deg/s\r\n", (int)dof.rot.z, DECIMAL_PORTION(dof.rot.z));
	my_printf("\n");
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <printDOF+0x264>)
}
 800047e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	my_printf("mag.z: %d.%d gauss\r\n", (int)dof.mag.z, DECIMAL_PORTION(dof.mag.z));

	my_printf("rot.x: %d.%d deg/s\r\n", (int)dof.rot.x, DECIMAL_PORTION(dof.rot.x));
	my_printf("rot.y: %d.%d deg/s\r\n", (int)dof.rot.y, DECIMAL_PORTION(dof.rot.y));
	my_printf("rot.z: %d.%d deg/s\r\n", (int)dof.rot.z, DECIMAL_PORTION(dof.rot.z));
	my_printf("\n");
 8000482:	f000 bfc5 	b.w	8001410 <my_printf>
 8000486:	bf00      	nop
 8000488:	200008bc 	.word	0x200008bc
 800048c:	40590000 	.word	0x40590000
 8000490:	080057dc 	.word	0x080057dc
 8000494:	080057f0 	.word	0x080057f0
 8000498:	08005804 	.word	0x08005804
 800049c:	08005818 	.word	0x08005818
 80004a0:	08005830 	.word	0x08005830
 80004a4:	08005848 	.word	0x08005848
 80004a8:	08005860 	.word	0x08005860
 80004ac:	08005878 	.word	0x08005878
 80004b0:	08005890 	.word	0x08005890
 80004b4:	080059b0 	.word	0x080059b0

080004b8 <isIMUinFreefall>:
}

uint8_t isIMUinFreefall(void)
{
 80004b8:	b508      	push	{r3, lr}
	//calculate vector sum of components of acceleration
	float vectorSum = sqrt((dof.acc.x * dof.acc.x) + (dof.acc.y * dof.acc.y) + (dof.acc.z * dof.acc.z));
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <isIMUinFreefall+0x58>)
 80004bc:	edd3 5a00 	vldr	s11, [r3]
 80004c0:	ed93 6a00 	vldr	s12, [r3]
 80004c4:	ed93 5a01 	vldr	s10, [r3, #4]
 80004c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80004cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80004d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80004d4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80004d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80004dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80004e0:	ee17 0a90 	vmov	r0, s15
 80004e4:	f003 fe82 	bl	80041ec <__aeabi_f2d>
 80004e8:	ec41 0b10 	vmov	d0, r0, r1
 80004ec:	f004 fa50 	bl	8004990 <sqrt>
 80004f0:	ec51 0b10 	vmov	r0, r1, d0
 80004f4:	f004 f990 	bl	8004818 <__aeabi_d2f>

	if( ((float) FREE_FALL_THRESHOLD) > vectorSum)
 80004f8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000514 <isIMUinFreefall+0x5c>
 80004fc:	ee07 0a10 	vmov	s14, r0
 8000500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	else
	{
		return FALSE;
	}
}
 8000508:	bf54      	ite	pl
 800050a:	2000      	movpl	r0, #0
 800050c:	2001      	movmi	r0, #1
 800050e:	bd08      	pop	{r3, pc}
 8000510:	200008bc 	.word	0x200008bc
 8000514:	3e99999a 	.word	0x3e99999a

08000518 <process_Button>:

void process_Button(void)
{
 8000518:	b508      	push	{r3, lr}
    if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <process_Button+0x28>)
 800051c:	2101      	movs	r1, #1
 800051e:	f001 fe21 	bl	8002164 <GPIO_ReadInputDataBit>
 8000522:	b930      	cbnz	r0, 8000532 <process_Button+0x1a>
		GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
	}
    else {
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <process_Button+0x2c>)
 8000526:	f44f 4170 	mov.w	r1, #61440	; 0xf000
	}
}
 800052a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
    if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
		GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
	}
    else {
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
 800052e:	f001 be2f 	b.w	8002190 <GPIO_ResetBits>
}

void process_Button(void)
{
    if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
		GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <process_Button+0x2c>)
 8000534:	f44f 4170 	mov.w	r1, #61440	; 0xf000
	}
    else {
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
	}
}
 8000538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void process_Button(void)
{
    if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
		GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
 800053c:	f001 be26 	b.w	800218c <GPIO_SetBits>
 8000540:	40020000 	.word	0x40020000
 8000544:	40020c00 	.word	0x40020c00

08000548 <init_LED>:
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
	}
}

void init_LED()
{
 8000548:	b510      	push	{r4, lr}
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800054a:	2008      	movs	r0, #8
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15);
	}
}

void init_LED()
{
 800054c:	b082      	sub	sp, #8
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800054e:	2101      	movs	r1, #1
 8000550:	f001 ff88 	bl	8002464 <RCC_AHB1PeriphClockCmd>

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
 8000554:	f44f 4170 	mov.w	r1, #61440	; 0xf000
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
	gpio.GPIO_OType = GPIO_OType_PP;
 8000558:	2300      	movs	r3, #0
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 800055a:	2203      	movs	r2, #3
{
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
 800055c:	9100      	str	r1, [sp, #0]
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
 800055e:	2401      	movs	r4, #1
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOD, &gpio);
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <init_LED+0x34>)
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
 8000562:	f88d 4004 	strb.w	r4, [sp, #4]
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOD, &gpio);
 8000566:	4669      	mov	r1, sp

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
	gpio.GPIO_OType = GPIO_OType_PP;
 8000568:	f88d 3006 	strb.w	r3, [sp, #6]
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800056c:	f88d 3007 	strb.w	r3, [sp, #7]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8000570:	f88d 2005 	strb.w	r2, [sp, #5]

	GPIO_Init(GPIOD, &gpio);
 8000574:	f001 fd7c 	bl	8002070 <GPIO_Init>
}
 8000578:	b002      	add	sp, #8
 800057a:	bd10      	pop	{r4, pc}
 800057c:	40020c00 	.word	0x40020c00

08000580 <init_blue_push_button>:

void init_blue_push_button()
{
 8000580:	b510      	push	{r4, lr}
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000582:	2001      	movs	r0, #1

	GPIO_Init(GPIOD, &gpio);
}

void init_blue_push_button()
{
 8000584:	b082      	sub	sp, #8
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000586:	4601      	mov	r1, r0
 8000588:	f001 ff6c 	bl	8002464 <RCC_AHB1PeriphClockCmd>

	gpio.GPIO_Pin   = GPIO_Pin_0;
 800058c:	2101      	movs	r1, #1
	gpio.GPIO_Mode  = GPIO_Mode_IN;
 800058e:	2300      	movs	r3, #0
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8000590:	2203      	movs	r2, #3
{
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	gpio.GPIO_Pin   = GPIO_Pin_0;
 8000592:	9100      	str	r1, [sp, #0]
	gpio.GPIO_Mode  = GPIO_Mode_IN;
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8000594:	2402      	movs	r4, #2
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOA, &gpio);
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <init_blue_push_button+0x34>)
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	gpio.GPIO_Pin   = GPIO_Pin_0;
	gpio.GPIO_Mode  = GPIO_Mode_IN;
 8000598:	f88d 3004 	strb.w	r3, [sp, #4]
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOA, &gpio);
 800059c:	4669      	mov	r1, sp

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	gpio.GPIO_Pin   = GPIO_Pin_0;
	gpio.GPIO_Mode  = GPIO_Mode_IN;
	gpio.GPIO_OType = GPIO_OType_PP;
 800059e:	f88d 3006 	strb.w	r3, [sp, #6]
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80005a2:	f88d 4007 	strb.w	r4, [sp, #7]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 80005a6:	f88d 2005 	strb.w	r2, [sp, #5]

	GPIO_Init(GPIOA, &gpio);
 80005aa:	f001 fd61 	bl	8002070 <GPIO_Init>
}
 80005ae:	b002      	add	sp, #8
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000

080005b8 <init_UART4>:

void init_UART4()
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b087      	sub	sp, #28
    GPIO_InitTypeDef gpio;
    USART_InitTypeDef usart;

    usart.USART_BaudRate = 115200;
    usart.USART_WordLength = USART_WordLength_8b;
 80005bc:	2400      	movs	r4, #0
    usart.USART_StopBits = USART_StopBits_1;
    usart.USART_Parity = USART_Parity_No;
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80005be:	230c      	movs	r3, #12
void init_UART4()
{
    GPIO_InitTypeDef gpio;
    USART_InitTypeDef usart;

    usart.USART_BaudRate = 115200;
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200

    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);

    /* Connect PXx to USARTx_Tx*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 80005c4:	4d1d      	ldr	r5, [pc, #116]	; (800063c <init_UART4+0x84>)
    usart.USART_BaudRate = 115200;
    usart.USART_WordLength = USART_WordLength_8b;
    usart.USART_StopBits = USART_StopBits_1;
    usart.USART_Parity = USART_Parity_No;
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80005c6:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Enable GPIO clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80005ca:	2004      	movs	r0, #4
 80005cc:	2101      	movs	r1, #1
void init_UART4()
{
    GPIO_InitTypeDef gpio;
    USART_InitTypeDef usart;

    usart.USART_BaudRate = 115200;
 80005ce:	9202      	str	r2, [sp, #8]
    usart.USART_WordLength = USART_WordLength_8b;
 80005d0:	f8ad 400c 	strh.w	r4, [sp, #12]
    usart.USART_StopBits = USART_StopBits_1;
 80005d4:	f8ad 400e 	strh.w	r4, [sp, #14]
    usart.USART_Parity = USART_Parity_No;
 80005d8:	f8ad 4010 	strh.w	r4, [sp, #16]
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80005dc:	f8ad 4014 	strh.w	r4, [sp, #20]
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    /* Enable GPIO clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80005e0:	f001 ff40 	bl	8002464 <RCC_AHB1PeriphClockCmd>

    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 80005e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80005e8:	2101      	movs	r1, #1
 80005ea:	f001 ff5f 	bl	80024ac <RCC_APB1PeriphClockCmd>

    /* Connect PXx to USARTx_Tx*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 80005ee:	4628      	mov	r0, r5
 80005f0:	210a      	movs	r1, #10
 80005f2:	2208      	movs	r2, #8
 80005f4:	f001 fdda 	bl	80021ac <GPIO_PinAFConfig>
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &gpio);

    /* USART configuration */
    USART_Init(UART4, &usart);
 80005f8:	4e11      	ldr	r6, [pc, #68]	; (8000640 <init_UART4+0x88>)

    /* Connect PXx to USARTx_Tx*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);

    /* Connect PXx to USARTx_Rx*/
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 80005fa:	4628      	mov	r0, r5
 80005fc:	210b      	movs	r1, #11
 80005fe:	2208      	movs	r2, #8
 8000600:	f001 fdd4 	bl	80021ac <GPIO_PinAFConfig>
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
 8000604:	2701      	movs	r7, #1
    gpio.GPIO_Mode  = GPIO_Mode_AF;
 8000606:	2302      	movs	r3, #2
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
 8000608:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &gpio);
 800060c:	4628      	mov	r0, r5
 800060e:	4669      	mov	r1, sp
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
    gpio.GPIO_Mode  = GPIO_Mode_AF;
 8000610:	f88d 3004 	strb.w	r3, [sp, #4]
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8000614:	f88d 3005 	strb.w	r3, [sp, #5]
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
    gpio.GPIO_Mode  = GPIO_Mode_AF;
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
 8000618:	9200      	str	r2, [sp, #0]

    /* Connect PXx to USARTx_Rx*/
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
 800061a:	f88d 4006 	strb.w	r4, [sp, #6]
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
 800061e:	f88d 7007 	strb.w	r7, [sp, #7]
    gpio.GPIO_Mode  = GPIO_Mode_AF;
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &gpio);
 8000622:	f001 fd25 	bl	8002070 <GPIO_Init>

    /* USART configuration */
    USART_Init(UART4, &usart);
 8000626:	4630      	mov	r0, r6
 8000628:	a902      	add	r1, sp, #8
 800062a:	f002 f871 	bl	8002710 <USART_Init>

    /* Enable USART */
    USART_Cmd(UART4, ENABLE);
 800062e:	4630      	mov	r0, r6
 8000630:	4639      	mov	r1, r7
 8000632:	f002 f8f3 	bl	800281c <USART_Cmd>
}
 8000636:	b007      	add	sp, #28
 8000638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063a:	bf00      	nop
 800063c:	40020800 	.word	0x40020800
 8000640:	40004c00 	.word	0x40004c00

08000644 <init_Peripherals>:

void init_Peripherals(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b08b      	sub	sp, #44	; 0x2c
	 */

	// Enable Usage Fault, Bus Fault, and MMU Fault, else it will default to HardFault handler
	//SCB->SHCSR |= 0x00070000;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000648:	a802      	add	r0, sp, #8
 800064a:	f001 fe99 	bl	8002380 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000); // tick every 1 ms, used by delay_ms()
 800064e:	9a03      	ldr	r2, [sp, #12]
 8000650:	493a      	ldr	r1, [pc, #232]	; (800073c <init_Peripherals+0xf8>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <init_Peripherals+0xfc>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000654:	483b      	ldr	r0, [pc, #236]	; (8000744 <init_Peripherals+0x100>)

    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);

    /* Connect PXx to USARTx_Tx*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 8000656:	4e3c      	ldr	r6, [pc, #240]	; (8000748 <init_Peripherals+0x104>)
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &gpio);

    /* USART configuration */
    USART_Init(UART4, &usart);
 8000658:	4f3c      	ldr	r7, [pc, #240]	; (800074c <init_Peripherals+0x108>)

	// Enable Usage Fault, Bus Fault, and MMU Fault, else it will default to HardFault handler
	//SCB->SHCSR |= 0x00070000;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000); // tick every 1 ms, used by delay_ms()
 800065a:	fba1 4202 	umull	r4, r2, r1, r2
 800065e:	0992      	lsrs	r2, r2, #6
 8000660:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000664:	2400      	movs	r4, #0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000666:	3a01      	subs	r2, #1
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000668:	2107      	movs	r1, #7
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800066a:	605a      	str	r2, [r3, #4]
void init_UART4()
{
    GPIO_InitTypeDef gpio;
    USART_InitTypeDef usart;

    usart.USART_BaudRate = 115200;
 800066c:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000670:	f880 e023 	strb.w	lr, [r0, #35]	; 0x23
    usart.USART_WordLength = USART_WordLength_8b;
    usart.USART_StopBits = USART_StopBits_1;
    usart.USART_Parity = USART_Parity_No;
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000674:	220c      	movs	r2, #12
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000676:	609c      	str	r4, [r3, #8]

    /* Enable GPIO clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000678:	2004      	movs	r0, #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	6019      	str	r1, [r3, #0]
 800067c:	2101      	movs	r1, #1
    usart.USART_BaudRate = 115200;
    usart.USART_WordLength = USART_WordLength_8b;
    usart.USART_StopBits = USART_StopBits_1;
    usart.USART_Parity = USART_Parity_No;
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800067e:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
void init_UART4()
{
    GPIO_InitTypeDef gpio;
    USART_InitTypeDef usart;

    usart.USART_BaudRate = 115200;
 8000682:	9506      	str	r5, [sp, #24]
    usart.USART_WordLength = USART_WordLength_8b;
 8000684:	f8ad 401c 	strh.w	r4, [sp, #28]
    usart.USART_StopBits = USART_StopBits_1;
 8000688:	f8ad 401e 	strh.w	r4, [sp, #30]
    usart.USART_Parity = USART_Parity_No;
 800068c:	f8ad 4020 	strh.w	r4, [sp, #32]
    usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000690:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    /* Enable GPIO clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000694:	f001 fee6 	bl	8002464 <RCC_AHB1PeriphClockCmd>

    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000698:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800069c:	2101      	movs	r1, #1
 800069e:	f001 ff05 	bl	80024ac <RCC_APB1PeriphClockCmd>

    /* Connect PXx to USARTx_Tx*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 80006a2:	4630      	mov	r0, r6
 80006a4:	210a      	movs	r1, #10
 80006a6:	2208      	movs	r2, #8
 80006a8:	f001 fd80 	bl	80021ac <GPIO_PinAFConfig>

    /* Connect PXx to USARTx_Rx*/
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 80006ac:	2208      	movs	r2, #8
 80006ae:	4630      	mov	r0, r6
 80006b0:	210b      	movs	r1, #11
 80006b2:	f001 fd7b 	bl	80021ac <GPIO_PinAFConfig>
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
 80006b6:	2501      	movs	r5, #1
    gpio.GPIO_Mode  = GPIO_Mode_AF;
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
 80006b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOC, &gpio);
 80006bc:	4630      	mov	r0, r6
 80006be:	4669      	mov	r1, sp
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
    gpio.GPIO_Mode  = GPIO_Mode_AF;
 80006c0:	2602      	movs	r6, #2
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
 80006c2:	9300      	str	r3, [sp, #0]

    /* Connect PXx to USARTx_Rx*/
    GPIO_PinAFConfig( GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 
    /* Configure USART Tx as alternate function  */
    gpio.GPIO_OType = GPIO_OType_PP;
 80006c4:	f88d 4006 	strb.w	r4, [sp, #6]
    gpio.GPIO_PuPd  = GPIO_PuPd_UP;
 80006c8:	f88d 5007 	strb.w	r5, [sp, #7]
    gpio.GPIO_Mode  = GPIO_Mode_AF;
 80006cc:	f88d 6004 	strb.w	r6, [sp, #4]
    gpio.GPIO_Pin   = GPIO_Pin_10 | GPIO_Pin_11;
    gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80006d0:	f88d 6005 	strb.w	r6, [sp, #5]
    GPIO_Init(GPIOC, &gpio);
 80006d4:	f001 fccc 	bl	8002070 <GPIO_Init>

    /* USART configuration */
    USART_Init(UART4, &usart);
 80006d8:	4638      	mov	r0, r7
 80006da:	a906      	add	r1, sp, #24
 80006dc:	f002 f818 	bl	8002710 <USART_Init>

    /* Enable USART */
    USART_Cmd(UART4, ENABLE);
 80006e0:	4638      	mov	r0, r7
 80006e2:	4629      	mov	r1, r5
 80006e4:	f002 f89a 	bl	800281c <USART_Cmd>

void init_LED()
{
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80006e8:	4629      	mov	r1, r5
 80006ea:	2008      	movs	r0, #8
 80006ec:	f001 feba 	bl	8002464 <RCC_AHB1PeriphClockCmd>

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 80006f0:	2703      	movs	r7, #3
{
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
 80006f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOD, &gpio);
 80006f6:	a906      	add	r1, sp, #24
 80006f8:	4815      	ldr	r0, [pc, #84]	; (8000750 <init_Peripherals+0x10c>)
{
    GPIO_InitTypeDef gpio; // LEDS on GPIOD

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    gpio.GPIO_Pin   = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |  GPIO_Pin_15;
 80006fa:	9306      	str	r3, [sp, #24]
	gpio.GPIO_Mode  = GPIO_Mode_OUT;
 80006fc:	f88d 501c 	strb.w	r5, [sp, #28]
	gpio.GPIO_OType = GPIO_OType_PP;
 8000700:	f88d 401e 	strb.w	r4, [sp, #30]
	gpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000704:	f88d 401f 	strb.w	r4, [sp, #31]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8000708:	f88d 701d 	strb.w	r7, [sp, #29]

	GPIO_Init(GPIOD, &gpio);
 800070c:	f001 fcb0 	bl	8002070 <GPIO_Init>

void init_blue_push_button()
{
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000710:	4628      	mov	r0, r5
 8000712:	4629      	mov	r1, r5
 8000714:	f001 fea6 	bl	8002464 <RCC_AHB1PeriphClockCmd>
	gpio.GPIO_Mode  = GPIO_Mode_IN;
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;

	GPIO_Init(GPIOA, &gpio);
 8000718:	a906      	add	r1, sp, #24
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <init_Peripherals+0x110>)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	gpio.GPIO_Pin   = GPIO_Pin_0;
	gpio.GPIO_Mode  = GPIO_Mode_IN;
	gpio.GPIO_OType = GPIO_OType_PP;
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800071c:	f88d 601f 	strb.w	r6, [sp, #31]
{
    GPIO_InitTypeDef gpio; // push button on GPIOA

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	gpio.GPIO_Pin   = GPIO_Pin_0;
 8000720:	9506      	str	r5, [sp, #24]
	gpio.GPIO_Mode  = GPIO_Mode_IN;
 8000722:	f88d 401c 	strb.w	r4, [sp, #28]
	gpio.GPIO_OType = GPIO_OType_PP;
 8000726:	f88d 401e 	strb.w	r4, [sp, #30]
	gpio.GPIO_PuPd  = GPIO_PuPd_DOWN;
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 800072a:	f88d 701d 	strb.w	r7, [sp, #29]

	GPIO_Init(GPIOA, &gpio);
 800072e:	f001 fc9f 	bl	8002070 <GPIO_Init>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000); // tick every 1 ms, used by delay_ms()

    init_UART4();
    init_LED();
    init_blue_push_button();
    init_IMU();
 8000732:	f000 ff0b 	bl	800154c <init_IMU>
}
 8000736:	b00b      	add	sp, #44	; 0x2c
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	bf00      	nop
 800073c:	10624dd3 	.word	0x10624dd3
 8000740:	e000e010 	.word	0xe000e010
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	40020800 	.word	0x40020800
 800074c:	40004c00 	.word	0x40004c00
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40020000 	.word	0x40020000

08000758 <delay_ms>:

void delay_ms(uint32_t t)
{
    g_timing_delay = t;
 8000758:	4a02      	ldr	r2, [pc, #8]	; (8000764 <delay_ms+0xc>)
 800075a:	6010      	str	r0, [r2, #0]

    while (g_timing_delay != 0);
 800075c:	6813      	ldr	r3, [r2, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1fc      	bne.n	800075c <delay_ms+0x4>
}
 8000762:	4770      	bx	lr
 8000764:	20000920 	.word	0x20000920

08000768 <timing_delay_decrement>:

void timing_delay_decrement(void)
{
    if (g_timing_delay != 0x00) { 
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <timing_delay_decrement+0x10>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	b112      	cbz	r2, 8000774 <timing_delay_decrement+0xc>
        g_timing_delay--;
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	3a01      	subs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000920 	.word	0x20000920

0800077c <get_ticks>:
    }
}

uint32_t get_ticks()
{
    return g_ticks;
 800077c:	4b01      	ldr	r3, [pc, #4]	; (8000784 <get_ticks+0x8>)
 800077e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200008bc 	.word	0x200008bc

08000788 <SystemInit>:
  */
void SystemInit(void)
{
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4a40      	ldr	r2, [pc, #256]	; (800088c <SystemInit+0x104>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <SystemInit+0x108>)
  */
void SystemInit(void)
{
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000790:	4840      	ldr	r0, [pc, #256]	; (8000894 <SystemInit+0x10c>)
  */
void SystemInit(void)
{
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000792:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000796:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800079a:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800079c:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800079e:	f041 0101 	orr.w	r1, r1, #1
 80007a2:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80007ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80007b0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007b2:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b4:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b6:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80007bc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007be:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007c0:	9200      	str	r2, [sp, #0]
 80007c2:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007ca:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007cc:	461a      	mov	r2, r3
 80007ce:	e003      	b.n	80007d8 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007d0:	9b00      	ldr	r3, [sp, #0]
 80007d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007d6:	d009      	beq.n	80007ec <SystemInit+0x64>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007d8:	6813      	ldr	r3, [r2, #0]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80007e0:	9b00      	ldr	r3, [sp, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007e6:	9b01      	ldr	r3, [sp, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f1      	beq.n	80007d0 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemInit+0x108>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80007f4:	bf18      	it	ne
 80007f6:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007f8:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80007fa:	9b01      	ldr	r3, [sp, #4]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d014      	beq.n	800082a <SystemInit+0xa2>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000800:	4a23      	ldr	r2, [pc, #140]	; (8000890 <SystemInit+0x108>)

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <SystemInit+0x110>)

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000804:	6891      	ldr	r1, [r2, #8]
 8000806:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800080a:	6091      	str	r1, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 800080c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000816:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000818:	6813      	ldr	r3, [r2, #0]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	d5fc      	bpl.n	8000818 <SystemInit+0x90>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <SystemInit+0x104>)
 8000820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000824:	609a      	str	r2, [r3, #8]
#endif
}
 8000826:	b002      	add	sp, #8
 8000828:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <SystemInit+0x108>)
    PWR->CR |= PWR_CR_PMODE;  
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <SystemInit+0x114>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800082e:	6c18      	ldr	r0, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000830:	491b      	ldr	r1, [pc, #108]	; (80008a0 <SystemInit+0x118>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000832:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000836:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000838:	6810      	ldr	r0, [r2, #0]
 800083a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800083e:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800084a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000852:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000854:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800085c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800085e:	4619      	mov	r1, r3
 8000860:	680b      	ldr	r3, [r1, #0]
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <SystemInit+0x108>)
 8000864:	0198      	lsls	r0, r3, #6
 8000866:	d5fb      	bpl.n	8000860 <SystemInit+0xd8>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <SystemInit+0x11c>)
 800086a:	f240 6105 	movw	r1, #1541	; 0x605
 800086e:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000870:	6893      	ldr	r3, [r2, #8]
 8000872:	f023 0303 	bic.w	r3, r3, #3
 8000876:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000878:	6893      	ldr	r3, [r2, #8]
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000880:	6893      	ldr	r3, [r2, #8]
 8000882:	f003 030c 	and.w	r3, r3, #12
 8000886:	2b08      	cmp	r3, #8
 8000888:	d1fa      	bne.n	8000880 <SystemInit+0xf8>
 800088a:	e7b9      	b.n	8000800 <SystemInit+0x78>
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	40023800 	.word	0x40023800
 8000894:	24003010 	.word	0x24003010
 8000898:	50003000 	.word	0x50003000
 800089c:	40007000 	.word	0x40007000
 80008a0:	07405408 	.word	0x07405408
 80008a4:	40023c00 	.word	0x40023c00

080008a8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <SystemCoreClockUpdate+0x58>)
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80008b0:	2a04      	cmp	r2, #4
 80008b2:	d023      	beq.n	80008fc <SystemCoreClockUpdate+0x54>
 80008b4:	2a08      	cmp	r2, #8
 80008b6:	d009      	beq.n	80008cc <SystemCoreClockUpdate+0x24>
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008ba:	4911      	ldr	r1, [pc, #68]	; (8000900 <SystemCoreClockUpdate+0x58>)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <SystemCoreClockUpdate+0x60>)
 80008be:	6889      	ldr	r1, [r1, #8]
 80008c0:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80008c4:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80008c6:	40ca      	lsrs	r2, r1
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008cc:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008ce:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008d0:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80008d2:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008d4:	bf4c      	ite	mi
 80008d6:	4a0d      	ldrmi	r2, [pc, #52]	; (800090c <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008d8:	4a0a      	ldrpl	r2, [pc, #40]	; (8000904 <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008de:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80008e2:	fbb2 f2f1 	udiv	r2, r2, r1
 80008e6:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SystemCoreClockUpdate+0x58>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80008f2:	3301      	adds	r3, #1
 80008f4:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80008f6:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 80008fa:	e7de      	b.n	80008ba <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <SystemCoreClockUpdate+0x64>)
 80008fe:	e7dc      	b.n	80008ba <SystemCoreClockUpdate+0x12>
 8000900:	40023800 	.word	0x40023800
 8000904:	00f42400 	.word	0x00f42400
 8000908:	20000004 	.word	0x20000004
 800090c:	007a1200 	.word	0x007a1200

08000910 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 8000910:	b508      	push	{r3, lr}
    my_printf("NMI_Handler\r\n");
 8000912:	4802      	ldr	r0, [pc, #8]	; (800091c <NMI_Handler+0xc>)
 8000914:	f000 fd7c 	bl	8001410 <my_printf>
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x8>
 800091a:	bf00      	nop
 800091c:	080058c4 	.word	0x080058c4

08000920 <prvGetRegistersFromStack>:
  * @param  None
  * @retval None
  */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8000920:	b500      	push	{lr}
 8000922:	4603      	mov	r3, r0
/*    r3 = pulFaultStackAddress[ 3 ];*/

/*    r12 = pulFaultStackAddress[ 4 ];*/
    lr = pulFaultStackAddress[ 5 ];
    pc = pulFaultStackAddress[ 6 ];
    psr = pulFaultStackAddress[ 7 ];
 8000924:	f103 0114 	add.w	r1, r3, #20
 8000928:	c90e      	ldmia	r1, {r1, r2, r3}
  * @param  None
  * @retval None
  */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 800092a:	b085      	sub	sp, #20
    pc = pulFaultStackAddress[ 6 ];
    psr = pulFaultStackAddress[ 7 ];

    /* When the following line is hit, the variables contain the register values. */

    my_printf("HardFault\r\n");
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <prvGetRegistersFromStack+0x34>)
/*    r1 = pulFaultStackAddress[ 1 ];*/
/*    r2 = pulFaultStackAddress[ 2 ];*/
/*    r3 = pulFaultStackAddress[ 3 ];*/

/*    r12 = pulFaultStackAddress[ 4 ];*/
    lr = pulFaultStackAddress[ 5 ];
 800092e:	9101      	str	r1, [sp, #4]
    pc = pulFaultStackAddress[ 6 ];
 8000930:	9202      	str	r2, [sp, #8]
    psr = pulFaultStackAddress[ 7 ];
 8000932:	9303      	str	r3, [sp, #12]

    /* When the following line is hit, the variables contain the register values. */

    my_printf("HardFault\r\n");
 8000934:	f000 fd6c 	bl	8001410 <my_printf>
    my_printf("  pc: %x\r\n", pc);
 8000938:	9902      	ldr	r1, [sp, #8]
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <prvGetRegistersFromStack+0x38>)
 800093c:	f000 fd68 	bl	8001410 <my_printf>
    my_printf("  psr: %x\r\n", psr);
 8000940:	9903      	ldr	r1, [sp, #12]
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <prvGetRegistersFromStack+0x3c>)
 8000944:	f000 fd64 	bl	8001410 <my_printf>
    my_printf("  lr: %x\r\n", lr);
 8000948:	9901      	ldr	r1, [sp, #4]
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <prvGetRegistersFromStack+0x40>)
 800094c:	f000 fd60 	bl	8001410 <my_printf>
 8000950:	e7fe      	b.n	8000950 <prvGetRegistersFromStack+0x30>
 8000952:	bf00      	nop
 8000954:	080058d4 	.word	0x080058d4
 8000958:	080058e0 	.word	0x080058e0
 800095c:	080058ec 	.word	0x080058ec
 8000960:	080058f8 	.word	0x080058f8

08000964 <HardFault_Handler>:
    while(1);
}

void HardFault_Handler(void)
{
    __asm volatile
 8000964:	f01e 0f04 	tst.w	lr, #4
 8000968:	bf0c      	ite	eq
 800096a:	f3ef 8008 	mrseq	r0, MSP
 800096e:	f3ef 8009 	mrsne	r0, PSP
 8000972:	6981      	ldr	r1, [r0, #24]
 8000974:	4a00      	ldr	r2, [pc, #0]	; (8000978 <handler2_address_const>)
 8000976:	4710      	bx	r2

08000978 <handler2_address_const>:
 8000978:	08000921 	.word	0x08000921
 800097c:	e7fe      	b.n	800097c <handler2_address_const+0x4>
 800097e:	bf00      	nop

08000980 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000980:	b508      	push	{r3, lr}
  /* Go to infinite loop when Memory Manage exception occurs */
    my_printf("MemManage_Handler\r\n");
 8000982:	4802      	ldr	r0, [pc, #8]	; (800098c <MemManage_Handler+0xc>)
 8000984:	f000 fd44 	bl	8001410 <my_printf>
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x8>
 800098a:	bf00      	nop
 800098c:	08005904 	.word	0x08005904

08000990 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000990:	b508      	push	{r3, lr}
  /* Go to infinite loop when Bus Fault exception occurs */
    my_printf("BusFault_Handler\r\n");
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <BusFault_Handler+0xc>)
 8000994:	f000 fd3c 	bl	8001410 <my_printf>
 8000998:	e7fe      	b.n	8000998 <BusFault_Handler+0x8>
 800099a:	bf00      	nop
 800099c:	08005918 	.word	0x08005918

080009a0 <UsageFault_Handler>:
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
    my_printf("UsageFault_Handler\r\n");
    my_printf("  %x\r\n", SCB->CFSR);
 80009a0:	4c1c      	ldr	r4, [pc, #112]	; (8000a14 <UsageFault_Handler+0x74>)
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
    my_printf("UsageFault_Handler\r\n");
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <UsageFault_Handler+0x78>)
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009a4:	b508      	push	{r3, lr}
  /* Go to infinite loop when Usage Fault exception occurs */
    my_printf("UsageFault_Handler\r\n");
 80009a6:	f000 fd33 	bl	8001410 <my_printf>
    my_printf("  %x\r\n", SCB->CFSR);
 80009aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <UsageFault_Handler+0x7c>)
 80009ae:	f000 fd2f 	bl	8001410 <my_printf>

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
 80009b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	d428      	bmi.n	8000a0a <UsageFault_Handler+0x6a>
    if(SCB->CFSR & (1<<24)) my_printf("  Unaligned access\r\n");
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <UsageFault_Handler+0x74>)
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	01dc      	lsls	r4, r3, #7
 80009be:	d420      	bmi.n	8000a02 <UsageFault_Handler+0x62>
    if(SCB->CFSR & (1<<19)) my_printf("  No co-processor\r\n");
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <UsageFault_Handler+0x74>)
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	0318      	lsls	r0, r3, #12
 80009c6:	d418      	bmi.n	80009fa <UsageFault_Handler+0x5a>
    if(SCB->CFSR & (1<<18)) my_printf("  Invalid PC load\r\n");
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <UsageFault_Handler+0x74>)
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	0359      	lsls	r1, r3, #13
 80009ce:	d410      	bmi.n	80009f2 <UsageFault_Handler+0x52>
    if(SCB->CFSR & (1<<17)) my_printf("  Invalid state\r\n");
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <UsageFault_Handler+0x74>)
 80009d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d4:	039a      	lsls	r2, r3, #14
 80009d6:	d408      	bmi.n	80009ea <UsageFault_Handler+0x4a>
    if(SCB->CFSR & (1<<16)) my_printf("  Undefined instruction\r\n");
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <UsageFault_Handler+0x74>)
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	03db      	lsls	r3, r3, #15
 80009de:	d400      	bmi.n	80009e2 <UsageFault_Handler+0x42>
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x40>
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <UsageFault_Handler+0x80>)
 80009e4:	f000 fd14 	bl	8001410 <my_printf>
 80009e8:	e7fa      	b.n	80009e0 <UsageFault_Handler+0x40>

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
    if(SCB->CFSR & (1<<24)) my_printf("  Unaligned access\r\n");
    if(SCB->CFSR & (1<<19)) my_printf("  No co-processor\r\n");
    if(SCB->CFSR & (1<<18)) my_printf("  Invalid PC load\r\n");
    if(SCB->CFSR & (1<<17)) my_printf("  Invalid state\r\n");
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <UsageFault_Handler+0x84>)
 80009ec:	f000 fd10 	bl	8001410 <my_printf>
 80009f0:	e7f2      	b.n	80009d8 <UsageFault_Handler+0x38>
    my_printf("  %x\r\n", SCB->CFSR);

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
    if(SCB->CFSR & (1<<24)) my_printf("  Unaligned access\r\n");
    if(SCB->CFSR & (1<<19)) my_printf("  No co-processor\r\n");
    if(SCB->CFSR & (1<<18)) my_printf("  Invalid PC load\r\n");
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <UsageFault_Handler+0x88>)
 80009f4:	f000 fd0c 	bl	8001410 <my_printf>
 80009f8:	e7ea      	b.n	80009d0 <UsageFault_Handler+0x30>
    my_printf("UsageFault_Handler\r\n");
    my_printf("  %x\r\n", SCB->CFSR);

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
    if(SCB->CFSR & (1<<24)) my_printf("  Unaligned access\r\n");
    if(SCB->CFSR & (1<<19)) my_printf("  No co-processor\r\n");
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <UsageFault_Handler+0x8c>)
 80009fc:	f000 fd08 	bl	8001410 <my_printf>
 8000a00:	e7e2      	b.n	80009c8 <UsageFault_Handler+0x28>
  /* Go to infinite loop when Usage Fault exception occurs */
    my_printf("UsageFault_Handler\r\n");
    my_printf("  %x\r\n", SCB->CFSR);

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
    if(SCB->CFSR & (1<<24)) my_printf("  Unaligned access\r\n");
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <UsageFault_Handler+0x90>)
 8000a04:	f000 fd04 	bl	8001410 <my_printf>
 8000a08:	e7da      	b.n	80009c0 <UsageFault_Handler+0x20>
{
  /* Go to infinite loop when Usage Fault exception occurs */
    my_printf("UsageFault_Handler\r\n");
    my_printf("  %x\r\n", SCB->CFSR);

    if(SCB->CFSR & (1<<25)) my_printf("  Divide by zero\r\n");
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <UsageFault_Handler+0x94>)
 8000a0c:	f000 fd00 	bl	8001410 <my_printf>
 8000a10:	e7d2      	b.n	80009b8 <UsageFault_Handler+0x18>
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00
 8000a18:	0800592c 	.word	0x0800592c
 8000a1c:	08005944 	.word	0x08005944
 8000a20:	080059b4 	.word	0x080059b4
 8000a24:	080059a0 	.word	0x080059a0
 8000a28:	0800598c 	.word	0x0800598c
 8000a2c:	08005978 	.word	0x08005978
 8000a30:	08005960 	.word	0x08005960
 8000a34:	0800594c 	.word	0x0800594c

08000a38 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a38:	b508      	push	{r3, lr}
    my_printf("SVC_Handler\r\n");
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <SVC_Handler+0xc>)
 8000a3c:	f000 fce8 	bl	8001410 <my_printf>
 8000a40:	e7fe      	b.n	8000a40 <SVC_Handler+0x8>
 8000a42:	bf00      	nop
 8000a44:	080059d0 	.word	0x080059d0

08000a48 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a48:	b508      	push	{r3, lr}
    my_printf("DebugMon_Handler\r\n");
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DebugMon_Handler+0xc>)
 8000a4c:	f000 fce0 	bl	8001410 <my_printf>
 8000a50:	e7fe      	b.n	8000a50 <DebugMon_Handler+0x8>
 8000a52:	bf00      	nop
 8000a54:	080059e0 	.word	0x080059e0

08000a58 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a58:	b508      	push	{r3, lr}
    my_printf("PendSV_Handler\r\n");
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <PendSV_Handler+0xc>)
 8000a5c:	f000 fcd8 	bl	8001410 <my_printf>
 8000a60:	e7fe      	b.n	8000a60 <PendSV_Handler+0x8>
 8000a62:	bf00      	nop
 8000a64:	080059f4 	.word	0x080059f4

08000a68 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a68:	b508      	push	{r3, lr}
    timing_delay_decrement();
 8000a6a:	f7ff fe7d 	bl	8000768 <timing_delay_decrement>

    g_ticks++;
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <SysTick_Handler+0x10>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	3201      	adds	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	bd08      	pop	{r3, pc}
 8000a78:	200008e0 	.word	0x200008e0

08000a7c <SDIO_IRQHandler>:
  * @brief  This function handles SDIO global interrupt request.
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <DMA2_Stream3_IRQHandler>:
  *         requests.
  * @param  None
  * @retval None
  */
void SD_SDIO_DMA_IRQHANDLER(void)
{
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <_close>:
    }
}

int _close(int file) {
    return -1;
}
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
    errno = ENOMEM;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <_execve+0xc>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return -1;
}
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a96:	4770      	bx	lr
 8000a98:	20000928 	.word	0x20000928

08000a9c <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
    errno = EAGAIN;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <_fork+0xc>)
 8000a9e:	220b      	movs	r2, #11
 8000aa0:	601a      	str	r2, [r3, #0]
    return -1;
}
 8000aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa6:	4770      	bx	lr
 8000aa8:	20000928 	.word	0x20000928

08000aac <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	604b      	str	r3, [r1, #4]
    return 0;
}
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
    return 1;
}
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4770      	bx	lr

08000abc <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d904      	bls.n	8000aca <_isatty+0xe>
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <_isatty+0x14>)
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	601a      	str	r2, [r3, #0]
        return 0;
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	4770      	bx	lr
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8000aca:	2001      	movs	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000928 	.word	0x20000928

08000ad4 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
    errno = EINVAL;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <_kill+0xc>)
 8000ad6:	2216      	movs	r2, #22
 8000ad8:	601a      	str	r2, [r3, #0]
    return (-1);
}
 8000ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ade:	4770      	bx	lr
 8000ae0:	20000928 	.word	0x20000928

08000ae4 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
    errno = EMLINK;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <_link+0xc>)
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	601a      	str	r2, [r3, #0]
    return -1;
}
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aee:	4770      	bx	lr
 8000af0:	20000928 	.word	0x20000928

08000af4 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8000af4:	2000      	movs	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <_sbrk>:

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <_sbrk+0x50>)
 8000afa:	6813      	ldr	r3, [r2, #0]
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8000afc:	b410      	push	{r4}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8000afe:	b1fb      	cbz	r3, 8000b40 <_sbrk+0x48>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8000b00:	f3ef 8108 	mrs	r1, MSP
        heap_end = &_ebss;
    }
    prev_heap_end = heap_end;

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
 8000b04:	4418      	add	r0, r3
 8000b06:	4288      	cmp	r0, r1
 8000b08:	d804      	bhi.n	8000b14 <_sbrk+0x1c>
         errno = ENOMEM;
         return  (caddr_t) -1;
         //abort ();
     }

    heap_end += incr;
 8000b0a:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;

}
 8000b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b10:	4618      	mov	r0, r3
 8000b12:	4770      	bx	lr
        heap_end = &_ebss;
    }
    prev_heap_end = heap_end;

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
 8000b14:	490d      	ldr	r1, [pc, #52]	; (8000b4c <_sbrk+0x54>)
        }
        break;
        case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {

            while ((UART4->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <_sbrk+0x58>)
 8000b18:	f101 0419 	add.w	r4, r1, #25
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	8813      	ldrh	r3, [r2, #0]
 8000b20:	065b      	lsls	r3, r3, #25
 8000b22:	d5fc      	bpl.n	8000b1e <_sbrk+0x26>
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);
 8000b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b28:	8083      	strh	r3, [r0, #4]
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);

        }
        break;
        case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	d1f7      	bne.n	8000b1e <_sbrk+0x26>

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <_sbrk+0x5c>)
     }

    heap_end += incr;
    return (caddr_t) prev_heap_end;

}
 8000b30:	f85d 4b04 	ldr.w	r4, [sp], #4

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8000b34:	220c      	movs	r2, #12
 8000b36:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     }

    heap_end += incr;
    return (caddr_t) prev_heap_end;

}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	4770      	bx	lr
    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
        heap_end = &_ebss;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <_sbrk+0x60>)
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e7dc      	b.n	8000b00 <_sbrk+0x8>
 8000b46:	bf00      	nop
 8000b48:	200008e4 	.word	0x200008e4
 8000b4c:	08005a08 	.word	0x08005a08
 8000b50:	40004c00 	.word	0x40004c00
 8000b54:	20000928 	.word	0x20000928
 8000b58:	2000092c 	.word	0x2000092c

08000b5c <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8000b5c:	b470      	push	{r4, r5, r6}
    int n;
    int num = 0;
    switch (file) {
 8000b5e:	b978      	cbnz	r0, 8000b80 <_read+0x24>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	dd0b      	ble.n	8000b7c <_read+0x20>
            while ((UART4->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8000b64:	4c09      	ldr	r4, [pc, #36]	; (8000b8c <_read+0x30>)
 8000b66:	188e      	adds	r6, r1, r2
 8000b68:	4625      	mov	r5, r4
 8000b6a:	8823      	ldrh	r3, [r4, #0]
 8000b6c:	069b      	lsls	r3, r3, #26
 8000b6e:	d5fc      	bpl.n	8000b6a <_read+0xe>
            char c = (char)(UART4->DR & (uint16_t)0x01FF);
 8000b70:	88ab      	ldrh	r3, [r5, #4]
 8000b72:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
    int n;
    int num = 0;
    switch (file) {
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8000b76:	42b1      	cmp	r1, r6
 8000b78:	d1f7      	bne.n	8000b6a <_read+0xe>
 8000b7a:	4610      	mov	r0, r2
    default:
        errno = EBADF;
        return -1;
    }
    return num;
}
 8000b7c:	bc70      	pop	{r4, r5, r6}
 8000b7e:	4770      	bx	lr
            *ptr++ = c;
            num++;
        }
        break;
    default:
        errno = EBADF;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <_read+0x34>)
 8000b82:	2209      	movs	r2, #9
 8000b84:	601a      	str	r2, [r3, #0]
        return -1;
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8a:	e7f7      	b.n	8000b7c <_read+0x20>
 8000b8c:	40004c00 	.word	0x40004c00
 8000b90:	20000928 	.word	0x20000928

08000b94 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
    st->st_mode = S_IFCHR;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	604b      	str	r3, [r1, #4]
    return 0;
}
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
    return -1;
}
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
    errno = ENOENT;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <_unlink+0xc>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
    return -1;
}
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb2:	4770      	bx	lr
 8000bb4:	20000928 	.word	0x20000928

08000bb8 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
    errno = ECHILD;
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <_wait+0xc>)
 8000bba:	220a      	movs	r2, #10
 8000bbc:	601a      	str	r2, [r3, #0]
    return -1;
}
 8000bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc2:	4770      	bx	lr
 8000bc4:	20000928 	.word	0x20000928

08000bc8 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 8000bc8:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8000bca:	b470      	push	{r4, r5, r6}
    int n;
    switch (file) {
 8000bcc:	d018      	beq.n	8000c00 <_write+0x38>
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d10f      	bne.n	8000bf2 <_write+0x2a>
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);

        }
        break;
        case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	dd0a      	ble.n	8000bec <_write+0x24>

            while ((UART4->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8000bd6:	4c12      	ldr	r4, [pc, #72]	; (8000c20 <_write+0x58>)
 8000bd8:	188e      	adds	r6, r1, r2
 8000bda:	4625      	mov	r5, r4
 8000bdc:	8823      	ldrh	r3, [r4, #0]
 8000bde:	065b      	lsls	r3, r3, #25
 8000be0:	d5fc      	bpl.n	8000bdc <_write+0x14>
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);
 8000be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000be6:	80ab      	strh	r3, [r5, #4]
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);

        }
        break;
        case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8000be8:	42b1      	cmp	r1, r6
 8000bea:	d1f7      	bne.n	8000bdc <_write+0x14>

        }
        break;
        default:
            errno = EBADF;
            return -1;
 8000bec:	4610      	mov	r0, r2
    }
    return len;
}
 8000bee:	bc70      	pop	{r4, r5, r6}
 8000bf0:	4770      	bx	lr
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);

        }
        break;
        default:
            errno = EBADF;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <_write+0x5c>)
 8000bf4:	2209      	movs	r2, #9
            return -1;
 8000bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);

        }
        break;
        default:
            errno = EBADF;
 8000bfa:	601a      	str	r2, [r3, #0]
            return -1;
    }
    return len;
}
 8000bfc:	bc70      	pop	{r4, r5, r6}
 8000bfe:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
        case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	ddf3      	ble.n	8000bec <_write+0x24>

            while ((UART4->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8000c04:	4c06      	ldr	r4, [pc, #24]	; (8000c20 <_write+0x58>)
 8000c06:	188e      	adds	r6, r1, r2
 8000c08:	4625      	mov	r5, r4
 8000c0a:	8823      	ldrh	r3, [r4, #0]
 8000c0c:	0658      	lsls	r0, r3, #25
 8000c0e:	d5fc      	bpl.n	8000c0a <_write+0x42>
            UART4->DR = (*ptr++ & (uint16_t)0x01FF);
 8000c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c14:	80ab      	strh	r3, [r5, #4]
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
        case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8000c16:	42b1      	cmp	r1, r6
 8000c18:	d1f7      	bne.n	8000c0a <_write+0x42>

        }
        break;
        default:
            errno = EBADF;
            return -1;
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	e7e7      	b.n	8000bee <_write+0x26>
 8000c1e:	bf00      	nop
 8000c20:	40004c00 	.word	0x40004c00
 8000c24:	20000928 	.word	0x20000928

08000c28 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8000c28:	b508      	push	{r3, lr}
    _write(1, "exit", 4);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4902      	ldr	r1, [pc, #8]	; (8000c38 <_exit+0x10>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	f7ff ffca 	bl	8000bc8 <_write>
 8000c34:	e7fe      	b.n	8000c34 <_exit+0xc>
 8000c36:	bf00      	nop
 8000c38:	08005a24 	.word	0x08005a24

08000c3c <putchar>:
    return len;
}

int putchar(int c)
{
    while ((UART4->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <putchar+0x14>)
 8000c3e:	8813      	ldrh	r3, [r2, #0]
 8000c40:	4903      	ldr	r1, [pc, #12]	; (8000c50 <putchar+0x14>)
 8000c42:	065b      	lsls	r3, r3, #25
 8000c44:	d5fb      	bpl.n	8000c3e <putchar+0x2>
    UART4->DR = c & (uint16_t)0x01FF;
 8000c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8000c4a:	808b      	strh	r3, [r1, #4]

    return c;
}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000c58:	f1b2 0800 	subs.w	r8, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	468a      	mov	sl, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000c60:	dd5b      	ble.n	8000d1a <prints+0xc6>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000c62:	780d      	ldrb	r5, [r1, #0]
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d052      	beq.n	8000d0e <prints+0xba>
 8000c68:	460f      	mov	r7, r1
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8000c70:	3001      	adds	r0, #1
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d1fa      	bne.n	8000c6c <prints+0x18>
		if (len >= width) width = 0;
 8000c76:	4580      	cmp	r8, r0
 8000c78:	dc4a      	bgt.n	8000d10 <prints+0xbc>
 8000c7a:	4690      	mov	r8, r2
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8000c7c:	079a      	lsls	r2, r3, #30
 8000c7e:	bf54      	ite	pl
 8000c80:	2720      	movpl	r7, #32
 8000c82:	2730      	movmi	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000c84:	f013 0301 	ands.w	r3, r3, #1
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8000c88:	46b9      	mov	r9, r7
	}
	if (!(pad & PAD_RIGHT)) {
 8000c8a:	d144      	bne.n	8000d16 <prints+0xc2>
		for ( ; width > 0; --width) {
 8000c8c:	f1b8 0f00 	cmp.w	r8, #0
 8000c90:	dd50      	ble.n	8000d34 <prints+0xe0>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d050      	beq.n	8000d38 <prints+0xe4>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	4642      	mov	r2, r8
static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
		**str = c;
 8000c9a:	701f      	strb	r7, [r3, #0]
		++(*str);
 8000c9c:	6823      	ldr	r3, [r4, #0]
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000c9e:	3a01      	subs	r2, #1
{
	extern int putchar(int c);
	
	if (str) {
		**str = c;
		++(*str);
 8000ca0:	f103 0301 	add.w	r3, r3, #1
 8000ca4:	6023      	str	r3, [r4, #0]
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000ca6:	d1f8      	bne.n	8000c9a <prints+0x46>
 8000ca8:	f89a 5000 	ldrb.w	r5, [sl]
 8000cac:	4646      	mov	r6, r8
 8000cae:	f04f 0800 	mov.w	r8, #0
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	b15d      	cbz	r5, 8000cce <prints+0x7a>
 8000cb6:	b1dc      	cbz	r4, 8000cf0 <prints+0x9c>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	4651      	mov	r1, sl
static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
		**str = c;
 8000cbc:	7018      	strb	r0, [r3, #0]
		++(*str);
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	6023      	str	r3, [r4, #0]
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000cc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		printchar (out, *string);
		++pc;
 8000cc8:	3601      	adds	r6, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d1f6      	bne.n	8000cbc <prints+0x68>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000cce:	f1b8 0f00 	cmp.w	r8, #0
 8000cd2:	dd0a      	ble.n	8000cea <prints+0x96>
 8000cd4:	b33c      	cbz	r4, 8000d26 <prints+0xd2>
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	4641      	mov	r1, r8
static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
		**str = c;
 8000cda:	701f      	strb	r7, [r3, #0]
		++(*str);
 8000cdc:	6823      	ldr	r3, [r4, #0]
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000cde:	3901      	subs	r1, #1
{
	extern int putchar(int c);
	
	if (str) {
		**str = c;
		++(*str);
 8000ce0:	f103 0301 	add.w	r3, r3, #1
 8000ce4:	6023      	str	r3, [r4, #0]
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000ce6:	d1f8      	bne.n	8000cda <prints+0x86>
 8000ce8:	4446      	add	r6, r8
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 8000cea:	4630      	mov	r0, r6
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000cf0:	f7ff ffa4 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000cf4:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		printchar (out, *string);
		++pc;
 8000cf8:	3601      	adds	r6, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0e7      	beq.n	8000cce <prints+0x7a>
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000cfe:	f7ff ff9d 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000d02:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		printchar (out, *string);
		++pc;
 8000d06:	3601      	adds	r6, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f1      	bne.n	8000cf0 <prints+0x9c>
 8000d0c:	e7df      	b.n	8000cce <prints+0x7a>
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000d0e:	4628      	mov	r0, r5
		if (len >= width) width = 0;
		else width -= len;
 8000d10:	ebc0 0808 	rsb	r8, r0, r8
 8000d14:	e7b2      	b.n	8000c7c <prints+0x28>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000d16:	2600      	movs	r6, #0
 8000d18:	e7cb      	b.n	8000cb2 <prints+0x5e>
 8000d1a:	f04f 0920 	mov.w	r9, #32
 8000d1e:	464f      	mov	r7, r9
 8000d20:	2600      	movs	r6, #0
 8000d22:	780d      	ldrb	r5, [r1, #0]
 8000d24:	e7c5      	b.n	8000cb2 <prints+0x5e>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000d26:	4644      	mov	r4, r8
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f7ff ff87 	bl	8000c3c <putchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000d2e:	3c01      	subs	r4, #1
 8000d30:	d1fa      	bne.n	8000d28 <prints+0xd4>
 8000d32:	e7d9      	b.n	8000ce8 <prints+0x94>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000d34:	461e      	mov	r6, r3
 8000d36:	e7bc      	b.n	8000cb2 <prints+0x5e>
 8000d38:	4645      	mov	r5, r8
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	f7ff ff7e 	bl	8000c3c <putchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000d40:	3d01      	subs	r5, #1
 8000d42:	d1fa      	bne.n	8000d3a <prints+0xe6>
 8000d44:	e7b0      	b.n	8000ca8 <prints+0x54>
 8000d46:	bf00      	nop

08000d48 <printi.constprop.1>:
}

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 16

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
 8000d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	461f      	mov	r7, r3
 8000d50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8000d54:	4604      	mov	r4, r0

	if (i == 0) {
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d07c      	beq.n	8000e54 <printi.constprop.1+0x10c>
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d166      	bne.n	8000e2c <printi.constprop.1+0xe4>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	f000 80ba 	beq.w	8000ede <printi.constprop.1+0x196>
 8000d6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000d6c:	f10d 030e 	add.w	r3, sp, #14
 8000d70:	f1a0 0c3a 	sub.w	ip, r0, #58	; 0x3a
		t = u % b;
 8000d74:	fbb4 f6f1 	udiv	r6, r4, r1
 8000d78:	fb01 4416 	mls	r4, r1, r6, r4
		if( t >= 10 )
			t += letbase - '0' - 10;
 8000d7c:	eb04 000c 	add.w	r0, r4, ip
 8000d80:	2c09      	cmp	r4, #9
 8000d82:	bfc8      	it	gt
 8000d84:	4604      	movgt	r4, r0
		*--s = t + '0';
 8000d86:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000d8a:	b2c0      	uxtb	r0, r0
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	7018      	strb	r0, [r3, #0]
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8000d90:	4634      	mov	r4, r6
 8000d92:	3b01      	subs	r3, #1
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d1ed      	bne.n	8000d74 <printi.constprop.1+0x2c>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 8000d98:	4604      	mov	r4, r0
		u /= b;
	}

	if (neg) {
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d13a      	bne.n	8000e14 <printi.constprop.1+0xcc>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000d9e:	4691      	mov	r9, r2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000da0:	2f00      	cmp	r7, #0
 8000da2:	dd50      	ble.n	8000e46 <printi.constprop.1+0xfe>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d052      	beq.n	8000e4e <printi.constprop.1+0x106>
 8000da8:	462a      	mov	r2, r5

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000daa:	2300      	movs	r3, #0
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000dac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000db0:	3301      	adds	r3, #1
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d1fa      	bne.n	8000dac <printi.constprop.1+0x64>
		if (len >= width) width = 0;
 8000db6:	429f      	cmp	r7, r3
 8000db8:	dc4a      	bgt.n	8000e50 <printi.constprop.1+0x108>
 8000dba:	460f      	mov	r7, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8000dbc:	f01a 0f02 	tst.w	sl, #2
 8000dc0:	bf0c      	ite	eq
 8000dc2:	f04f 0820 	moveq.w	r8, #32
 8000dc6:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000dca:	f01a 0a01 	ands.w	sl, sl, #1
 8000dce:	d13c      	bne.n	8000e4a <printi.constprop.1+0x102>
		for ( ; width > 0; --width) {
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	dd3a      	ble.n	8000e4a <printi.constprop.1+0x102>
 8000dd4:	46ba      	mov	sl, r7
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000dd6:	4640      	mov	r0, r8
 8000dd8:	f7ff ff30 	bl	8000c3c <putchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000ddc:	f1ba 0a01 	subs.w	sl, sl, #1
 8000de0:	d1f9      	bne.n	8000dd6 <printi.constprop.1+0x8e>
 8000de2:	463e      	mov	r6, r7
 8000de4:	4657      	mov	r7, sl
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000de6:	b13c      	cbz	r4, 8000df8 <printi.constprop.1+0xb0>
 8000de8:	4620      	mov	r0, r4
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000dea:	f7ff ff27 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000dee:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		printchar (out, *string);
		++pc;
 8000df2:	3601      	adds	r6, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1f8      	bne.n	8000dea <printi.constprop.1+0xa2>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000df8:	2f00      	cmp	r7, #0
 8000dfa:	dd06      	ble.n	8000e0a <printi.constprop.1+0xc2>
 8000dfc:	463c      	mov	r4, r7
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000dfe:	4640      	mov	r0, r8
 8000e00:	f7ff ff1c 	bl	8000c3c <putchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000e04:	3c01      	subs	r4, #1
 8000e06:	d1fa      	bne.n	8000dfe <printi.constprop.1+0xb6>
 8000e08:	443e      	add	r6, r7
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8000e0a:	eb09 0006 	add.w	r0, r9, r6
}
 8000e0e:	b004      	add	sp, #16
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
 8000e14:	b177      	cbz	r7, 8000e34 <printi.constprop.1+0xec>
 8000e16:	f01a 0f02 	tst.w	sl, #2
 8000e1a:	d00b      	beq.n	8000e34 <printi.constprop.1+0xec>
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000e1c:	202d      	movs	r0, #45	; 0x2d
 8000e1e:	f7ff ff0d 	bl	8000c3c <putchar>

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
			--width;
 8000e22:	3f01      	subs	r7, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 8000e24:	f04f 0901 	mov.w	r9, #1
 8000e28:	782c      	ldrb	r4, [r5, #0]
 8000e2a:	e7b9      	b.n	8000da0 <printi.constprop.1+0x58>
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
 8000e2c:	290a      	cmp	r1, #10
 8000e2e:	d051      	beq.n	8000ed4 <printi.constprop.1+0x18c>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000e30:	2200      	movs	r2, #0
 8000e32:	e794      	b.n	8000d5e <printi.constprop.1+0x16>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
 8000e34:	242d      	movs	r4, #45	; 0x2d

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000e36:	2f00      	cmp	r7, #0
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
 8000e38:	f805 4c01 	strb.w	r4, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000e3c:	f04f 0900 	mov.w	r9, #0
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
 8000e40:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000e44:	dcb0      	bgt.n	8000da8 <printi.constprop.1+0x60>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000e46:	f04f 0820 	mov.w	r8, #32
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	e7cb      	b.n	8000de6 <printi.constprop.1+0x9e>

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000e4e:	4623      	mov	r3, r4
		if (len >= width) width = 0;
		else width -= len;
 8000e50:	1aff      	subs	r7, r7, r3
 8000e52:	e7b3      	b.n	8000dbc <printi.constprop.1+0x74>
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 8000e54:	2330      	movs	r3, #48	; 0x30

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000e56:	2f00      	cmp	r7, #0
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
		print_buf[1] = '\0';
 8000e58:	f88d 0001 	strb.w	r0, [sp, #1]
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 8000e5c:	f88d 3000 	strb.w	r3, [sp]

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000e60:	dd32      	ble.n	8000ec8 <printi.constprop.1+0x180>
 8000e62:	46e8      	mov	r8, sp
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000e64:	3001      	adds	r0, #1
 8000e66:	f818 3000 	ldrb.w	r3, [r8, r0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1fa      	bne.n	8000e64 <printi.constprop.1+0x11c>
		if (len >= width) width = 0;
 8000e6e:	4287      	cmp	r7, r0
		else width -= len;
 8000e70:	bfcc      	ite	gt
 8000e72:	ebc0 0707 	rsbgt	r7, r0, r7

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 8000e76:	461f      	movle	r7, r3
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8000e78:	f01a 0f02 	tst.w	sl, #2
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2520      	moveq	r5, #32
 8000e80:	2530      	movne	r5, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000e82:	f01a 0a01 	ands.w	sl, sl, #1
 8000e86:	d123      	bne.n	8000ed0 <printi.constprop.1+0x188>
		for ( ; width > 0; --width) {
 8000e88:	2f00      	cmp	r7, #0
 8000e8a:	dd21      	ble.n	8000ed0 <printi.constprop.1+0x188>
 8000e8c:	463c      	mov	r4, r7
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f7ff fed4 	bl	8000c3c <putchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8000e94:	3c01      	subs	r4, #1
 8000e96:	d1fa      	bne.n	8000e8e <printi.constprop.1+0x146>
 8000e98:	463e      	mov	r6, r7
 8000e9a:	4627      	mov	r7, r4
 8000e9c:	ebc6 0408 	rsb	r4, r6, r8
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000ea0:	2030      	movs	r0, #48	; 0x30
		printchar (out, *string);
		++pc;
 8000ea2:	3601      	adds	r6, #1
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000ea4:	f7ff feca 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8000ea8:	5da0      	ldrb	r0, [r4, r6]
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d1f9      	bne.n	8000ea2 <printi.constprop.1+0x15a>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	dd06      	ble.n	8000ec0 <printi.constprop.1+0x178>
 8000eb2:	463c      	mov	r4, r7
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f7ff fec1 	bl	8000c3c <putchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8000eba:	3c01      	subs	r4, #1
 8000ebc:	d1fa      	bne.n	8000eb4 <printi.constprop.1+0x16c>
 8000ebe:	443e      	add	r6, r7
 8000ec0:	4630      	mov	r0, r6
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
}
 8000ec2:	b004      	add	sp, #16
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000ec8:	4606      	mov	r6, r0
 8000eca:	2520      	movs	r5, #32
 8000ecc:	46e8      	mov	r8, sp
 8000ece:	e7e5      	b.n	8000e9c <printi.constprop.1+0x154>
 8000ed0:	2600      	movs	r6, #0
 8000ed2:	e7e3      	b.n	8000e9c <printi.constprop.1+0x154>
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	daab      	bge.n	8000e30 <printi.constprop.1+0xe8>
		neg = 1;
		u = -i;
 8000ed8:	4244      	negs	r4, r0
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 8000eda:	2201      	movs	r2, #1
 8000edc:	e73f      	b.n	8000d5e <printi.constprop.1+0x16>
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000ede:	f10d 050f 	add.w	r5, sp, #15
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f43f af5b 	beq.w	8000d9e <printi.constprop.1+0x56>
 8000ee8:	e794      	b.n	8000e14 <printi.constprop.1+0xcc>
 8000eea:	bf00      	nop

08000eec <print.constprop.0>:
	}

	return pc + prints (out, s, width, pad);
}

static int print(char **out, const char *format, va_list args )
 8000eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	b087      	sub	sp, #28
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8000ef4:	7800      	ldrb	r0, [r0, #0]
	}

	return pc + prints (out, s, width, pad);
}

static int print(char **out, const char *format, va_list args )
 8000ef6:	9103      	str	r1, [sp, #12]
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f000 8141 	beq.w	8001180 <print.constprop.0+0x294>
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 8000efe:	2600      	movs	r6, #0
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
 8000f00:	4fa1      	ldr	r7, [pc, #644]	; (8001188 <print.constprop.0+0x29c>)
 8000f02:	e009      	b.n	8000f18 <print.constprop.0+0x2c>
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8000f04:	f7ff fe9a 	bl	8000c3c <putchar>
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
 8000f08:	3601      	adds	r6, #1
 8000f0a:	464c      	mov	r4, r9
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8000f0c:	7860      	ldrb	r0, [r4, #1]
 8000f0e:	f104 0901 	add.w	r9, r4, #1
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f000 80a0 	beq.w	8001058 <print.constprop.0+0x16c>
		if (*format == '%') {
 8000f18:	2825      	cmp	r0, #37	; 0x25
 8000f1a:	d1f3      	bne.n	8000f04 <print.constprop.0+0x18>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8000f1c:	f899 5001 	ldrb.w	r5, [r9, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8000f20:	f109 0401 	add.w	r4, r9, #1
			width = pad = 0;
			if (*format == '\0') break;
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	f000 8097 	beq.w	8001058 <print.constprop.0+0x16c>
			if (*format == '%') goto out;
 8000f2a:	2d25      	cmp	r5, #37	; 0x25
 8000f2c:	f000 8098 	beq.w	8001060 <print.constprop.0+0x174>
			if (*format == '-') {
 8000f30:	2d2d      	cmp	r5, #45	; 0x2d
 8000f32:	bf03      	ittte	eq
 8000f34:	f899 5002 	ldrbeq.w	r5, [r9, #2]
				++format;
 8000f38:	f109 0402 	addeq.w	r4, r9, #2
				pad = PAD_RIGHT;
 8000f3c:	f04f 0c01 	moveq.w	ip, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 8000f40:	f04f 0c00 	movne.w	ip, #0
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8000f44:	2d30      	cmp	r5, #48	; 0x30
 8000f46:	d108      	bne.n	8000f5a <print.constprop.0+0x6e>
 8000f48:	1c63      	adds	r3, r4, #1
 8000f4a:	781d      	ldrb	r5, [r3, #0]
 8000f4c:	2d30      	cmp	r5, #48	; 0x30
				++format;
 8000f4e:	461c      	mov	r4, r3
				pad |= PAD_ZERO;
 8000f50:	f04c 0c02 	orr.w	ip, ip, #2
 8000f54:	f103 0301 	add.w	r3, r3, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8000f58:	d0f7      	beq.n	8000f4a <print.constprop.0+0x5e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000f5a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f5e:	b2d3      	uxtb	r3, r2
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	f200 80da 	bhi.w	800111a <print.constprop.0+0x22e>
 8000f66:	1c61      	adds	r1, r4, #1
 8000f68:	2300      	movs	r3, #0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	f811 5b01 	ldrb.w	r5, [r1], #1
				width *= 10;
 8000f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				width += *format - '0';
 8000f74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000f78:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f7c:	b2d0      	uxtb	r0, r2
 8000f7e:	2809      	cmp	r0, #9
 8000f80:	d9f3      	bls.n	8000f6a <print.constprop.0+0x7e>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8000f82:	2d73      	cmp	r5, #115	; 0x73
 8000f84:	d06e      	beq.n	8001064 <print.constprop.0+0x178>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
 8000f86:	2d64      	cmp	r5, #100	; 0x64
 8000f88:	f000 80b9 	beq.w	80010fe <print.constprop.0+0x212>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
 8000f8c:	2d78      	cmp	r5, #120	; 0x78
 8000f8e:	f000 80c6 	beq.w	800111e <print.constprop.0+0x232>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
 8000f92:	2d58      	cmp	r5, #88	; 0x58
 8000f94:	f000 80d7 	beq.w	8001146 <print.constprop.0+0x25a>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
 8000f98:	2d75      	cmp	r5, #117	; 0x75
 8000f9a:	f000 80da 	beq.w	8001152 <print.constprop.0+0x266>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
 8000f9e:	2d63      	cmp	r5, #99	; 0x63
 8000fa0:	d1b4      	bne.n	8000f0c <print.constprop.0+0x20>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000fa2:	9a03      	ldr	r2, [sp, #12]
				scr[1] = '\0';
 8000fa4:	f04f 0100 	mov.w	r1, #0
 8000fa8:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000fac:	f892 8000 	ldrb.w	r8, [r2]
 8000fb0:	f88d 8014 	strb.w	r8, [sp, #20]
 8000fb4:	1d11      	adds	r1, r2, #4
 8000fb6:	9103      	str	r1, [sp, #12]

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80dc 	beq.w	8001176 <print.constprop.0+0x28a>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000fbe:	f1b8 0f00 	cmp.w	r8, #0
 8000fc2:	f000 80df 	beq.w	8001184 <print.constprop.0+0x298>
 8000fc6:	f04f 0a00 	mov.w	sl, #0
 8000fca:	f10d 0b14 	add.w	fp, sp, #20
 8000fce:	f10a 0a01 	add.w	sl, sl, #1
 8000fd2:	f81b 100a 	ldrb.w	r1, [fp, sl]
 8000fd6:	2900      	cmp	r1, #0
 8000fd8:	d1f9      	bne.n	8000fce <print.constprop.0+0xe2>
		if (len >= width) width = 0;
 8000fda:	4553      	cmp	r3, sl
		else width -= len;
 8000fdc:	bfcc      	ite	gt
 8000fde:	ebca 0a03 	rsbgt	sl, sl, r3

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 8000fe2:	f04f 0a00 	movle.w	sl, #0
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8000fe6:	f01c 0f02 	tst.w	ip, #2
 8000fea:	bf14      	ite	ne
 8000fec:	f04f 0930 	movne.w	r9, #48	; 0x30
 8000ff0:	f04f 0920 	moveq.w	r9, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 8000ff4:	f01c 0501 	ands.w	r5, ip, #1
 8000ff8:	f040 80b9 	bne.w	800116e <print.constprop.0+0x282>
		for ( ; width > 0; --width) {
 8000ffc:	f1ba 0f00 	cmp.w	sl, #0
 8001000:	dd08      	ble.n	8001014 <print.constprop.0+0x128>
 8001002:	46d3      	mov	fp, sl
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8001004:	4648      	mov	r0, r9
 8001006:	f7ff fe19 	bl	8000c3c <putchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 800100a:	f1bb 0b01 	subs.w	fp, fp, #1
 800100e:	d1f9      	bne.n	8001004 <print.constprop.0+0x118>
 8001010:	4655      	mov	r5, sl
 8001012:	46da      	mov	sl, fp
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8001014:	f1b8 0f00 	cmp.w	r8, #0
 8001018:	d00c      	beq.n	8001034 <print.constprop.0+0x148>
 800101a:	f10d 0b14 	add.w	fp, sp, #20
 800101e:	ebc5 0b0b 	rsb	fp, r5, fp
		printchar (out, *string);
		++pc;
 8001022:	3501      	adds	r5, #1
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 8001024:	4640      	mov	r0, r8
 8001026:	f7ff fe09 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 800102a:	f81b 8005 	ldrb.w	r8, [fp, r5]
 800102e:	f1b8 0f00 	cmp.w	r8, #0
 8001032:	d1f6      	bne.n	8001022 <print.constprop.0+0x136>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8001034:	f1ba 0f00 	cmp.w	sl, #0
 8001038:	dd07      	ble.n	800104a <print.constprop.0+0x15e>
 800103a:	46d3      	mov	fp, sl
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 800103c:	4648      	mov	r0, r9
 800103e:	f7ff fdfd 	bl	8000c3c <putchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8001042:	f1bb 0b01 	subs.w	fp, fp, #1
 8001046:	d1f9      	bne.n	800103c <print.constprop.0+0x150>
 8001048:	4455      	add	r5, sl
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800104a:	7860      	ldrb	r0, [r4, #1]
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
 800104c:	442e      	add	r6, r5
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800104e:	f104 0901 	add.w	r9, r4, #1
 8001052:	2800      	cmp	r0, #0
 8001054:	f47f af60 	bne.w	8000f18 <print.constprop.0+0x2c>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8001058:	4630      	mov	r0, r6
 800105a:	b007      	add	sp, #28
 800105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8001060:	46a1      	mov	r9, r4
 8001062:	e74f      	b.n	8000f04 <print.constprop.0+0x18>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8001064:	9a03      	ldr	r2, [sp, #12]
 8001066:	f8d2 9000 	ldr.w	r9, [r2]
 800106a:	3204      	adds	r2, #4
				pc += prints (out, s?s:"(null)", width, pad);
 800106c:	f1b9 0f00 	cmp.w	r9, #0
 8001070:	bf08      	it	eq
 8001072:	46b9      	moveq	r9, r7
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8001074:	9203      	str	r2, [sp, #12]

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8001076:	2b00      	cmp	r3, #0
 8001078:	d05f      	beq.n	800113a <print.constprop.0+0x24e>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800107a:	f899 0000 	ldrb.w	r0, [r9]
 800107e:	2800      	cmp	r0, #0
 8001080:	d077      	beq.n	8001172 <print.constprop.0+0x286>
 8001082:	464a      	mov	r2, r9
 8001084:	f04f 0a00 	mov.w	sl, #0
 8001088:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800108c:	f10a 0a01 	add.w	sl, sl, #1
 8001090:	2900      	cmp	r1, #0
 8001092:	d1f9      	bne.n	8001088 <print.constprop.0+0x19c>
		if (len >= width) width = 0;
 8001094:	459a      	cmp	sl, r3
		else width -= len;
 8001096:	bfb4      	ite	lt
 8001098:	ebca 0a03 	rsblt	sl, sl, r3

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 800109c:	f04f 0a00 	movge.w	sl, #0
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 80010a0:	f01c 0f02 	tst.w	ip, #2
 80010a4:	bf14      	ite	ne
 80010a6:	2530      	movne	r5, #48	; 0x30
 80010a8:	2520      	moveq	r5, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 80010aa:	f01c 0c01 	ands.w	ip, ip, #1
 80010ae:	d123      	bne.n	80010f8 <print.constprop.0+0x20c>
		for ( ; width > 0; --width) {
 80010b0:	f1ba 0f00 	cmp.w	sl, #0
 80010b4:	dd20      	ble.n	80010f8 <print.constprop.0+0x20c>
 80010b6:	46d0      	mov	r8, sl
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 80010b8:	4628      	mov	r0, r5
 80010ba:	f7ff fdbf 	bl	8000c3c <putchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 80010be:	f1b8 0801 	subs.w	r8, r8, #1
 80010c2:	d1f9      	bne.n	80010b8 <print.constprop.0+0x1cc>
 80010c4:	f899 0000 	ldrb.w	r0, [r9]
 80010c8:	46d3      	mov	fp, sl
 80010ca:	46c2      	mov	sl, r8
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80010cc:	b138      	cbz	r0, 80010de <print.constprop.0+0x1f2>
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 80010ce:	f7ff fdb5 	bl	8000c3c <putchar>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80010d2:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		printchar (out, *string);
		++pc;
 80010d6:	f10b 0b01 	add.w	fp, fp, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80010da:	2800      	cmp	r0, #0
 80010dc:	d1f7      	bne.n	80010ce <print.constprop.0+0x1e2>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80010de:	f1ba 0f00 	cmp.w	sl, #0
 80010e2:	dd07      	ble.n	80010f4 <print.constprop.0+0x208>
 80010e4:	46d1      	mov	r9, sl
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 80010e6:	4628      	mov	r0, r5
 80010e8:	f7ff fda8 	bl	8000c3c <putchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80010ec:	f1b9 0901 	subs.w	r9, r9, #1
 80010f0:	d1f9      	bne.n	80010e6 <print.constprop.0+0x1fa>
 80010f2:	44d3      	add	fp, sl
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
 80010f4:	445e      	add	r6, fp
 80010f6:	e709      	b.n	8000f0c <print.constprop.0+0x20>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 80010f8:	f04f 0b00 	mov.w	fp, #0
 80010fc:	e7e6      	b.n	80010cc <print.constprop.0+0x1e0>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80010fe:	9a03      	ldr	r2, [sp, #12]
 8001100:	2161      	movs	r1, #97	; 0x61
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	9101      	str	r1, [sp, #4]
 8001106:	1d15      	adds	r5, r2, #4
 8001108:	f8cd c000 	str.w	ip, [sp]
 800110c:	210a      	movs	r1, #10
 800110e:	2201      	movs	r2, #1
 8001110:	9503      	str	r5, [sp, #12]
 8001112:	f7ff fe19 	bl	8000d48 <printi.constprop.1>
 8001116:	4406      	add	r6, r0
 8001118:	e6f8      	b.n	8000f0c <print.constprop.0+0x20>
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800111a:	2300      	movs	r3, #0
 800111c:	e731      	b.n	8000f82 <print.constprop.0+0x96>
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800111e:	9a03      	ldr	r2, [sp, #12]
 8001120:	2161      	movs	r1, #97	; 0x61
 8001122:	6810      	ldr	r0, [r2, #0]
 8001124:	f8cd c000 	str.w	ip, [sp]
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001128:	1d15      	adds	r5, r2, #4
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	9503      	str	r5, [sp, #12]
 8001132:	f7ff fe09 	bl	8000d48 <printi.constprop.1>
 8001136:	4406      	add	r6, r0
 8001138:	e6e8      	b.n	8000f0c <print.constprop.0+0x20>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 800113a:	469b      	mov	fp, r3

	if (width > 0) {
 800113c:	469a      	mov	sl, r3
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 800113e:	2520      	movs	r5, #32
 8001140:	f899 0000 	ldrb.w	r0, [r9]
 8001144:	e7c2      	b.n	80010cc <print.constprop.0+0x1e0>
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001146:	9a03      	ldr	r2, [sp, #12]
 8001148:	2141      	movs	r1, #65	; 0x41
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	f8cd c000 	str.w	ip, [sp]
 8001150:	e7ea      	b.n	8001128 <print.constprop.0+0x23c>
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001152:	9a03      	ldr	r2, [sp, #12]
 8001154:	2161      	movs	r1, #97	; 0x61
 8001156:	6810      	ldr	r0, [r2, #0]
 8001158:	9101      	str	r1, [sp, #4]
 800115a:	1d15      	adds	r5, r2, #4
 800115c:	f8cd c000 	str.w	ip, [sp]
 8001160:	210a      	movs	r1, #10
 8001162:	2200      	movs	r2, #0
 8001164:	9503      	str	r5, [sp, #12]
 8001166:	f7ff fdef 	bl	8000d48 <printi.constprop.1>
 800116a:	4406      	add	r6, r0
 800116c:	e6ce      	b.n	8000f0c <print.constprop.0+0x20>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 800116e:	2500      	movs	r5, #0
 8001170:	e750      	b.n	8001014 <print.constprop.0+0x128>

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8001172:	4682      	mov	sl, r0
 8001174:	e78e      	b.n	8001094 <print.constprop.0+0x1a8>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8001176:	461d      	mov	r5, r3

	if (width > 0) {
 8001178:	469a      	mov	sl, r3
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 800117a:	f04f 0920 	mov.w	r9, #32
 800117e:	e749      	b.n	8001014 <print.constprop.0+0x128>
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 8001180:	4606      	mov	r6, r0
 8001182:	e769      	b.n	8001058 <print.constprop.0+0x16c>
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8001184:	46c2      	mov	sl, r8
 8001186:	e728      	b.n	8000fda <print.constprop.0+0xee>
 8001188:	08005a2c 	.word	0x08005a2c

0800118c <print>:

	return pc + prints (out, s, width, pad);
}

static int print(char **out, const char *format, va_list args )
{
 800118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	4607      	mov	r7, r0
 8001192:	b08a      	sub	sp, #40	; 0x28
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8001194:	7808      	ldrb	r0, [r1, #0]

	return pc + prints (out, s, width, pad);
}

static int print(char **out, const char *format, va_list args )
{
 8001196:	9203      	str	r2, [sp, #12]
 8001198:	460d      	mov	r5, r1
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800119a:	2800      	cmp	r0, #0
 800119c:	f000 812a 	beq.w	80013f4 <print+0x268>

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 80011a0:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8001408 <print+0x27c>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
 80011a4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800140c <print+0x280>
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 80011a8:	f04f 0a00 	mov.w	sl, #0
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
 80011ac:	2825      	cmp	r0, #37	; 0x25
 80011ae:	d015      	beq.n	80011dc <print+0x50>

static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
 80011b0:	2f00      	cmp	r7, #0
 80011b2:	d05c      	beq.n	800126e <print+0xe2>
		**str = c;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7018      	strb	r0, [r3, #0]
		++(*str);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	603b      	str	r3, [r7, #0]
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
 80011be:	f10a 0a01 	add.w	sl, sl, #1
 80011c2:	462c      	mov	r4, r5
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 80011c4:	7860      	ldrb	r0, [r4, #1]
 80011c6:	1c65      	adds	r5, r4, #1
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1ef      	bne.n	80011ac <print+0x20>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 80011cc:	b117      	cbz	r7, 80011d4 <print+0x48>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
 80011d4:	4650      	mov	r0, sl
 80011d6:	b00a      	add	sp, #40	; 0x28
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 80011dc:	786e      	ldrb	r6, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 80011de:	1c6c      	adds	r4, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d0f3      	beq.n	80011cc <print+0x40>
			if (*format == '%') goto out;
 80011e4:	2e25      	cmp	r6, #37	; 0x25
 80011e6:	d03f      	beq.n	8001268 <print+0xdc>
			if (*format == '-') {
 80011e8:	2e2d      	cmp	r6, #45	; 0x2d
 80011ea:	bf03      	ittte	eq
 80011ec:	78ae      	ldrbeq	r6, [r5, #2]
				++format;
 80011ee:	1cac      	addeq	r4, r5, #2
				pad = PAD_RIGHT;
 80011f0:	2301      	moveq	r3, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 80011f2:	2300      	movne	r3, #0
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80011f4:	2e30      	cmp	r6, #48	; 0x30
 80011f6:	d108      	bne.n	800120a <print+0x7e>
 80011f8:	1c62      	adds	r2, r4, #1
 80011fa:	7816      	ldrb	r6, [r2, #0]
 80011fc:	2e30      	cmp	r6, #48	; 0x30
				++format;
 80011fe:	4614      	mov	r4, r2
				pad |= PAD_ZERO;
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	f102 0201 	add.w	r2, r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8001208:	d0f7      	beq.n	80011fa <print+0x6e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800120a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800120e:	b2ca      	uxtb	r2, r1
 8001210:	2a09      	cmp	r2, #9
 8001212:	d863      	bhi.n	80012dc <print+0x150>
 8001214:	1c65      	adds	r5, r4, #1
 8001216:	2200      	movs	r2, #0
 8001218:	462c      	mov	r4, r5
 800121a:	f815 6b01 	ldrb.w	r6, [r5], #1
				width *= 10;
 800121e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
 8001222:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001226:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800122a:	b2c8      	uxtb	r0, r1
 800122c:	2809      	cmp	r0, #9
 800122e:	d9f3      	bls.n	8001218 <print+0x8c>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8001230:	2e73      	cmp	r6, #115	; 0x73
 8001232:	d01f      	beq.n	8001274 <print+0xe8>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
 8001234:	2e64      	cmp	r6, #100	; 0x64
 8001236:	d029      	beq.n	800128c <print+0x100>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
 8001238:	2e78      	cmp	r6, #120	; 0x78
 800123a:	d051      	beq.n	80012e0 <print+0x154>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
 800123c:	2e58      	cmp	r6, #88	; 0x58
 800123e:	d06d      	beq.n	800131c <print+0x190>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
 8001240:	2e75      	cmp	r6, #117	; 0x75
 8001242:	f000 8087 	beq.w	8001354 <print+0x1c8>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
 8001246:	2e63      	cmp	r6, #99	; 0x63
 8001248:	d1bc      	bne.n	80011c4 <print+0x38>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800124a:	9903      	ldr	r1, [sp, #12]
 800124c:	1d08      	adds	r0, r1, #4
 800124e:	680e      	ldr	r6, [r1, #0]
 8001250:	9003      	str	r0, [sp, #12]
				scr[1] = '\0';
 8001252:	2500      	movs	r5, #0
				pc += prints (out, scr, width, pad);
 8001254:	4638      	mov	r0, r7
 8001256:	a905      	add	r1, sp, #20
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8001258:	f88d 6014 	strb.w	r6, [sp, #20]
				scr[1] = '\0';
 800125c:	f88d 5015 	strb.w	r5, [sp, #21]
				pc += prints (out, scr, width, pad);
 8001260:	f7ff fcf8 	bl	8000c54 <prints>
 8001264:	4482      	add	sl, r0
				continue;
 8001266:	e7ad      	b.n	80011c4 <print+0x38>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8001268:	4625      	mov	r5, r4

static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
 800126a:	2f00      	cmp	r7, #0
 800126c:	d1a2      	bne.n	80011b4 <print+0x28>
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 800126e:	f7ff fce5 	bl	8000c3c <putchar>
 8001272:	e7a4      	b.n	80011be <print+0x32>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8001274:	9803      	ldr	r0, [sp, #12]
 8001276:	6801      	ldr	r1, [r0, #0]
 8001278:	1d05      	adds	r5, r0, #4
				pc += prints (out, s?s:"(null)", width, pad);
 800127a:	2900      	cmp	r1, #0
 800127c:	bf08      	it	eq
 800127e:	4649      	moveq	r1, r9
 8001280:	4638      	mov	r0, r7
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8001282:	9503      	str	r5, [sp, #12]
				pc += prints (out, s?s:"(null)", width, pad);
 8001284:	f7ff fce6 	bl	8000c54 <prints>
 8001288:	4482      	add	sl, r0
				continue;
 800128a:	e79b      	b.n	80011c4 <print+0x38>
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800128c:	9903      	ldr	r1, [sp, #12]
 800128e:	680e      	ldr	r6, [r1, #0]
 8001290:	3104      	adds	r1, #4
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 8001292:	2e00      	cmp	r6, #0
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8001294:	9103      	str	r1, [sp, #12]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 8001296:	f000 80a2 	beq.w	80013de <print+0x252>
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
 800129a:	db78      	blt.n	800138e <print+0x202>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 800129c:	f04f 0e00 	mov.w	lr, #0
static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80012a0:	4630      	mov	r0, r6
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80012a2:	f88d e027 	strb.w	lr, [sp, #39]	; 0x27
 80012a6:	f10d 0626 	add.w	r6, sp, #38	; 0x26

	while (u) {
		t = u % b;
 80012aa:	fba8 1500 	umull	r1, r5, r8, r0
 80012ae:	08ed      	lsrs	r5, r5, #3
 80012b0:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 80012b4:	4631      	mov	r1, r6

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 80012b6:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 80012ba:	f100 0630 	add.w	r6, r0, #48	; 0x30
 80012be:	700e      	strb	r6, [r1, #0]
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 80012c0:	4628      	mov	r0, r5
 80012c2:	1e4e      	subs	r6, r1, #1
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d1f0      	bne.n	80012aa <print+0x11e>
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 80012c8:	f1be 0f00 	cmp.w	lr, #0
 80012cc:	d174      	bne.n	80013b8 <print+0x22c>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80012ce:	4675      	mov	r5, lr
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 80012d0:	4638      	mov	r0, r7
 80012d2:	f7ff fcbf 	bl	8000c54 <prints>
 80012d6:	4428      	add	r0, r5
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80012d8:	4482      	add	sl, r0
				continue;
 80012da:	e773      	b.n	80011c4 <print+0x38>
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80012dc:	2200      	movs	r2, #0
 80012de:	e7a7      	b.n	8001230 <print+0xa4>
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80012e0:	9903      	ldr	r1, [sp, #12]
 80012e2:	680d      	ldr	r5, [r1, #0]
 80012e4:	3104      	adds	r1, #4
 80012e6:	9103      	str	r1, [sp, #12]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 80012e8:	2d00      	cmp	r5, #0
 80012ea:	d058      	beq.n	800139e <print+0x212>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80012ec:	2100      	movs	r1, #0
 80012ee:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 80012f2:	f10d 0026 	add.w	r0, sp, #38	; 0x26

	while (u) {
		t = u % b;
 80012f6:	f005 010f 	and.w	r1, r5, #15
		if( t >= 10 )
			t += letbase - '0' - 10;
 80012fa:	f101 0627 	add.w	r6, r1, #39	; 0x27
 80012fe:	2909      	cmp	r1, #9
 8001300:	bfc8      	it	gt
 8001302:	4631      	movgt	r1, r6
		*--s = t + '0';
 8001304:	f101 0630 	add.w	r6, r1, #48	; 0x30
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8001308:	092d      	lsrs	r5, r5, #4
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 800130a:	4601      	mov	r1, r0
 800130c:	f800 6901 	strb.w	r6, [r0], #-1
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8001310:	d1f1      	bne.n	80012f6 <print+0x16a>
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8001312:	4638      	mov	r0, r7
 8001314:	f7ff fc9e 	bl	8000c54 <prints>
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001318:	4482      	add	sl, r0
 800131a:	e753      	b.n	80011c4 <print+0x38>
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800131c:	9903      	ldr	r1, [sp, #12]
 800131e:	680d      	ldr	r5, [r1, #0]
 8001320:	3104      	adds	r1, #4
 8001322:	9103      	str	r1, [sp, #12]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 8001324:	2d00      	cmp	r5, #0
 8001326:	d03a      	beq.n	800139e <print+0x212>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8001328:	2100      	movs	r1, #0
 800132a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 800132e:	f10d 0026 	add.w	r0, sp, #38	; 0x26

	while (u) {
		t = u % b;
 8001332:	f005 010f 	and.w	r1, r5, #15
		if( t >= 10 )
			t += letbase - '0' - 10;
 8001336:	1dce      	adds	r6, r1, #7
 8001338:	2909      	cmp	r1, #9
 800133a:	bfc8      	it	gt
 800133c:	4631      	movgt	r1, r6
		*--s = t + '0';
 800133e:	f101 0630 	add.w	r6, r1, #48	; 0x30
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8001342:	092d      	lsrs	r5, r5, #4
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 8001344:	4601      	mov	r1, r0
 8001346:	f800 6901 	strb.w	r6, [r0], #-1
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 800134a:	d1f2      	bne.n	8001332 <print+0x1a6>
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff fc81 	bl	8000c54 <prints>
 8001352:	e7e1      	b.n	8001318 <print+0x18c>
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001354:	9903      	ldr	r1, [sp, #12]
 8001356:	680d      	ldr	r5, [r1, #0]
 8001358:	3104      	adds	r1, #4
 800135a:	9103      	str	r1, [sp, #12]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 800135c:	b1fd      	cbz	r5, 800139e <print+0x212>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 800135e:	2100      	movs	r1, #0
 8001360:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 8001364:	f10d 0026 	add.w	r0, sp, #38	; 0x26

	while (u) {
		t = u % b;
 8001368:	fba8 6105 	umull	r6, r1, r8, r5
 800136c:	08c9      	lsrs	r1, r1, #3
 800136e:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8001372:	eba5 0546 	sub.w	r5, r5, r6, lsl #1
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 8001376:	f105 0630 	add.w	r6, r5, #48	; 0x30
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 800137a:	460d      	mov	r5, r1
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
 800137c:	4601      	mov	r1, r0
 800137e:	f800 6901 	strb.w	r6, [r0], #-1
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8001382:	2d00      	cmp	r5, #0
 8001384:	d1f0      	bne.n	8001368 <print+0x1dc>
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff fc64 	bl	8000c54 <prints>
 800138c:	e7c4      	b.n	8001318 <print+0x18c>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 800138e:	2100      	movs	r1, #0
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
 8001390:	4270      	negs	r0, r6
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8001392:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27

	while (u) {
 8001396:	b168      	cbz	r0, 80013b4 <print+0x228>
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 8001398:	f04f 0e01 	mov.w	lr, #1
 800139c:	e783      	b.n	80012a6 <print+0x11a>
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 800139e:	2630      	movs	r6, #48	; 0x30
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
 80013a0:	4638      	mov	r0, r7
 80013a2:	a906      	add	r1, sp, #24
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
		print_buf[1] = '\0';
 80013a4:	f88d 5019 	strb.w	r5, [sp, #25]
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 80013a8:	f88d 6018 	strb.w	r6, [sp, #24]
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
 80013ac:	f7ff fc52 	bl	8000c54 <prints>
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80013b0:	4482      	add	sl, r0
 80013b2:	e707      	b.n	80011c4 <print+0x38>
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80013b4:	f10d 0127 	add.w	r1, sp, #39	; 0x27
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
 80013b8:	b15a      	cbz	r2, 80013d2 <print+0x246>
 80013ba:	0798      	lsls	r0, r3, #30
 80013bc:	d509      	bpl.n	80013d2 <print+0x246>

static void printchar(char **str, int c)
{
	extern int putchar(int c);
	
	if (str) {
 80013be:	b1df      	cbz	r7, 80013f8 <print+0x26c>
		**str = c;
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	252d      	movs	r5, #45	; 0x2d
 80013c4:	7005      	strb	r5, [r0, #0]
		++(*str);
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	3001      	adds	r0, #1
 80013ca:	6038      	str	r0, [r7, #0]

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
			--width;
 80013cc:	3a01      	subs	r2, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 80013ce:	2501      	movs	r5, #1
 80013d0:	e77e      	b.n	80012d0 <print+0x144>
			--width;
		}
		else {
			*--s = '-';
 80013d2:	202d      	movs	r0, #45	; 0x2d
 80013d4:	f801 0c01 	strb.w	r0, [r1, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80013d8:	2500      	movs	r5, #0
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
 80013da:	3901      	subs	r1, #1
 80013dc:	e778      	b.n	80012d0 <print+0x144>
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 80013de:	2530      	movs	r5, #48	; 0x30
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
 80013e0:	4638      	mov	r0, r7
 80013e2:	a906      	add	r1, sp, #24
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
		print_buf[1] = '\0';
 80013e4:	f88d 6019 	strb.w	r6, [sp, #25]
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
 80013e8:	f88d 5018 	strb.w	r5, [sp, #24]
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
 80013ec:	f7ff fc32 	bl	8000c54 <prints>
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80013f0:	4482      	add	sl, r0
 80013f2:	e6e7      	b.n	80011c4 <print+0x38>
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 80013f4:	4682      	mov	sl, r0
 80013f6:	e6e9      	b.n	80011cc <print+0x40>
	
	if (str) {
		**str = c;
		++(*str);
	}
	else (void)putchar(c);
 80013f8:	202d      	movs	r0, #45	; 0x2d
 80013fa:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80013fe:	f7ff fc1d 	bl	8000c3c <putchar>
 8001402:	e89d 000e 	ldmia.w	sp, {r1, r2, r3}
 8001406:	e7e1      	b.n	80013cc <print+0x240>
 8001408:	cccccccd 	.word	0xcccccccd
 800140c:	08005a2c 	.word	0x08005a2c

08001410 <my_printf>:
	va_end( args );
	return pc;
}

int my_printf(const char *format, ...)
{
 8001410:	b40f      	push	{r0, r1, r2, r3}
 8001412:	b500      	push	{lr}
 8001414:	b083      	sub	sp, #12
 8001416:	a904      	add	r1, sp, #16
 8001418:	f851 0b04 	ldr.w	r0, [r1], #4
        va_list args;
        
        va_start( args, format );
 800141c:	9101      	str	r1, [sp, #4]
        return print( 0, format, args );
 800141e:	f7ff fd65 	bl	8000eec <print.constprop.0>
}
 8001422:	b003      	add	sp, #12
 8001424:	f85d eb04 	ldr.w	lr, [sp], #4
 8001428:	b004      	add	sp, #16
 800142a:	4770      	bx	lr

0800142c <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 800142c:	b40e      	push	{r1, r2, r3}
 800142e:	b500      	push	{lr}
 8001430:	b084      	sub	sp, #16
 8001432:	aa05      	add	r2, sp, #20
 8001434:	9001      	str	r0, [sp, #4]
 8001436:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
 800143a:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 800143c:	a801      	add	r0, sp, #4
 800143e:	f7ff fea5 	bl	800118c <print>
}
 8001442:	b004      	add	sp, #16
 8001444:	f85d eb04 	ldr.w	lr, [sp], #4
 8001448:	b003      	add	sp, #12
 800144a:	4770      	bx	lr
 800144c:	0000      	movs	r0, r0
	...

08001450 <imu_write>:
 *
 * Routine for writing a byte of data to IMU
 *
 ***********************************************************/
void imu_write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * a timeout occured.
 *
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001454:	4c2b      	ldr	r4, [pc, #172]	; (8001504 <imu_write+0xb4>)
 8001456:	f8d4 8000 	ldr.w	r8, [r4]
 *
 * Routine for writing a byte of data to IMU
 *
 ***********************************************************/
void imu_write(uint8_t address, uint8_t reg, uint8_t data)
{
 800145a:	4607      	mov	r7, r0
 800145c:	460e      	mov	r6, r1
 800145e:	4615      	mov	r5, r2
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(I2C_GetFlagStatus(IMU_I2C_PERIPH, I2C_FLAG_BUSY)  && (!isTimeout(startTime, timeout)));
 8001460:	4829      	ldr	r0, [pc, #164]	; (8001508 <imu_write+0xb8>)
 8001462:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001466:	f002 f905 	bl	8003674 <I2C_GetFlagStatus>
 800146a:	b128      	cbz	r0, 8001478 <imu_write+0x28>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	ebc8 0303 	rsb	r3, r8, r3
 8001472:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001476:	d3f3      	bcc.n	8001460 <imu_write+0x10>
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <imu_write+0xb8>)
 800147a:	2101      	movs	r1, #1
 800147c:	f001 ffca 	bl	8003414 <I2C_GenerateSTART>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001480:	f8d4 8000 	ldr.w	r8, [r4]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001484:	4820      	ldr	r0, [pc, #128]	; (8001508 <imu_write+0xb8>)
 8001486:	4921      	ldr	r1, [pc, #132]	; (800150c <imu_write+0xbc>)
 8001488:	f002 f8e0 	bl	800364c <I2C_CheckEvent>
 800148c:	b928      	cbnz	r0, 800149a <imu_write+0x4a>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	ebc8 0303 	rsb	r3, r8, r3
 8001494:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001498:	d3f4      	bcc.n	8001484 <imu_write+0x34>
 * Sends address and write command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Transmitter);
 800149a:	4639      	mov	r1, r7
 800149c:	481a      	ldr	r0, [pc, #104]	; (8001508 <imu_write+0xb8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f001 ffd4 	bl	800344c <I2C_Send7bitAddress>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 80014a4:	6827      	ldr	r7, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80014a6:	4818      	ldr	r0, [pc, #96]	; (8001508 <imu_write+0xb8>)
 80014a8:	4919      	ldr	r1, [pc, #100]	; (8001510 <imu_write+0xc0>)
 80014aa:	f002 f8cf 	bl	800364c <I2C_CheckEvent>
 80014ae:	b920      	cbnz	r0, 80014ba <imu_write+0x6a>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	1bdb      	subs	r3, r3, r7
 80014b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014b8:	d3f5      	bcc.n	80014a6 <imu_write+0x56>
	else
	{
		regOut = reg;
	}

	I2C_SendData(IMU_I2C_PERIPH, regOut);
 80014ba:	4631      	mov	r1, r6
 80014bc:	4812      	ldr	r0, [pc, #72]	; (8001508 <imu_write+0xb8>)
 80014be:	f002 f85d 	bl	800357c <I2C_SendData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 80014c2:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80014c4:	4810      	ldr	r0, [pc, #64]	; (8001508 <imu_write+0xb8>)
 80014c6:	4913      	ldr	r1, [pc, #76]	; (8001514 <imu_write+0xc4>)
 80014c8:	f002 f8c0 	bl	800364c <I2C_CheckEvent>
 80014cc:	b920      	cbnz	r0, 80014d8 <imu_write+0x88>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	1b9b      	subs	r3, r3, r6
 80014d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014d6:	d3f5      	bcc.n	80014c4 <imu_write+0x74>
 * Sends data to IMU
 *
 ***********************************************************/
uint8_t imu_sendDATA(uint8_t data, uint32_t timeout)
{
	I2C_SendData(IMU_I2C_PERIPH, data);
 80014d8:	4629      	mov	r1, r5
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <imu_write+0xb8>)
 80014dc:	f002 f84e 	bl	800357c <I2C_SendData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 80014e0:	6825      	ldr	r5, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <imu_write+0xb8>)
 80014e4:	490b      	ldr	r1, [pc, #44]	; (8001514 <imu_write+0xc4>)
 80014e6:	f002 f8b1 	bl	800364c <I2C_CheckEvent>
 80014ea:	b920      	cbnz	r0, 80014f6 <imu_write+0xa6>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	1b5b      	subs	r3, r3, r5
 80014f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f4:	d3f5      	bcc.n	80014e2 <imu_write+0x92>
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <imu_write+0xb8>)
 80014f8:	2101      	movs	r1, #1
    imu_sendST(IMU_I2C_TIMEOUT);
    imu_sendSAD_W(address, IMU_I2C_TIMEOUT);
    imu_sendSUB(reg, IMU_I2C_TIMEOUT, FALSE);
    imu_sendDATA(data, IMU_I2C_TIMEOUT);
    imu_sendSP();
}
 80014fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 80014fe:	f001 bf97 	b.w	8003430 <I2C_GenerateSTOP>
 8001502:	bf00      	nop
 8001504:	200008e0 	.word	0x200008e0
 8001508:	40005400 	.word	0x40005400
 800150c:	00030001 	.word	0x00030001
 8001510:	00070082 	.word	0x00070082
 8001514:	00070084 	.word	0x00070084

08001518 <initAcc>:
	enable	= (uint8_t) 0x07;

	dataOut = dataRate | enable;

	//enable accelerometer and set data rate
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG1_XM, dataOut);
 8001518:	203c      	movs	r0, #60	; 0x3c
 800151a:	2120      	movs	r1, #32
 800151c:	2257      	movs	r2, #87	; 0x57
 800151e:	f7ff bf97 	b.w	8001450 <imu_write>
 8001522:	bf00      	nop

08001524 <initRot>:
 *
 ***********************************************************/
void initRot(void)
{
	//enable gyro
	imu_write(IMU_ROTATION_I2C_ADDR, CTRL_REG1_G, (uint8_t) 0x0F);
 8001524:	20d4      	movs	r0, #212	; 0xd4
 8001526:	2120      	movs	r1, #32
 8001528:	220f      	movs	r2, #15
 800152a:	f7ff bf91 	b.w	8001450 <imu_write>
 800152e:	bf00      	nop

08001530 <initMag>:
 *
 * Initializes Magnetic component of IMU
 *
 ***********************************************************/
void initMag(void)
{
 8001530:	b508      	push	{r3, lr}
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG5_XM, (uint8_t) 0x14);
 8001532:	203c      	movs	r0, #60	; 0x3c
 8001534:	2124      	movs	r1, #36	; 0x24
 8001536:	2214      	movs	r2, #20
 8001538:	f7ff ff8a 	bl	8001450 <imu_write>
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG7_XM, (uint8_t) 0x00);
 800153c:	203c      	movs	r0, #60	; 0x3c
 800153e:	2126      	movs	r1, #38	; 0x26
 8001540:	2200      	movs	r2, #0
}
 8001542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 *
 ***********************************************************/
void initMag(void)
{
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG5_XM, (uint8_t) 0x14);
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG7_XM, (uint8_t) 0x00);
 8001546:	f7ff bf83 	b.w	8001450 <imu_write>
 800154a:	bf00      	nop

0800154c <init_IMU>:
 *
 * Initializes I2C, And IMU components
 *
 ***********************************************************/
uint8_t init_IMU(void)
{
 800154c:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct;
	I2C_InitTypeDef I2C_InitStruct;

	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800154e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 *
 * Initializes I2C, And IMU components
 *
 ***********************************************************/
uint8_t init_IMU(void)
{
 8001552:	b086      	sub	sp, #24
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001554:	4d29      	ldr	r5, [pc, #164]	; (80015fc <init_IMU+0xb0>)
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 8001556:	4e2a      	ldr	r6, [pc, #168]	; (8001600 <init_IMU+0xb4>)

	GPIO_InitTypeDef GPIO_InitStruct;
	I2C_InitTypeDef I2C_InitStruct;

	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001558:	2101      	movs	r1, #1
 800155a:	f000 ffa7 	bl	80024ac <RCC_APB1PeriphClockCmd>
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800155e:	2002      	movs	r0, #2
 8001560:	2101      	movs	r1, #1
 8001562:	f000 ff7f 	bl	8002464 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
 8001566:	2401      	movs	r4, #1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
 8001568:	2302      	movs	r3, #2
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 800156a:	4628      	mov	r0, r5
	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
 800156c:	22c0      	movs	r2, #192	; 0xc0
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 800156e:	4669      	mov	r1, sp
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
 8001570:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
 8001574:	f88d 3005 	strb.w	r3, [sp, #5]
	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
 8001578:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
 800157a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
 800157e:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001582:	f000 fd75 	bl	8002070 <GPIO_Init>

	// Connect I2C1 pins to AF
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
 8001586:	4628      	mov	r0, r5
 8001588:	2106      	movs	r1, #6
 800158a:	2204      	movs	r2, #4
 800158c:	f000 fe0e 	bl	80021ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA
 8001590:	4628      	mov	r0, r5
 8001592:	2107      	movs	r1, #7
 8001594:	2204      	movs	r2, #4
 8001596:	f000 fe09 	bl	80021ac <GPIO_PinAFConfig>

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <init_IMU+0xb8>)
 800159c:	9302      	str	r3, [sp, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
 800159e:	2500      	movs	r5, #0
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses
 80015a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
 80015a4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 80015a8:	4630      	mov	r0, r6
 80015aa:	a902      	add	r1, sp, #8
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses
 80015ac:	f8ad 3014 	strh.w	r3, [sp, #20]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
 80015b0:	f8ad 200e 	strh.w	r2, [sp, #14]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
 80015b4:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
 80015b8:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
 80015bc:	f8ad 5012 	strh.w	r5, [sp, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 80015c0:	f001 fe98 	bl	80032f4 <I2C_Init>

	// enable I2C1
	I2C_Cmd(IMU_I2C_PERIPH, ENABLE);
 80015c4:	4630      	mov	r0, r6
 80015c6:	4621      	mov	r1, r4
 80015c8:	f001 ff16 	bl	80033f8 <I2C_Cmd>
	enable	= (uint8_t) 0x07;

	dataOut = dataRate | enable;

	//enable accelerometer and set data rate
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG1_XM, dataOut);
 80015cc:	203c      	movs	r0, #60	; 0x3c
 80015ce:	2120      	movs	r1, #32
 80015d0:	2257      	movs	r2, #87	; 0x57
 80015d2:	f7ff ff3d 	bl	8001450 <imu_write>
 *
 ***********************************************************/
void initRot(void)
{
	//enable gyro
	imu_write(IMU_ROTATION_I2C_ADDR, CTRL_REG1_G, (uint8_t) 0x0F);
 80015d6:	20d4      	movs	r0, #212	; 0xd4
 80015d8:	2120      	movs	r1, #32
 80015da:	220f      	movs	r2, #15
 80015dc:	f7ff ff38 	bl	8001450 <imu_write>
 * Initializes Magnetic component of IMU
 *
 ***********************************************************/
void initMag(void)
{
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG5_XM, (uint8_t) 0x14);
 80015e0:	203c      	movs	r0, #60	; 0x3c
 80015e2:	2124      	movs	r1, #36	; 0x24
 80015e4:	2214      	movs	r2, #20
 80015e6:	f7ff ff33 	bl	8001450 <imu_write>
	imu_write(IMU_ACCELMAG_I2C_ADDR, CTRL_REG7_XM, (uint8_t) 0x00);
 80015ea:	462a      	mov	r2, r5
 80015ec:	203c      	movs	r0, #60	; 0x3c
 80015ee:	2126      	movs	r1, #38	; 0x26
 80015f0:	f7ff ff2e 	bl	8001450 <imu_write>
	initAcc();
	initRot();
	initMag();

	return TRUE;
}
 80015f4:	4620      	mov	r0, r4
 80015f6:	b006      	add	sp, #24
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	bf00      	nop
 80015fc:	40020400 	.word	0x40020400
 8001600:	40005400 	.word	0x40005400
 8001604:	000186a0 	.word	0x000186a0

08001608 <imu_read>:
 *
 * Routine for reading two bytes of data from IMU
 *
 ***********************************************************/
void imu_read(uint8_t address, uint8_t reg, uint16_t *data)
{
 8001608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * a timeout occured.
 *
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 800160c:	4c55      	ldr	r4, [pc, #340]	; (8001764 <imu_read+0x15c>)
 800160e:	f8d4 8000 	ldr.w	r8, [r4]
 *
 * Routine for reading two bytes of data from IMU
 *
 ***********************************************************/
void imu_read(uint8_t address, uint8_t reg, uint16_t *data)
{
 8001612:	4606      	mov	r6, r0
 8001614:	460f      	mov	r7, r1
 8001616:	4615      	mov	r5, r2
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(I2C_GetFlagStatus(IMU_I2C_PERIPH, I2C_FLAG_BUSY)  && (!isTimeout(startTime, timeout)));
 8001618:	4853      	ldr	r0, [pc, #332]	; (8001768 <imu_read+0x160>)
 800161a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800161e:	f002 f829 	bl	8003674 <I2C_GetFlagStatus>
 8001622:	b128      	cbz	r0, 8001630 <imu_read+0x28>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	ebc8 0303 	rsb	r3, r8, r3
 800162a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800162e:	d3f3      	bcc.n	8001618 <imu_read+0x10>
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);
 8001630:	484d      	ldr	r0, [pc, #308]	; (8001768 <imu_read+0x160>)
 8001632:	2101      	movs	r1, #1
 8001634:	f001 feee 	bl	8003414 <I2C_GenerateSTART>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001638:	f8d4 8000 	ldr.w	r8, [r4]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 800163c:	484a      	ldr	r0, [pc, #296]	; (8001768 <imu_read+0x160>)
 800163e:	494b      	ldr	r1, [pc, #300]	; (800176c <imu_read+0x164>)
 8001640:	f002 f804 	bl	800364c <I2C_CheckEvent>
 8001644:	b928      	cbnz	r0, 8001652 <imu_read+0x4a>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	ebc8 0303 	rsb	r3, r8, r3
 800164c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001650:	d3f4      	bcc.n	800163c <imu_read+0x34>
 * Sends address and write command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Transmitter);
 8001652:	4845      	ldr	r0, [pc, #276]	; (8001768 <imu_read+0x160>)
 8001654:	4631      	mov	r1, r6
 8001656:	2200      	movs	r2, #0
 8001658:	f001 fef8 	bl	800344c <I2C_Send7bitAddress>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 800165c:	f8d4 8000 	ldr.w	r8, [r4]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001660:	4841      	ldr	r0, [pc, #260]	; (8001768 <imu_read+0x160>)
 8001662:	4943      	ldr	r1, [pc, #268]	; (8001770 <imu_read+0x168>)
 8001664:	f001 fff2 	bl	800364c <I2C_CheckEvent>
 8001668:	b928      	cbnz	r0, 8001676 <imu_read+0x6e>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	ebc8 0303 	rsb	r3, r8, r3
 8001670:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001674:	d3f4      	bcc.n	8001660 <imu_read+0x58>
	else
	{
		regOut = reg;
	}

	I2C_SendData(IMU_I2C_PERIPH, regOut);
 8001676:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 800167a:	483b      	ldr	r0, [pc, #236]	; (8001768 <imu_read+0x160>)
 800167c:	f001 ff7e 	bl	800357c <I2C_SendData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001680:	6827      	ldr	r7, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001682:	4839      	ldr	r0, [pc, #228]	; (8001768 <imu_read+0x160>)
 8001684:	493b      	ldr	r1, [pc, #236]	; (8001774 <imu_read+0x16c>)
 8001686:	f001 ffe1 	bl	800364c <I2C_CheckEvent>
 800168a:	b920      	cbnz	r0, 8001696 <imu_read+0x8e>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	1bdb      	subs	r3, r3, r7
 8001690:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001694:	d3f5      	bcc.n	8001682 <imu_read+0x7a>
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);
 8001696:	4834      	ldr	r0, [pc, #208]	; (8001768 <imu_read+0x160>)
 8001698:	2101      	movs	r1, #1
 800169a:	f001 febb 	bl	8003414 <I2C_GenerateSTART>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 800169e:	6827      	ldr	r7, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <imu_read+0x160>)
 80016a2:	4932      	ldr	r1, [pc, #200]	; (800176c <imu_read+0x164>)
 80016a4:	f001 ffd2 	bl	800364c <I2C_CheckEvent>
 80016a8:	b920      	cbnz	r0, 80016b4 <imu_read+0xac>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	1bdb      	subs	r3, r3, r7
 80016ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016b2:	d3f5      	bcc.n	80016a0 <imu_read+0x98>
 *
 ***********************************************************/
uint8_t imu_sendSAD_R(uint8_t address, uint32_t timeout)
{

	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Receiver);
 80016b4:	4631      	mov	r1, r6
 80016b6:	482c      	ldr	r0, [pc, #176]	; (8001768 <imu_read+0x160>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	f001 fec7 	bl	800344c <I2C_Send7bitAddress>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 80016be:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80016c0:	4829      	ldr	r0, [pc, #164]	; (8001768 <imu_read+0x160>)
 80016c2:	492d      	ldr	r1, [pc, #180]	; (8001778 <imu_read+0x170>)
 80016c4:	f001 ffc2 	bl	800364c <I2C_CheckEvent>
 80016c8:	b920      	cbnz	r0, 80016d4 <imu_read+0xcc>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	1b9b      	subs	r3, r3, r6
 80016ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d2:	d3f5      	bcc.n	80016c0 <imu_read+0xb8>
{

	uint16_t data_L	=	0x00;
	uint16_t data_H = 	0x00;

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);
 80016d4:	4824      	ldr	r0, [pc, #144]	; (8001768 <imu_read+0x160>)
 80016d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016da:	f001 ff21 	bl	8003520 <I2C_NACKPositionConfig>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 80016de:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80016e0:	4821      	ldr	r0, [pc, #132]	; (8001768 <imu_read+0x160>)
 80016e2:	4926      	ldr	r1, [pc, #152]	; (800177c <imu_read+0x174>)
 80016e4:	f001 ffb2 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80016e8:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 80016ea:	b960      	cbnz	r0, 8001706 <imu_read+0xfe>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 80016ec:	1b9b      	subs	r3, r3, r6
 80016ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f2:	d3f5      	bcc.n	80016e0 <imu_read+0xd8>
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
	}
	else
	{
		my_printf("\t\tFailure receiving Data_L\r\n");
 80016f4:	4822      	ldr	r0, [pc, #136]	; (8001780 <imu_read+0x178>)
 80016f6:	f7ff fe8b 	bl	8001410 <my_printf>
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <imu_read+0x160>)
 80016fc:	2101      	movs	r1, #1
    imu_sendSAD_R(address, IMU_I2C_TIMEOUT);
    imu_receiveData(data, IMU_I2C_TIMEOUT);
    imu_sendSP();

	return;
}
 80016fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001702:	f001 be95 	b.w	8003430 <I2C_GenerateSTOP>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001706:	1b9b      	subs	r3, r3, r6
 8001708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001764 <imu_read+0x15c>
 8001710:	d2f0      	bcs.n	80016f4 <imu_read+0xec>

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <imu_read+0x160>)
 8001714:	f001 ff34 	bl	8003580 <I2C_ReceiveData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001718:	f8d8 6000 	ldr.w	r6, [r8]

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
 800171c:	4607      	mov	r7, r0
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <imu_read+0x160>)
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <imu_read+0x174>)
 8001722:	f001 ff93 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001726:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001728:	b960      	cbnz	r0, 8001744 <imu_read+0x13c>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 800172a:	1b9b      	subs	r3, r3, r6
 800172c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001730:	d3f5      	bcc.n	800171e <imu_read+0x116>
	{
		data_H = I2C_ReceiveData(IMU_I2C_PERIPH);
	}
	else
	{
		my_printf("\t\tFailure receiving Data_H\r\n");
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <imu_read+0x17c>)
 8001734:	f7ff fe6c 	bl	8001410 <my_printf>
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <imu_read+0x160>)
 800173a:	2101      	movs	r1, #1
    imu_sendSAD_R(address, IMU_I2C_TIMEOUT);
    imu_receiveData(data, IMU_I2C_TIMEOUT);
    imu_sendSP();

	return;
}
 800173c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001740:	f001 be76 	b.w	8003430 <I2C_GenerateSTOP>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001744:	1b9e      	subs	r6, r3, r6
 8001746:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 800174a:	d2f2      	bcs.n	8001732 <imu_read+0x12a>
		return FALSE;
	}

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_H = I2C_ReceiveData(IMU_I2C_PERIPH);
 800174c:	4806      	ldr	r0, [pc, #24]	; (8001768 <imu_read+0x160>)
 800174e:	f001 ff17 	bl	8003580 <I2C_ReceiveData>
	{
		my_printf("\t\tFailure receiving Data_H\r\n");
		return FALSE;
	}

	*data = (((uint16_t) data_H) << 8 ) | ((uint16_t) data_L);
 8001752:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
 8001756:	8028      	strh	r0, [r5, #0]
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001758:	2101      	movs	r1, #1
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <imu_read+0x160>)
    imu_sendSAD_R(address, IMU_I2C_TIMEOUT);
    imu_receiveData(data, IMU_I2C_TIMEOUT);
    imu_sendSP();

	return;
}
 800175c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001760:	f001 be66 	b.w	8003430 <I2C_GenerateSTOP>
 8001764:	200008e0 	.word	0x200008e0
 8001768:	40005400 	.word	0x40005400
 800176c:	00030001 	.word	0x00030001
 8001770:	00070082 	.word	0x00070082
 8001774:	00070084 	.word	0x00070084
 8001778:	00030002 	.word	0x00030002
 800177c:	00030040 	.word	0x00030040
 8001780:	08005a34 	.word	0x08005a34
 8001784:	08005a54 	.word	0x08005a54

08001788 <imu_getAcc>:
 *
 * Polls IMU for acceleration data
 *
 ***********************************************************/
void imu_getAcc(struct Components *acc)
{
 8001788:	b510      	push	{r4, lr}
 800178a:	b086      	sub	sp, #24
	short int 	datax	= 0x0000,
 800178c:	2300      	movs	r3, #0
 *
 * Polls IMU for acceleration data
 *
 ***********************************************************/
void imu_getAcc(struct Components *acc)
{
 800178e:	4604      	mov	r4, r0
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
 8001790:	466a      	mov	r2, sp
 8001792:	203c      	movs	r0, #60	; 0x3c
 8001794:	2128      	movs	r1, #40	; 0x28
 * Polls IMU for acceleration data
 *
 ***********************************************************/
void imu_getAcc(struct Components *acc)
{
	short int 	datax	= 0x0000,
 8001796:	f8ad 3000 	strh.w	r3, [sp]
				datay	= 0x0000,
 800179a:	f8ad 3008 	strh.w	r3, [sp, #8]
				dataz	= 0x0000;
 800179e:	f8ad 3010 	strh.w	r3, [sp, #16]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
 80017a2:	f7ff ff31 	bl	8001608 <imu_read>
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 80017a6:	f9bd 0000 	ldrsh.w	r0, [sp]
 80017aa:	ee07 0a90 	vmov	s15, r0
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	ee17 0a90 	vmov	r0, s15
 80017b6:	f002 fd19 	bl	80041ec <__aeabi_f2d>
 80017ba:	a323      	add	r3, pc, #140	; (adr r3, 8001848 <imu_getAcc+0xc0>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f002 fe92 	bl	80044e8 <__aeabi_ddiv>
 80017c4:	460b      	mov	r3, r1
 80017c6:	4602      	mov	r2, r0
 80017c8:	f002 fbb2 	bl	8003f30 <__adddf3>
 80017cc:	f003 f824 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
 80017d0:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 80017d2:	6020      	str	r0, [r4, #0]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
 80017d4:	212a      	movs	r1, #42	; 0x2a
 80017d6:	203c      	movs	r0, #60	; 0x3c
 80017d8:	f7ff ff16 	bl	8001608 <imu_read>
	acc->y = (((float) datay)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 80017dc:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80017e0:	ee07 0a90 	vmov	s15, r0
 80017e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f002 fcfe 	bl	80041ec <__aeabi_f2d>
 80017f0:	a315      	add	r3, pc, #84	; (adr r3, 8001848 <imu_getAcc+0xc0>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f002 fe77 	bl	80044e8 <__aeabi_ddiv>
 80017fa:	460b      	mov	r3, r1
 80017fc:	4602      	mov	r2, r0
 80017fe:	f002 fb97 	bl	8003f30 <__adddf3>
 8001802:	f003 f809 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_A, &dataz);
 8001806:	aa04      	add	r2, sp, #16

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
	acc->y = (((float) datay)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001808:	6060      	str	r0, [r4, #4]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_A, &dataz);
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	203c      	movs	r0, #60	; 0x3c
 800180e:	f7ff fefb 	bl	8001608 <imu_read>
	acc->z = (((float) dataz)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001812:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8001816:	ee07 0a90 	vmov	s15, r0
 800181a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f002 fce3 	bl	80041ec <__aeabi_f2d>
 8001826:	a308      	add	r3, pc, #32	; (adr r3, 8001848 <imu_getAcc+0xc0>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f002 fe5c 	bl	80044e8 <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	f002 fb7c 	bl	8003f30 <__adddf3>
 8001838:	f002 ffee 	bl	8004818 <__aeabi_d2f>
 800183c:	60a0      	str	r0, [r4, #8]

}
 800183e:	b006      	add	sp, #24
 8001840:	bd10      	pop	{r4, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	00000000 	.word	0x00000000
 800184c:	40dfffc0 	.word	0x40dfffc0

08001850 <imu_getMag>:
 *
 * Polls IMU for magnetic data
 *
 ***********************************************************/
void imu_getMag(struct Components *mag)
{
 8001850:	b510      	push	{r4, lr}
 8001852:	b086      	sub	sp, #24
	short int 	datax	= 0x0000,
 8001854:	2300      	movs	r3, #0
 *
 * Polls IMU for magnetic data
 *
 ***********************************************************/
void imu_getMag(struct Components *mag)
{
 8001856:	4604      	mov	r4, r0
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
 8001858:	466a      	mov	r2, sp
 800185a:	203c      	movs	r0, #60	; 0x3c
 800185c:	2108      	movs	r1, #8
 * Polls IMU for magnetic data
 *
 ***********************************************************/
void imu_getMag(struct Components *mag)
{
	short int 	datax	= 0x0000,
 800185e:	f8ad 3000 	strh.w	r3, [sp]
				datay	= 0x0000,
 8001862:	f8ad 3008 	strh.w	r3, [sp, #8]
				dataz	= 0x0000;
 8001866:	f8ad 3010 	strh.w	r3, [sp, #16]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
 800186a:	f7ff fecd 	bl	8001608 <imu_read>
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;
 800186e:	f9bd 0000 	ldrsh.w	r0, [sp]
 8001872:	ee07 0a90 	vmov	s15, r0
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee17 0a90 	vmov	r0, s15
 800187e:	f002 fcb5 	bl	80041ec <__aeabi_f2d>
 8001882:	a323      	add	r3, pc, #140	; (adr r3, 8001910 <imu_getMag+0xc0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f002 fe2e 	bl	80044e8 <__aeabi_ddiv>
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <imu_getMag+0xc8>)
 800188e:	2200      	movs	r2, #0
 8001890:	f002 fd00 	bl	8004294 <__aeabi_dmul>
 8001894:	f002 ffc0 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
 8001898:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;
 800189a:	6020      	str	r0, [r4, #0]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
 800189c:	210a      	movs	r1, #10
 800189e:	203c      	movs	r0, #60	; 0x3c
 80018a0:	f7ff feb2 	bl	8001608 <imu_read>
	mag->y = (((float) datay)/32767.0) * (float)DEFAULT_MAG_RANGE;
 80018a4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80018a8:	ee07 0a90 	vmov	s15, r0
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f002 fc9a 	bl	80041ec <__aeabi_f2d>
 80018b8:	a315      	add	r3, pc, #84	; (adr r3, 8001910 <imu_getMag+0xc0>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f002 fe13 	bl	80044e8 <__aeabi_ddiv>
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <imu_getMag+0xc8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f002 fce5 	bl	8004294 <__aeabi_dmul>
 80018ca:	f002 ffa5 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_M, &dataz);
 80018ce:	aa04      	add	r2, sp, #16

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
	mag->y = (((float) datay)/32767.0) * (float)DEFAULT_MAG_RANGE;
 80018d0:	6060      	str	r0, [r4, #4]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_M, &dataz);
 80018d2:	210c      	movs	r1, #12
 80018d4:	203c      	movs	r0, #60	; 0x3c
 80018d6:	f7ff fe97 	bl	8001608 <imu_read>
	mag->z = (((float) dataz)/32767.0) * (float)DEFAULT_MAG_RANGE;
 80018da:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80018de:	ee07 0a90 	vmov	s15, r0
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	ee17 0a90 	vmov	r0, s15
 80018ea:	f002 fc7f 	bl	80041ec <__aeabi_f2d>
 80018ee:	a308      	add	r3, pc, #32	; (adr r3, 8001910 <imu_getMag+0xc0>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f002 fdf8 	bl	80044e8 <__aeabi_ddiv>
 80018f8:	2200      	movs	r2, #0
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <imu_getMag+0xc8>)
 80018fc:	f002 fcca 	bl	8004294 <__aeabi_dmul>
 8001900:	f002 ff8a 	bl	8004818 <__aeabi_d2f>
 8001904:	60a0      	str	r0, [r4, #8]
}
 8001906:	b006      	add	sp, #24
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	00000000 	.word	0x00000000
 8001914:	40dfffc0 	.word	0x40dfffc0
 8001918:	40100000 	.word	0x40100000

0800191c <imu_getRot>:
 *
 * Polls IMU for Gyro data
 *
 ***********************************************************/
void imu_getRot(struct Components *rot)
{
 800191c:	b510      	push	{r4, lr}
 800191e:	b086      	sub	sp, #24

	short int 	datax	= 0x0000,
 8001920:	2300      	movs	r3, #0
 *
 * Polls IMU for Gyro data
 *
 ***********************************************************/
void imu_getRot(struct Components *rot)
{
 8001922:	4604      	mov	r4, r0

	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
 8001924:	466a      	mov	r2, sp
 8001926:	20d4      	movs	r0, #212	; 0xd4
 8001928:	2128      	movs	r1, #40	; 0x28
 *
 ***********************************************************/
void imu_getRot(struct Components *rot)
{

	short int 	datax	= 0x0000,
 800192a:	f8ad 3000 	strh.w	r3, [sp]
				datay	= 0x0000,
 800192e:	f8ad 3008 	strh.w	r3, [sp, #8]
				dataz	= 0x0000;
 8001932:	f8ad 3010 	strh.w	r3, [sp, #16]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
 8001936:	f7ff fe67 	bl	8001608 <imu_read>
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 800193a:	f9bd 0000 	ldrsh.w	r0, [sp]
 800193e:	ee07 0a90 	vmov	s15, r0
 8001942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001946:	ee17 0a90 	vmov	r0, s15
 800194a:	f002 fc4f 	bl	80041ec <__aeabi_f2d>
 800194e:	a324      	add	r3, pc, #144	; (adr r3, 80019e0 <imu_getRot+0xc4>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f002 fdc8 	bl	80044e8 <__aeabi_ddiv>
 8001958:	a323      	add	r3, pc, #140	; (adr r3, 80019e8 <imu_getRot+0xcc>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f002 fc99 	bl	8004294 <__aeabi_dmul>
 8001962:	f002 ff59 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
 8001966:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001968:	6020      	str	r0, [r4, #0]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
 800196a:	212a      	movs	r1, #42	; 0x2a
 800196c:	20d4      	movs	r0, #212	; 0xd4
 800196e:	f7ff fe4b 	bl	8001608 <imu_read>
	rot->y = (((float) datay)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001972:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001976:	ee07 0a90 	vmov	s15, r0
 800197a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f002 fc33 	bl	80041ec <__aeabi_f2d>
 8001986:	a316      	add	r3, pc, #88	; (adr r3, 80019e0 <imu_getRot+0xc4>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f002 fdac 	bl	80044e8 <__aeabi_ddiv>
 8001990:	a315      	add	r3, pc, #84	; (adr r3, 80019e8 <imu_getRot+0xcc>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f002 fc7d 	bl	8004294 <__aeabi_dmul>
 800199a:	f002 ff3d 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Z_L_G, &dataz);
 800199e:	aa04      	add	r2, sp, #16

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
	rot->y = (((float) datay)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 80019a0:	6060      	str	r0, [r4, #4]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Z_L_G, &dataz);
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	20d4      	movs	r0, #212	; 0xd4
 80019a6:	f7ff fe2f 	bl	8001608 <imu_read>
	rot->z = (((float) dataz)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 80019aa:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80019ae:	ee07 0a90 	vmov	s15, r0
 80019b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b6:	ee17 0a90 	vmov	r0, s15
 80019ba:	f002 fc17 	bl	80041ec <__aeabi_f2d>
 80019be:	a308      	add	r3, pc, #32	; (adr r3, 80019e0 <imu_getRot+0xc4>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f002 fd90 	bl	80044e8 <__aeabi_ddiv>
 80019c8:	a307      	add	r3, pc, #28	; (adr r3, 80019e8 <imu_getRot+0xcc>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f002 fc61 	bl	8004294 <__aeabi_dmul>
 80019d2:	f002 ff21 	bl	8004818 <__aeabi_d2f>
 80019d6:	60a0      	str	r0, [r4, #8]
}
 80019d8:	b006      	add	sp, #24
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40dfffc0 	.word	0x40dfffc0
 80019e8:	00000000 	.word	0x00000000
 80019ec:	406c2000 	.word	0x406c2000

080019f0 <imu_getDOF>:
 *
 * Polls the IMU for all DOF data
 *
 ***********************************************************/
void imu_getDOF(imuDof_S *dof)
{
 80019f0:	b530      	push	{r4, r5, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	4604      	mov	r4, r0
 * Polls IMU for acceleration data
 *
 ***********************************************************/
void imu_getAcc(struct Components *acc)
{
	short int 	datax	= 0x0000,
 80019f6:	2500      	movs	r5, #0
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
 80019f8:	466a      	mov	r2, sp
 80019fa:	203c      	movs	r0, #60	; 0x3c
 80019fc:	2128      	movs	r1, #40	; 0x28
 * Polls IMU for acceleration data
 *
 ***********************************************************/
void imu_getAcc(struct Components *acc)
{
	short int 	datax	= 0x0000,
 80019fe:	f8ad 5000 	strh.w	r5, [sp]
				datay	= 0x0000,
 8001a02:	f8ad 5008 	strh.w	r5, [sp, #8]
				dataz	= 0x0000;
 8001a06:	f8ad 5010 	strh.w	r5, [sp, #16]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
 8001a0a:	f7ff fdfd 	bl	8001608 <imu_read>
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001a0e:	f9bd 0000 	ldrsh.w	r0, [sp]
 8001a12:	ee07 0a90 	vmov	s15, r0
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	ee17 0a90 	vmov	r0, s15
 8001a1e:	f002 fbe5 	bl	80041ec <__aeabi_f2d>
 8001a22:	a37b      	add	r3, pc, #492	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f002 fd5e 	bl	80044e8 <__aeabi_ddiv>
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f002 fa7e 	bl	8003f30 <__adddf3>
 8001a34:	f002 fef0 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
 8001a38:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001a3a:	6020      	str	r0, [r4, #0]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
 8001a3c:	212a      	movs	r1, #42	; 0x2a
 8001a3e:	203c      	movs	r0, #60	; 0x3c
 8001a40:	f7ff fde2 	bl	8001608 <imu_read>
	acc->y = (((float) datay)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001a44:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001a48:	ee07 0a90 	vmov	s15, r0
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	ee17 0a90 	vmov	r0, s15
 8001a54:	f002 fbca 	bl	80041ec <__aeabi_f2d>
 8001a58:	a36d      	add	r3, pc, #436	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f002 fd43 	bl	80044e8 <__aeabi_ddiv>
 8001a62:	460b      	mov	r3, r1
 8001a64:	4602      	mov	r2, r0
 8001a66:	f002 fa63 	bl	8003f30 <__adddf3>
 8001a6a:	f002 fed5 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_A, &dataz);
 8001a6e:	aa04      	add	r2, sp, #16

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_A, &datax);
	acc->x = (((float) datax)/32767.0) * (float)DEFAULT_ACCEL_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
	acc->y = (((float) datay)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001a70:	6060      	str	r0, [r4, #4]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_A, &dataz);
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	203c      	movs	r0, #60	; 0x3c
 8001a76:	f7ff fdc7 	bl	8001608 <imu_read>
	acc->z = (((float) dataz)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001a7a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8001a7e:	ee07 0a90 	vmov	s15, r0
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	ee17 0a90 	vmov	r0, s15
 8001a8a:	f002 fbaf 	bl	80041ec <__aeabi_f2d>
 8001a8e:	a360      	add	r3, pc, #384	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f002 fd28 	bl	80044e8 <__aeabi_ddiv>
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f002 fa48 	bl	8003f30 <__adddf3>
 8001aa0:	f002 feba 	bl	8004818 <__aeabi_d2f>
{
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
 8001aa4:	466a      	mov	r2, sp

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_A, &datay);
	acc->y = (((float) datay)/32767.0) * (float)DEFAULT_ACCEL_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_A, &dataz);
	acc->z = (((float) dataz)/32767.0) * (float)DEFAULT_ACCEL_RANGE;
 8001aa6:	60a0      	str	r0, [r4, #8]
{
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	203c      	movs	r0, #60	; 0x3c
 * Polls IMU for magnetic data
 *
 ***********************************************************/
void imu_getMag(struct Components *mag)
{
	short int 	datax	= 0x0000,
 8001aac:	f8ad 5000 	strh.w	r5, [sp]
				datay	= 0x0000,
 8001ab0:	f8ad 5008 	strh.w	r5, [sp, #8]
				dataz	= 0x0000;
 8001ab4:	f8ad 5010 	strh.w	r5, [sp, #16]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
 8001ab8:	f7ff fda6 	bl	8001608 <imu_read>
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001abc:	f9bd 0000 	ldrsh.w	r0, [sp]
 8001ac0:	ee07 0a90 	vmov	s15, r0
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ee17 0a90 	vmov	r0, s15
 8001acc:	f002 fb8e 	bl	80041ec <__aeabi_f2d>
 8001ad0:	a34f      	add	r3, pc, #316	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f002 fd07 	bl	80044e8 <__aeabi_ddiv>
 8001ada:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <imu_getDOF+0x230>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f002 fbd9 	bl	8004294 <__aeabi_dmul>
 8001ae2:	f002 fe99 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
 8001ae6:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001ae8:	60e0      	str	r0, [r4, #12]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
 8001aea:	210a      	movs	r1, #10
 8001aec:	203c      	movs	r0, #60	; 0x3c
 8001aee:	f7ff fd8b 	bl	8001608 <imu_read>
	mag->y = (((float) datay)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001af2:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001af6:	ee07 0a90 	vmov	s15, r0
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	ee17 0a90 	vmov	r0, s15
 8001b02:	f002 fb73 	bl	80041ec <__aeabi_f2d>
 8001b06:	a342      	add	r3, pc, #264	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f002 fcec 	bl	80044e8 <__aeabi_ddiv>
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <imu_getDOF+0x230>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f002 fbbe 	bl	8004294 <__aeabi_dmul>
 8001b18:	f002 fe7e 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_M, &dataz);
 8001b1c:	aa04      	add	r2, sp, #16

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_X_L_M, &datax);
	mag->x = (((float) datax)/32767.0) * (float)DEFAULT_MAG_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
	mag->y = (((float) datay)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001b1e:	6120      	str	r0, [r4, #16]

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_M, &dataz);
 8001b20:	210c      	movs	r1, #12
 8001b22:	203c      	movs	r0, #60	; 0x3c
 8001b24:	f7ff fd70 	bl	8001608 <imu_read>
	mag->z = (((float) dataz)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001b28:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8001b2c:	ee07 0a90 	vmov	s15, r0
 8001b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f002 fb58 	bl	80041ec <__aeabi_f2d>
 8001b3c:	a334      	add	r3, pc, #208	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f002 fcd1 	bl	80044e8 <__aeabi_ddiv>
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <imu_getDOF+0x230>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f002 fba3 	bl	8004294 <__aeabi_dmul>
 8001b4e:	f002 fe63 	bl	8004818 <__aeabi_d2f>

	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
 8001b52:	466a      	mov	r2, sp

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Y_L_M, &datay);
	mag->y = (((float) datay)/32767.0) * (float)DEFAULT_MAG_RANGE;

	imu_read(IMU_ACCELMAG_I2C_ADDR, OUT_Z_L_M, &dataz);
	mag->z = (((float) dataz)/32767.0) * (float)DEFAULT_MAG_RANGE;
 8001b54:	6160      	str	r0, [r4, #20]

	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
 8001b56:	2128      	movs	r1, #40	; 0x28
 8001b58:	20d4      	movs	r0, #212	; 0xd4
 *
 ***********************************************************/
void imu_getRot(struct Components *rot)
{

	short int 	datax	= 0x0000,
 8001b5a:	f8ad 5000 	strh.w	r5, [sp]
				datay	= 0x0000,
 8001b5e:	f8ad 5008 	strh.w	r5, [sp, #8]
				dataz	= 0x0000;
 8001b62:	f8ad 5010 	strh.w	r5, [sp, #16]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
 8001b66:	f7ff fd4f 	bl	8001608 <imu_read>
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001b6a:	f9bd 0000 	ldrsh.w	r0, [sp]
 8001b6e:	ee07 0a90 	vmov	s15, r0
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f002 fb37 	bl	80041ec <__aeabi_f2d>
 8001b7e:	a324      	add	r3, pc, #144	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f002 fcb0 	bl	80044e8 <__aeabi_ddiv>
 8001b88:	a323      	add	r3, pc, #140	; (adr r3, 8001c18 <imu_getDOF+0x228>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f002 fb81 	bl	8004294 <__aeabi_dmul>
 8001b92:	f002 fe41 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
 8001b96:	aa02      	add	r2, sp, #8
	short int 	datax	= 0x0000,
				datay	= 0x0000,
				dataz	= 0x0000;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001b98:	61a0      	str	r0, [r4, #24]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
 8001b9a:	212a      	movs	r1, #42	; 0x2a
 8001b9c:	20d4      	movs	r0, #212	; 0xd4
 8001b9e:	f7ff fd33 	bl	8001608 <imu_read>
	rot->y = (((float) datay)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001ba2:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001ba6:	ee07 0a90 	vmov	s15, r0
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ee17 0a90 	vmov	r0, s15
 8001bb2:	f002 fb1b 	bl	80041ec <__aeabi_f2d>
 8001bb6:	a316      	add	r3, pc, #88	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f002 fc94 	bl	80044e8 <__aeabi_ddiv>
 8001bc0:	a315      	add	r3, pc, #84	; (adr r3, 8001c18 <imu_getDOF+0x228>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f002 fb65 	bl	8004294 <__aeabi_dmul>
 8001bca:	f002 fe25 	bl	8004818 <__aeabi_d2f>

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Z_L_G, &dataz);
 8001bce:	aa04      	add	r2, sp, #16

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_X_L_G, &datax);
	rot->x = (((float) datax)/32767.0) * (float)DEFAULT_GYRO_RANGE;

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Y_L_G, &datay);
	rot->y = (((float) datay)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001bd0:	61e0      	str	r0, [r4, #28]

	imu_read(IMU_ROTATION_I2C_ADDR, OUT_Z_L_G, &dataz);
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	20d4      	movs	r0, #212	; 0xd4
 8001bd6:	f7ff fd17 	bl	8001608 <imu_read>
	rot->z = (((float) dataz)/32767.0) * (float)DEFAULT_GYRO_RANGE;
 8001bda:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8001bde:	ee07 0a90 	vmov	s15, r0
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	ee17 0a90 	vmov	r0, s15
 8001bea:	f002 faff 	bl	80041ec <__aeabi_f2d>
 8001bee:	a308      	add	r3, pc, #32	; (adr r3, 8001c10 <imu_getDOF+0x220>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f002 fc78 	bl	80044e8 <__aeabi_ddiv>
 8001bf8:	a307      	add	r3, pc, #28	; (adr r3, 8001c18 <imu_getDOF+0x228>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f002 fb49 	bl	8004294 <__aeabi_dmul>
 8001c02:	f002 fe09 	bl	8004818 <__aeabi_d2f>
 8001c06:	6220      	str	r0, [r4, #32]
void imu_getDOF(imuDof_S *dof)
{
	imu_getAcc(&dof->acc);
	imu_getMag(&dof->mag);
	imu_getRot(&dof->rot);
}
 8001c08:	b007      	add	sp, #28
 8001c0a:	bd30      	pop	{r4, r5, pc}
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40dfffc0 	.word	0x40dfffc0
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	406c2000 	.word	0x406c2000
 8001c20:	40100000 	.word	0x40100000

08001c24 <init_I2C1>:
 *
 * Initializes I2C1 bus
 *
 ***********************************************************/
void init_I2C1(void)
{
 8001c24:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct;
	I2C_InitTypeDef I2C_InitStruct;

	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001c26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 *
 * Initializes I2C1 bus
 *
 ***********************************************************/
void init_I2C1(void)
{
 8001c2a:	b086      	sub	sp, #24
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001c2c:	4c1e      	ldr	r4, [pc, #120]	; (8001ca8 <init_I2C1+0x84>)
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 8001c2e:	4e1f      	ldr	r6, [pc, #124]	; (8001cac <init_I2C1+0x88>)

	GPIO_InitTypeDef GPIO_InitStruct;
	I2C_InitTypeDef I2C_InitStruct;

	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001c30:	2101      	movs	r1, #1
 8001c32:	f000 fc3b 	bl	80024ac <RCC_APB1PeriphClockCmd>
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001c36:	2002      	movs	r0, #2
 8001c38:	2101      	movs	r1, #1
 8001c3a:	f000 fc13 	bl	8002464 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
 8001c3e:	2501      	movs	r5, #1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
 8001c40:	2302      	movs	r3, #2
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001c42:	4620      	mov	r0, r4
	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
 8001c44:	22c0      	movs	r2, #192	; 0xc0
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001c46:	4669      	mov	r1, sp
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
 8001c48:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
 8001c4c:	f88d 3005 	strb.w	r3, [sp, #5]
	// enable APB1 peripheral clock for I2C1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	// enable clock for SCL and SDA pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // we are going to use PB6 and PB7
 8001c50:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;			// set pins to alternate function
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// set GPIO speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;			// set output to open drain --> the line has to be only pulled low, not driven high
 8001c52:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// enable pull up resistors
 8001c56:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// init GPIOB
 8001c5a:	f000 fa09 	bl	8002070 <GPIO_Init>

	// Connect I2C1 pins to AF
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
 8001c5e:	4620      	mov	r0, r4
 8001c60:	2106      	movs	r1, #6
 8001c62:	2204      	movs	r2, #4
 8001c64:	f000 faa2 	bl	80021ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA
 8001c68:	4620      	mov	r0, r4
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	f000 fa9d 	bl	80021ac <GPIO_PinAFConfig>

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <init_I2C1+0x8c>)
 8001c74:	9302      	str	r3, [sp, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses
 8001c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
 8001c7a:	2300      	movs	r3, #0
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	a902      	add	r1, sp, #8
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
 8001c80:	f64b 74ff 	movw	r4, #49151	; 0xbfff
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
 8001c84:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
 8001c88:	f8ad 3010 	strh.w	r3, [sp, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
 8001c8c:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses
 8001c90:	f8ad 2014 	strh.w	r2, [sp, #20]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA

	// configure I2C1
	I2C_InitStruct.I2C_ClockSpeed = 100000; 		// 100kHz
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;			// I2C mode
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;	// 50% duty cycle --> standard
 8001c94:	f8ad 400e 	strh.w	r4, [sp, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;			// own address, not relevant in master mode
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;		// disable acknowledge when reading (can be changed later on)
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // set address length to 7 bit addresses

	I2C_Init(IMU_I2C_PERIPH, &I2C_InitStruct);				// init I2C1
 8001c98:	f001 fb2c 	bl	80032f4 <I2C_Init>

	// enable I2C1
	I2C_Cmd(IMU_I2C_PERIPH, ENABLE);
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f001 fbaa 	bl	80033f8 <I2C_Cmd>
}
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	000186a0 	.word	0x000186a0

08001cb4 <imu_receiveData>:
 *
 * Routine for receiving data from IMU
 *
 ***********************************************************/
uint8_t imu_receiveData(uint16_t* data, uint32_t timeout)
{
 8001cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001cb8:	4c1e      	ldr	r4, [pc, #120]	; (8001d34 <imu_receiveData+0x80>)
 *
 * Routine for receiving data from IMU
 *
 ***********************************************************/
uint8_t imu_receiveData(uint16_t* data, uint32_t timeout)
{
 8001cba:	4607      	mov	r7, r0
 8001cbc:	460d      	mov	r5, r1

	uint16_t data_L	=	0x00;
	uint16_t data_H = 	0x00;

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);
 8001cbe:	481e      	ldr	r0, [pc, #120]	; (8001d38 <imu_receiveData+0x84>)
 8001cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc4:	f001 fc2c 	bl	8003520 <I2C_NACKPositionConfig>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001cc8:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001cca:	481b      	ldr	r0, [pc, #108]	; (8001d38 <imu_receiveData+0x84>)
 8001ccc:	491b      	ldr	r1, [pc, #108]	; (8001d3c <imu_receiveData+0x88>)
 8001cce:	f001 fcbd 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001cd4:	b940      	cbnz	r0, 8001ce8 <imu_receiveData+0x34>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001cd6:	1b9b      	subs	r3, r3, r6
 8001cd8:	429d      	cmp	r5, r3
 8001cda:	d8f6      	bhi.n	8001cca <imu_receiveData+0x16>
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
	}
	else
	{
		my_printf("\t\tFailure receiving Data_L\r\n");
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <imu_receiveData+0x8c>)
 8001cde:	f7ff fb97 	bl	8001410 <my_printf>
		return FALSE;
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001ce8:	1b9b      	subs	r3, r3, r6
 8001cea:	429d      	cmp	r5, r3
 8001cec:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001d34 <imu_receiveData+0x80>
 8001cf0:	d9f4      	bls.n	8001cdc <imu_receiveData+0x28>

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <imu_receiveData+0x84>)
 8001cf4:	f001 fc44 	bl	8003580 <I2C_ReceiveData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001cf8:	f8d9 6000 	ldr.w	r6, [r9]

	I2C_NACKPositionConfig(IMU_I2C_PERIPH, I2C_NACKPosition_Next);

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_L = I2C_ReceiveData(IMU_I2C_PERIPH);
 8001cfc:	4680      	mov	r8, r0
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <imu_receiveData+0x84>)
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <imu_receiveData+0x88>)
 8001d02:	f001 fca3 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001d06:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001d08:	b940      	cbnz	r0, 8001d1c <imu_receiveData+0x68>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001d0a:	1b9b      	subs	r3, r3, r6
 8001d0c:	429d      	cmp	r5, r3
 8001d0e:	d8f6      	bhi.n	8001cfe <imu_receiveData+0x4a>
	{
		data_H = I2C_ReceiveData(IMU_I2C_PERIPH);
	}
	else
	{
		my_printf("\t\tFailure receiving Data_H\r\n");
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <imu_receiveData+0x90>)
 8001d12:	f7ff fb7d 	bl	8001410 <my_printf>
		return FALSE;
 8001d16:	2000      	movs	r0, #0

	*data = (((uint16_t) data_H) << 8 ) | ((uint16_t) data_L);

	return TRUE;

}
 8001d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001d1c:	1b9e      	subs	r6, r3, r6
 8001d1e:	42b5      	cmp	r5, r6
 8001d20:	d9f6      	bls.n	8001d10 <imu_receiveData+0x5c>
		return FALSE;
	}

	if( waitForI2CEvent(I2C_EVENT_MASTER_BYTE_RECEIVED, timeout) )
	{
		data_H = I2C_ReceiveData(IMU_I2C_PERIPH);
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <imu_receiveData+0x84>)
 8001d24:	f001 fc2c 	bl	8003580 <I2C_ReceiveData>
	{
		my_printf("\t\tFailure receiving Data_H\r\n");
		return FALSE;
	}

	*data = (((uint16_t) data_H) << 8 ) | ((uint16_t) data_L);
 8001d28:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
 8001d2c:	8038      	strh	r0, [r7, #0]

	return TRUE;
 8001d2e:	2001      	movs	r0, #1
 8001d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d34:	200008e0 	.word	0x200008e0
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	00030040 	.word	0x00030040
 8001d40:	08005a34 	.word	0x08005a34
 8001d44:	08005a54 	.word	0x08005a54

08001d48 <imu_sendSP>:
 *
 * sends stop to IMU
 *
 ***********************************************************/
uint8_t imu_sendSP(void)
{
 8001d48:	b508      	push	{r3, lr}
	I2C_GenerateSTOP(IMU_I2C_PERIPH, ENABLE);
 8001d4a:	4803      	ldr	r0, [pc, #12]	; (8001d58 <imu_sendSP+0x10>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	f001 fb6f 	bl	8003430 <I2C_GenerateSTOP>

	return TRUE;
}
 8001d52:	2001      	movs	r0, #1
 8001d54:	bd08      	pop	{r3, pc}
 8001d56:	bf00      	nop
 8001d58:	40005400 	.word	0x40005400

08001d5c <imu_sendDATA>:
 *
 * Sends data to IMU
 *
 ***********************************************************/
uint8_t imu_sendDATA(uint8_t data, uint32_t timeout)
{
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	4603      	mov	r3, r0
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001d60:	4c0b      	ldr	r4, [pc, #44]	; (8001d90 <imu_sendDATA+0x34>)
 * Sends data to IMU
 *
 ***********************************************************/
uint8_t imu_sendDATA(uint8_t data, uint32_t timeout)
{
	I2C_SendData(IMU_I2C_PERIPH, data);
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <imu_sendDATA+0x38>)
 *
 * Sends data to IMU
 *
 ***********************************************************/
uint8_t imu_sendDATA(uint8_t data, uint32_t timeout)
{
 8001d64:	460d      	mov	r5, r1
	I2C_SendData(IMU_I2C_PERIPH, data);
 8001d66:	4619      	mov	r1, r3
 8001d68:	f001 fc08 	bl	800357c <I2C_SendData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001d6c:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <imu_sendDATA+0x38>)
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <imu_sendDATA+0x3c>)
 8001d72:	f001 fc6b 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001d76:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001d78:	b938      	cbnz	r0, 8001d8a <imu_sendDATA+0x2e>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001d7a:	1b98      	subs	r0, r3, r6
 8001d7c:	4285      	cmp	r5, r0
 8001d7e:	d8f6      	bhi.n	8001d6e <imu_sendDATA+0x12>
uint8_t imu_sendDATA(uint8_t data, uint32_t timeout)
{
	I2C_SendData(IMU_I2C_PERIPH, data);

	return waitForI2CEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED, timeout);
}
 8001d80:	4285      	cmp	r5, r0
 8001d82:	bf94      	ite	ls
 8001d84:	2000      	movls	r0, #0
 8001d86:	2001      	movhi	r0, #1
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
 8001d8a:	1b98      	subs	r0, r3, r6
 8001d8c:	e7f8      	b.n	8001d80 <imu_sendDATA+0x24>
 8001d8e:	bf00      	nop
 8001d90:	200008e0 	.word	0x200008e0
 8001d94:	40005400 	.word	0x40005400
 8001d98:	00070084 	.word	0x00070084

08001d9c <imu_sendSUB>:
 ***********************************************************/
uint8_t imu_sendSUB(uint8_t reg, uint32_t timeout, uint8_t autoNext)
{
	uint8_t regOut = 0x00;

	if(TRUE == autoNext)
 8001d9c:	2a01      	cmp	r2, #1
 *
 * sends a sub address to IMU
 *
 ***********************************************************/
uint8_t imu_sendSUB(uint8_t reg, uint32_t timeout, uint8_t autoNext)
{
 8001d9e:	b570      	push	{r4, r5, r6, lr}
 8001da0:	4603      	mov	r3, r0
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001da2:	4c0d      	ldr	r4, [pc, #52]	; (8001dd8 <imu_sendSUB+0x3c>)
{
	uint8_t regOut = 0x00;

	if(TRUE == autoNext)
	{
		regOut = reg | 0x80;
 8001da4:	bf08      	it	eq
 8001da6:	f040 0380 	orreq.w	r3, r0, #128	; 0x80
 *
 * sends a sub address to IMU
 *
 ***********************************************************/
uint8_t imu_sendSUB(uint8_t reg, uint32_t timeout, uint8_t autoNext)
{
 8001daa:	460d      	mov	r5, r1
	else
	{
		regOut = reg;
	}

	I2C_SendData(IMU_I2C_PERIPH, regOut);
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <imu_sendSUB+0x40>)
 8001dae:	4619      	mov	r1, r3
 8001db0:	f001 fbe4 	bl	800357c <I2C_SendData>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001db4:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <imu_sendSUB+0x40>)
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <imu_sendSUB+0x44>)
 8001dba:	f001 fc47 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001dbe:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001dc0:	b938      	cbnz	r0, 8001dd2 <imu_sendSUB+0x36>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001dc2:	1b98      	subs	r0, r3, r6
 8001dc4:	4285      	cmp	r5, r0
 8001dc6:	d8f6      	bhi.n	8001db6 <imu_sendSUB+0x1a>
	}

	I2C_SendData(IMU_I2C_PERIPH, regOut);

	return waitForI2CEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED, timeout);
}
 8001dc8:	4285      	cmp	r5, r0
 8001dca:	bf94      	ite	ls
 8001dcc:	2000      	movls	r0, #0
 8001dce:	2001      	movhi	r0, #1
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	1b98      	subs	r0, r3, r6
 8001dd4:	e7f8      	b.n	8001dc8 <imu_sendSUB+0x2c>
 8001dd6:	bf00      	nop
 8001dd8:	200008e0 	.word	0x200008e0
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00070084 	.word	0x00070084

08001de4 <imu_sendSAD_R>:
 *
 * Send address and Receive command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_R(uint8_t address, uint32_t timeout)
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	4603      	mov	r3, r0
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001de8:	4c0b      	ldr	r4, [pc, #44]	; (8001e18 <imu_sendSAD_R+0x34>)
 *
 ***********************************************************/
uint8_t imu_sendSAD_R(uint8_t address, uint32_t timeout)
{

	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Receiver);
 8001dea:	480c      	ldr	r0, [pc, #48]	; (8001e1c <imu_sendSAD_R+0x38>)
 *
 * Send address and Receive command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_R(uint8_t address, uint32_t timeout)
{
 8001dec:	460d      	mov	r5, r1

	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Receiver);
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	f001 fb2b 	bl	800344c <I2C_Send7bitAddress>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001df6:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001df8:	4808      	ldr	r0, [pc, #32]	; (8001e1c <imu_sendSAD_R+0x38>)
 8001dfa:	4909      	ldr	r1, [pc, #36]	; (8001e20 <imu_sendSAD_R+0x3c>)
 8001dfc:	f001 fc26 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e00:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001e02:	b938      	cbnz	r0, 8001e14 <imu_sendSAD_R+0x30>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e04:	1b98      	subs	r0, r3, r6
 8001e06:	4285      	cmp	r5, r0
 8001e08:	d8f6      	bhi.n	8001df8 <imu_sendSAD_R+0x14>
{

	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Receiver);

	return waitForI2CEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED, timeout);
}
 8001e0a:	4285      	cmp	r5, r0
 8001e0c:	bf94      	ite	ls
 8001e0e:	2000      	movls	r0, #0
 8001e10:	2001      	movhi	r0, #1
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	1b98      	subs	r0, r3, r6
 8001e16:	e7f8      	b.n	8001e0a <imu_sendSAD_R+0x26>
 8001e18:	200008e0 	.word	0x200008e0
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	00030002 	.word	0x00030002

08001e24 <imu_sendSAD_W>:
 *
 * Sends address and write command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4603      	mov	r3, r0
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001e28:	4c0b      	ldr	r4, [pc, #44]	; (8001e58 <imu_sendSAD_W+0x34>)
 * Sends address and write command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Transmitter);
 8001e2a:	480c      	ldr	r0, [pc, #48]	; (8001e5c <imu_sendSAD_W+0x38>)
 *
 * Sends address and write command to IMU
 *
 ***********************************************************/
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
 8001e2c:	460d      	mov	r5, r1
	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Transmitter);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	f001 fb0b 	bl	800344c <I2C_Send7bitAddress>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001e36:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001e38:	4808      	ldr	r0, [pc, #32]	; (8001e5c <imu_sendSAD_W+0x38>)
 8001e3a:	4909      	ldr	r1, [pc, #36]	; (8001e60 <imu_sendSAD_W+0x3c>)
 8001e3c:	f001 fc06 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e40:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001e42:	b938      	cbnz	r0, 8001e54 <imu_sendSAD_W+0x30>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e44:	1b98      	subs	r0, r3, r6
 8001e46:	4285      	cmp	r5, r0
 8001e48:	d8f6      	bhi.n	8001e38 <imu_sendSAD_W+0x14>
uint8_t imu_sendSAD_W(uint8_t address, uint32_t timeout)
{
	I2C_Send7bitAddress(IMU_I2C_PERIPH, address, I2C_Direction_Transmitter);

	return waitForI2CEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED, timeout);
}
 8001e4a:	4285      	cmp	r5, r0
 8001e4c:	bf94      	ite	ls
 8001e4e:	2000      	movls	r0, #0
 8001e50:	2001      	movhi	r0, #1
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
 8001e54:	1b98      	subs	r0, r3, r6
 8001e56:	e7f8      	b.n	8001e4a <imu_sendSAD_W+0x26>
 8001e58:	200008e0 	.word	0x200008e0
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	00070082 	.word	0x00070082

08001e64 <imu_sendST>:
 *
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
 8001e64:	b570      	push	{r4, r5, r6, lr}
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001e66:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <imu_sendST+0x30>)
 *
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
 8001e68:	4605      	mov	r5, r0
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <imu_sendST+0x34>)
 8001e6e:	f001 fad1 	bl	8003414 <I2C_GenerateSTART>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001e72:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <imu_sendST+0x34>)
 8001e76:	4909      	ldr	r1, [pc, #36]	; (8001e9c <imu_sendST+0x38>)
 8001e78:	f001 fbe8 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001e7e:	b938      	cbnz	r0, 8001e90 <imu_sendST+0x2c>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001e80:	1b98      	subs	r0, r3, r6
 8001e82:	4285      	cmp	r5, r0
 8001e84:	d8f6      	bhi.n	8001e74 <imu_sendST+0x10>
uint8_t imu_sendST(uint32_t timeout)
{
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);

	return waitForI2CEvent(I2C_EVENT_MASTER_MODE_SELECT, timeout);
}
 8001e86:	4285      	cmp	r5, r0
 8001e88:	bf94      	ite	ls
 8001e8a:	2000      	movls	r0, #0
 8001e8c:	2001      	movhi	r0, #1
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	1b98      	subs	r0, r3, r6
 8001e92:	e7f8      	b.n	8001e86 <imu_sendST+0x22>
 8001e94:	200008e0 	.word	0x200008e0
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	00030001 	.word	0x00030001

08001ea0 <imu_sendSR>:
 *
 * Sends a Start resend
 *
 ***********************************************************/
uint8_t imu_sendSR(uint32_t timeout)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001ea2:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <imu_sendSR+0x30>)
 *
 * Sends a Start resend
 *
 ***********************************************************/
uint8_t imu_sendSR(uint32_t timeout)
{
 8001ea4:	4605      	mov	r5, r0
 * Sends Start to the IMU
 *
 ***********************************************************/
uint8_t imu_sendST(uint32_t timeout)
{
	I2C_GenerateSTART(IMU_I2C_PERIPH, ENABLE);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <imu_sendSR+0x34>)
 8001eaa:	f001 fab3 	bl	8003414 <I2C_GenerateSTART>
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;
 8001eae:	6826      	ldr	r6, [r4, #0]

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <imu_sendSR+0x34>)
 8001eb2:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <imu_sendSR+0x38>)
 8001eb4:	f001 fbca 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001eba:	b938      	cbnz	r0, 8001ecc <imu_sendSR+0x2c>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001ebc:	1b98      	subs	r0, r3, r6
 8001ebe:	4285      	cmp	r5, r0
 8001ec0:	d8f6      	bhi.n	8001eb0 <imu_sendSR+0x10>
 *
 ***********************************************************/
uint8_t imu_sendSR(uint32_t timeout)
{
	return imu_sendST(timeout);
}
 8001ec2:	4285      	cmp	r5, r0
 8001ec4:	bf94      	ite	ls
 8001ec6:	2000      	movls	r0, #0
 8001ec8:	2001      	movhi	r0, #1
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	1b98      	subs	r0, r3, r6
 8001ece:	e7f8      	b.n	8001ec2 <imu_sendSR+0x22>
 8001ed0:	200008e0 	.word	0x200008e0
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	00030001 	.word	0x00030001

08001edc <waitForI2CEvent>:
 *
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t startTime	=	g_ticks;
 8001ede:	4c0a      	ldr	r4, [pc, #40]	; (8001f08 <waitForI2CEvent+0x2c>)
 8001ee0:	6826      	ldr	r6, [r4, #0]
 *
 * Waits for I2C state, returns whether a timeout occured
 *
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
 8001ee2:	4607      	mov	r7, r0
 8001ee4:	460d      	mov	r5, r1
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <waitForI2CEvent+0x30>)
 8001ee8:	4639      	mov	r1, r7
 8001eea:	f001 fbaf 	bl	800364c <I2C_CheckEvent>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001eee:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CEvent(uint32_t state, uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));
 8001ef0:	b938      	cbnz	r0, 8001f02 <waitForI2CEvent+0x26>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001ef2:	1b98      	subs	r0, r3, r6
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d8f6      	bhi.n	8001ee6 <waitForI2CEvent+0xa>
	uint32_t startTime	=	g_ticks;

	while(!I2C_CheckEvent(IMU_I2C_PERIPH, state) && (!isTimeout(startTime, timeout)));

	return isTimeout(startTime, timeout) ? FALSE : TRUE;
}
 8001ef8:	4285      	cmp	r5, r0
 8001efa:	bf94      	ite	ls
 8001efc:	2000      	movls	r0, #0
 8001efe:	2001      	movhi	r0, #1
 8001f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f02:	1b98      	subs	r0, r3, r6
 8001f04:	e7f8      	b.n	8001ef8 <waitForI2CEvent+0x1c>
 8001f06:	bf00      	nop
 8001f08:	200008e0 	.word	0x200008e0
 8001f0c:	40005400 	.word	0x40005400

08001f10 <waitForI2CAvailable>:
 * Waits for I2C bus to become available, returns whether
 * a timeout occured.
 *
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
 8001f10:	b570      	push	{r4, r5, r6, lr}
	uint32_t startTime	=	g_ticks;
 8001f12:	4c0a      	ldr	r4, [pc, #40]	; (8001f3c <waitForI2CAvailable+0x2c>)
 8001f14:	6826      	ldr	r6, [r4, #0]
 * Waits for I2C bus to become available, returns whether
 * a timeout occured.
 *
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
 8001f16:	4605      	mov	r5, r0
	uint32_t startTime	=	g_ticks;

	while(I2C_GetFlagStatus(IMU_I2C_PERIPH, I2C_FLAG_BUSY)  && (!isTimeout(startTime, timeout)));
 8001f18:	4809      	ldr	r0, [pc, #36]	; (8001f40 <waitForI2CAvailable+0x30>)
 8001f1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001f1e:	f001 fba9 	bl	8003674 <I2C_GetFlagStatus>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001f22:	6823      	ldr	r3, [r4, #0]
 ***********************************************************/
uint8_t waitForI2CAvailable(uint32_t timeout)
{
	uint32_t startTime	=	g_ticks;

	while(I2C_GetFlagStatus(IMU_I2C_PERIPH, I2C_FLAG_BUSY)  && (!isTimeout(startTime, timeout)));
 8001f24:	b138      	cbz	r0, 8001f36 <waitForI2CAvailable+0x26>
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001f26:	1b98      	subs	r0, r3, r6
 8001f28:	4285      	cmp	r5, r0
 8001f2a:	d8f5      	bhi.n	8001f18 <waitForI2CAvailable+0x8>
	uint32_t startTime	=	g_ticks;

	while(I2C_GetFlagStatus(IMU_I2C_PERIPH, I2C_FLAG_BUSY)  && (!isTimeout(startTime, timeout)));

	return isTimeout(startTime, timeout) ? FALSE : TRUE;
}
 8001f2c:	4285      	cmp	r5, r0
 8001f2e:	bf94      	ite	ls
 8001f30:	2000      	movls	r0, #0
 8001f32:	2001      	movhi	r0, #1
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
 8001f36:	1b98      	subs	r0, r3, r6
 8001f38:	e7f8      	b.n	8001f2c <waitForI2CAvailable+0x1c>
 8001f3a:	bf00      	nop
 8001f3c:	200008e0 	.word	0x200008e0
 8001f40:	40005400 	.word	0x40005400

08001f44 <isTimeout>:
 * Checks for timeout
 *
 ***********************************************************/
uint8_t isTimeout(uint32_t startTime, uint32_t timeout_ms)
{
	if((g_ticks - startTime) >= timeout_ms)
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <isTimeout+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1a18      	subs	r0, r3, r0
	}
	else
	{
		return FALSE;
	}
}
 8001f4a:	4288      	cmp	r0, r1
 8001f4c:	bf34      	ite	cc
 8001f4e:	2000      	movcc	r0, #0
 8001f50:	2001      	movcs	r0, #1
 8001f52:	4770      	bx	lr
 8001f54:	200008e0 	.word	0x200008e0

08001f58 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001f58:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <GPIO_DeInit+0xf4>)
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d024      	beq.n	8001faa <GPIO_DeInit+0x52>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <GPIO_DeInit+0xf8>)
 8001f62:	4298      	cmp	r0, r3
 8001f64:	d02b      	beq.n	8001fbe <GPIO_DeInit+0x66>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8001f66:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <GPIO_DeInit+0xfc>)
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d032      	beq.n	8001fd2 <GPIO_DeInit+0x7a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <GPIO_DeInit+0x100>)
 8001f6e:	4298      	cmp	r0, r3
 8001f70:	d039      	beq.n	8001fe6 <GPIO_DeInit+0x8e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <GPIO_DeInit+0x104>)
 8001f74:	4298      	cmp	r0, r3
 8001f76:	d040      	beq.n	8001ffa <GPIO_DeInit+0xa2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <GPIO_DeInit+0x108>)
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d047      	beq.n	800200e <GPIO_DeInit+0xb6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <GPIO_DeInit+0x10c>)
 8001f80:	4298      	cmp	r0, r3
 8001f82:	d04e      	beq.n	8002022 <GPIO_DeInit+0xca>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8001f84:	4b38      	ldr	r3, [pc, #224]	; (8002068 <GPIO_DeInit+0x110>)
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d055      	beq.n	8002036 <GPIO_DeInit+0xde>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <GPIO_DeInit+0x114>)
 8001f8c:	4298      	cmp	r0, r3
 8001f8e:	d000      	beq.n	8001f92 <GPIO_DeInit+0x3a>
 8001f90:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001f92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f96:	2101      	movs	r1, #1
 8001f98:	f000 faa0 	bl	80024dc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001f9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fa0:	2100      	movs	r1, #0
    }
  }
}
 8001fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001fa6:	f000 ba99 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001faa:	2001      	movs	r0, #1
 8001fac:	4601      	mov	r1, r0
 8001fae:	f000 fa95 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001fba:	f000 ba8f 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f000 fa8b 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001fce:	f000 ba85 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	f000 fa81 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001fda:	2004      	movs	r0, #4
 8001fdc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001fe2:	f000 ba7b 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001fe6:	2008      	movs	r0, #8
 8001fe8:	2101      	movs	r1, #1
 8001fea:	f000 fa77 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001fee:	2008      	movs	r0, #8
 8001ff0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001ff6:	f000 ba71 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001ffa:	2010      	movs	r0, #16
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	f000 fa6d 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8002002:	2010      	movs	r0, #16
 8002004:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800200a:	f000 ba67 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800200e:	2020      	movs	r0, #32
 8002010:	2101      	movs	r1, #1
 8002012:	f000 fa63 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8002016:	2020      	movs	r0, #32
 8002018:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800201a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800201e:	f000 ba5d 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002022:	2040      	movs	r0, #64	; 0x40
 8002024:	2101      	movs	r1, #1
 8002026:	f000 fa59 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800202a:	2040      	movs	r0, #64	; 0x40
 800202c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800202e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8002032:	f000 ba53 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8002036:	2080      	movs	r0, #128	; 0x80
 8002038:	2101      	movs	r1, #1
 800203a:	f000 fa4f 	bl	80024dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800203e:	2080      	movs	r0, #128	; 0x80
 8002040:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8002046:	f000 ba49 	b.w	80024dc <RCC_AHB1PeriphResetCmd>
 800204a:	bf00      	nop
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40022000 	.word	0x40022000

08002070 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002070:	2200      	movs	r2, #0
 8002072:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002076:	4613      	mov	r3, r2
 8002078:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 800207a:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800207c:	f04f 0803 	mov.w	r8, #3
 8002080:	e004      	b.n	800208c <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002082:	3301      	adds	r3, #1
 8002084:	2b10      	cmp	r3, #16
 8002086:	f102 0202 	add.w	r2, r2, #2
 800208a:	d02c      	beq.n	80020e6 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800208c:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002090:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8002094:	42a5      	cmp	r5, r4
 8002096:	d1f4      	bne.n	8002082 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002098:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800209c:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80020a0:	fa08 f402 	lsl.w	r4, r8, r2
 80020a4:	43e4      	mvns	r4, r4
 80020a6:	ea04 0909 	and.w	r9, r4, r9
 80020aa:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80020ae:	f8d0 9000 	ldr.w	r9, [r0]
 80020b2:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80020b6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80020ba:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80020be:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80020c2:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80020c6:	d911      	bls.n	80020ec <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80020c8:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80020ca:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80020ce:	402c      	ands	r4, r5
 80020d0:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80020d2:	68c5      	ldr	r5, [r0, #12]
 80020d4:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020d8:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80020da:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020dc:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80020de:	60c4      	str	r4, [r0, #12]
 80020e0:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020e4:	d1d2      	bne.n	800208c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80020e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80020ea:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80020ec:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80020f0:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80020f4:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80020f8:	ea04 0a0a 	and.w	sl, r4, sl
 80020fc:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002100:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002104:	fa09 f902 	lsl.w	r9, r9, r2
 8002108:	ea49 090a 	orr.w	r9, r9, sl
 800210c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002110:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8002114:	ea29 0505 	bic.w	r5, r9, r5
 8002118:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800211a:	6845      	ldr	r5, [r0, #4]
 800211c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002120:	fa1f fc8c 	uxth.w	ip, ip
 8002124:	ea4c 0505 	orr.w	r5, ip, r5
 8002128:	6045      	str	r5, [r0, #4]
 800212a:	e7cd      	b.n	80020c8 <GPIO_Init+0x58>

0800212c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800212c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002132:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002134:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002136:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002138:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800213a:	71c3      	strb	r3, [r0, #7]
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8002142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002146:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8002148:	9b01      	ldr	r3, [sp, #4]
 800214a:	430b      	orrs	r3, r1
 800214c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800214e:	9b01      	ldr	r3, [sp, #4]
 8002150:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002152:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002154:	9b01      	ldr	r3, [sp, #4]
 8002156:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002158:	69c3      	ldr	r3, [r0, #28]
 800215a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800215c:	69c3      	ldr	r3, [r0, #28]
 800215e:	9301      	str	r3, [sp, #4]
}
 8002160:	b002      	add	sp, #8
 8002162:	4770      	bx	lr

08002164 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002164:	6903      	ldr	r3, [r0, #16]
 8002166:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8002168:	bf0c      	ite	eq
 800216a:	2000      	moveq	r0, #0
 800216c:	2001      	movne	r0, #1
 800216e:	4770      	bx	lr

08002170 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8002170:	6900      	ldr	r0, [r0, #16]
}
 8002172:	b280      	uxth	r0, r0
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002178:	6943      	ldr	r3, [r0, #20]
 800217a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800217c:	bf0c      	ite	eq
 800217e:	2000      	moveq	r0, #0
 8002180:	2001      	movne	r0, #1
 8002182:	4770      	bx	lr

08002184 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8002184:	6940      	ldr	r0, [r0, #20]
}
 8002186:	b280      	uxth	r0, r0
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800218c:	8301      	strh	r1, [r0, #24]
 800218e:	4770      	bx	lr

08002190 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002190:	8341      	strh	r1, [r0, #26]
 8002192:	4770      	bx	lr

08002194 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002194:	b90a      	cbnz	r2, 800219a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002196:	8341      	strh	r1, [r0, #26]
 8002198:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 800219a:	8301      	strh	r1, [r0, #24]
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80021a0:	6141      	str	r1, [r0, #20]
 80021a2:	4770      	bx	lr

080021a4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80021a4:	6943      	ldr	r3, [r0, #20]
 80021a6:	4059      	eors	r1, r3
 80021a8:	6141      	str	r1, [r0, #20]
 80021aa:	4770      	bx	lr

080021ac <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80021ac:	08cb      	lsrs	r3, r1, #3
 80021ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021b2:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80021b6:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021b8:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021ba:	6a04      	ldr	r4, [r0, #32]
 80021bc:	230f      	movs	r3, #15
 80021be:	408b      	lsls	r3, r1
 80021c0:	ea24 0303 	bic.w	r3, r4, r3
 80021c4:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80021c6:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80021c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021cc:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80021ce:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80021d0:	6203      	str	r3, [r0, #32]
}
 80021d2:	4770      	bx	lr

080021d4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <RCC_DeInit+0x2c>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021d6:	480b      	ldr	r0, [pc, #44]	; (8002204 <RCC_DeInit+0x30>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021da:	2100      	movs	r1, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021e2:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021f0:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021fa:	60d9      	str	r1, [r3, #12]
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	24003010 	.word	0x24003010

08002208 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <RCC_HSEConfig+0xc>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800220e:	7018      	strb	r0, [r3, #0]
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023802 	.word	0x40023802

08002218 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8002218:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 800221a:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800221e:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8002220:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002222:	039b      	lsls	r3, r3, #14
 8002224:	d40c      	bmi.n	8002240 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800222c:	9b01      	ldr	r3, [sp, #4]
 800222e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002232:	d1f5      	bne.n	8002220 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <RCC_WaitForHSEStartUp+0x34>)
 8002236:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8002238:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 800223c:	b002      	add	sp, #8
 800223e:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8002240:	9b01      	ldr	r3, [sp, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8002246:	9b01      	ldr	r3, [sp, #4]
 8002248:	e7f4      	b.n	8002234 <RCC_WaitForHSEStartUp+0x1c>
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <RCC_AdjustHSICalibrationValue+0x10>)
 8002252:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8002254:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8002258:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800225c:	6018      	str	r0, [r3, #0]
 800225e:	4770      	bx	lr
 8002260:	40023800 	.word	0x40023800

08002264 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <RCC_HSICmd+0x8>)
 8002266:	6018      	str	r0, [r3, #0]
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	42470000 	.word	0x42470000

08002270 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <RCC_LSEConfig+0x1c>)
 8002272:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8002274:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002276:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002278:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800227a:	d005      	beq.n	8002288 <RCC_LSEConfig+0x18>
 800227c:	2804      	cmp	r0, #4
 800227e:	d102      	bne.n	8002286 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8002280:	2205      	movs	r2, #5
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	4770      	bx	lr
 8002286:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8002288:	7018      	strb	r0, [r3, #0]
      break;
 800228a:	4770      	bx	lr
 800228c:	40023870 	.word	0x40023870

08002290 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002290:	4b01      	ldr	r3, [pc, #4]	; (8002298 <RCC_LSICmd+0x8>)
 8002292:	6018      	str	r0, [r3, #0]
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	42470e80 	.word	0x42470e80

0800229c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800229c:	b430      	push	{r4, r5}
 800229e:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80022a0:	4d06      	ldr	r5, [pc, #24]	; (80022bc <RCC_PLLConfig+0x20>)
 80022a2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	4301      	orrs	r1, r0
 80022aa:	3b01      	subs	r3, #1
 80022ac:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80022b0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80022b4:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 80022b6:	bc30      	pop	{r4, r5}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80022c0:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <RCC_PLLCmd+0x8>)
 80022c2:	6018      	str	r0, [r3, #0]
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	42470060 	.word	0x42470060

080022cc <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80022cc:	0709      	lsls	r1, r1, #28
 80022ce:	4b03      	ldr	r3, [pc, #12]	; (80022dc <RCC_PLLI2SConfig+0x10>)
 80022d0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80022d4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <RCC_PLLI2SCmd+0x8>)
 80022e2:	6018      	str	r0, [r3, #0]
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	42470068 	.word	0x42470068

080022ec <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80022ec:	4b01      	ldr	r3, [pc, #4]	; (80022f4 <RCC_ClockSecuritySystemCmd+0x8>)
 80022ee:	6018      	str	r0, [r3, #0]
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	4247004c 	.word	0x4247004c

080022f8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <RCC_MCO1Config+0x10>)
 80022fa:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80022fc:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8002300:	4311      	orrs	r1, r2
 8002302:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8002304:	6098      	str	r0, [r3, #8]
 8002306:	4770      	bx	lr
 8002308:	40023800 	.word	0x40023800

0800230c <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <RCC_MCO2Config+0x10>)
 800230e:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8002310:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8002314:	4311      	orrs	r1, r2
 8002316:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8002318:	6098      	str	r0, [r3, #8]
 800231a:	4770      	bx	lr
 800231c:	40023800 	.word	0x40023800

08002320 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <RCC_SYSCLKConfig+0x10>)
 8002322:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8002324:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002328:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800232a:	6098      	str	r0, [r3, #8]
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <RCC_GetSYSCLKSource+0xc>)
 8002336:	6898      	ldr	r0, [r3, #8]
}
 8002338:	f000 000c 	and.w	r0, r0, #12
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <RCC_HCLKConfig+0x10>)
 8002346:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8002348:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800234c:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800234e:	6098      	str	r0, [r3, #8]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <RCC_PCLK1Config+0x10>)
 800235a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800235c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002360:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002362:	6098      	str	r0, [r3, #8]
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800

0800236c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <RCC_PCLK2Config+0x10>)
 800236e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8002370:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002374:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002378:	6098      	str	r0, [r3, #8]
 800237a:	4770      	bx	lr
 800237c:	40023800 	.word	0x40023800

08002380 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <RCC_GetClocksFreq+0x80>)
 8002382:	6893      	ldr	r3, [r2, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8002388:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800238a:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800238c:	d01b      	beq.n	80023c6 <RCC_GetClocksFreq+0x46>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d01c      	beq.n	80023cc <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <RCC_GetClocksFreq+0x84>)
 8002394:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002396:	491a      	ldr	r1, [pc, #104]	; (8002400 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800239a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 800239c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 80023a0:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80023a2:	40e3      	lsrs	r3, r4
 80023a4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80023a6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80023a8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80023ac:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80023ae:	fa23 f404 	lsr.w	r4, r3, r4
 80023b2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80023b4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 80023b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 80023ba:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80023be:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80023c0:	40d3      	lsrs	r3, r2
 80023c2:	60c3      	str	r3, [r0, #12]
}
 80023c4:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <RCC_GetClocksFreq+0x8c>)
 80023c8:	6003      	str	r3, [r0, #0]
      break;
 80023ca:	e7e4      	b.n	8002396 <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80023cc:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ce:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023d0:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80023d2:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023d4:	bf4c      	ite	mi
 80023d6:	4b0d      	ldrmi	r3, [pc, #52]	; (800240c <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80023d8:	4b0a      	ldrpl	r3, [pc, #40]	; (8002404 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80023de:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <RCC_GetClocksFreq+0x80>)
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80023f2:	3201      	adds	r2, #1
 80023f4:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80023f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fa:	6003      	str	r3, [r0, #0]
      break;
 80023fc:	e7cb      	b.n	8002396 <RCC_GetClocksFreq+0x16>
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	2000001c 	.word	0x2000001c
 800240c:	007a1200 	.word	0x007a1200

08002410 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8002410:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8002414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002418:	d109      	bne.n	800242e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <RCC_RTCCLKConfig+0x2c>)
 800241c:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800241e:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8002422:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8002426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242a:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800242c:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <RCC_RTCCLKConfig+0x2c>)
 8002430:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002432:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002436:	4310      	orrs	r0, r2
 8002438:	6718      	str	r0, [r3, #112]	; 0x70
 800243a:	4770      	bx	lr
 800243c:	40023800 	.word	0x40023800

08002440 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8002440:	4b01      	ldr	r3, [pc, #4]	; (8002448 <RCC_RTCCLKCmd+0x8>)
 8002442:	6018      	str	r0, [r3, #0]
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	42470e3c 	.word	0x42470e3c

0800244c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <RCC_BackupResetCmd+0x8>)
 800244e:	6018      	str	r0, [r3, #0]
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	42470e40 	.word	0x42470e40

08002458 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <RCC_I2SCLKConfig+0x8>)
 800245a:	6018      	str	r0, [r3, #0]
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	4247015c 	.word	0x4247015c

08002464 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <RCC_AHB1PeriphClockCmd+0x14>)
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002468:	b919      	cbnz	r1, 8002472 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800246a:	ea22 0000 	bic.w	r0, r2, r0
 800246e:	6318      	str	r0, [r3, #48]	; 0x30
 8002470:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002472:	4310      	orrs	r0, r2
 8002474:	6318      	str	r0, [r3, #48]	; 0x30
 8002476:	4770      	bx	lr
 8002478:	40023800 	.word	0x40023800

0800247c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <RCC_AHB2PeriphClockCmd+0x14>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002480:	b919      	cbnz	r1, 800248a <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8002482:	ea22 0000 	bic.w	r0, r2, r0
 8002486:	6358      	str	r0, [r3, #52]	; 0x34
 8002488:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800248a:	4310      	orrs	r0, r2
 800248c:	6358      	str	r0, [r3, #52]	; 0x34
 800248e:	4770      	bx	lr
 8002490:	40023800 	.word	0x40023800

08002494 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <RCC_AHB3PeriphClockCmd+0x14>)
 8002496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002498:	b919      	cbnz	r1, 80024a2 <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800249a:	ea22 0000 	bic.w	r0, r2, r0
 800249e:	6398      	str	r0, [r3, #56]	; 0x38
 80024a0:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80024a2:	4310      	orrs	r0, r2
 80024a4:	6398      	str	r0, [r3, #56]	; 0x38
 80024a6:	4770      	bx	lr
 80024a8:	40023800 	.word	0x40023800

080024ac <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <RCC_APB1PeriphClockCmd+0x14>)
 80024ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80024b0:	b919      	cbnz	r1, 80024ba <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80024b2:	ea22 0000 	bic.w	r0, r2, r0
 80024b6:	6418      	str	r0, [r3, #64]	; 0x40
 80024b8:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80024ba:	4310      	orrs	r0, r2
 80024bc:	6418      	str	r0, [r3, #64]	; 0x40
 80024be:	4770      	bx	lr
 80024c0:	40023800 	.word	0x40023800

080024c4 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <RCC_APB2PeriphClockCmd+0x14>)
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80024c8:	b919      	cbnz	r1, 80024d2 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80024ca:	ea22 0000 	bic.w	r0, r2, r0
 80024ce:	6458      	str	r0, [r3, #68]	; 0x44
 80024d0:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80024d2:	4310      	orrs	r0, r2
 80024d4:	6458      	str	r0, [r3, #68]	; 0x44
 80024d6:	4770      	bx	lr
 80024d8:	40023800 	.word	0x40023800

080024dc <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <RCC_AHB1PeriphResetCmd+0x14>)
 80024de:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80024e0:	b919      	cbnz	r1, 80024ea <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80024e2:	ea22 0000 	bic.w	r0, r2, r0
 80024e6:	6118      	str	r0, [r3, #16]
 80024e8:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80024ea:	4310      	orrs	r0, r2
 80024ec:	6118      	str	r0, [r3, #16]
 80024ee:	4770      	bx	lr
 80024f0:	40023800 	.word	0x40023800

080024f4 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <RCC_AHB2PeriphResetCmd+0x14>)
 80024f6:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80024f8:	b919      	cbnz	r1, 8002502 <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80024fa:	ea22 0000 	bic.w	r0, r2, r0
 80024fe:	6158      	str	r0, [r3, #20]
 8002500:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8002502:	4310      	orrs	r0, r2
 8002504:	6158      	str	r0, [r3, #20]
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800

0800250c <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <RCC_AHB3PeriphResetCmd+0x14>)
 800250e:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002510:	b919      	cbnz	r1, 800251a <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8002512:	ea22 0000 	bic.w	r0, r2, r0
 8002516:	6198      	str	r0, [r3, #24]
 8002518:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800251a:	4310      	orrs	r0, r2
 800251c:	6198      	str	r0, [r3, #24]
 800251e:	4770      	bx	lr
 8002520:	40023800 	.word	0x40023800

08002524 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <RCC_APB1PeriphResetCmd+0x14>)
 8002526:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002528:	b919      	cbnz	r1, 8002532 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800252a:	ea22 0000 	bic.w	r0, r2, r0
 800252e:	6218      	str	r0, [r3, #32]
 8002530:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002532:	4310      	orrs	r0, r2
 8002534:	6218      	str	r0, [r3, #32]
 8002536:	4770      	bx	lr
 8002538:	40023800 	.word	0x40023800

0800253c <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <RCC_APB2PeriphResetCmd+0x14>)
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002540:	b919      	cbnz	r1, 800254a <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002542:	ea22 0000 	bic.w	r0, r2, r0
 8002546:	6258      	str	r0, [r3, #36]	; 0x24
 8002548:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800254a:	4310      	orrs	r0, r2
 800254c:	6258      	str	r0, [r3, #36]	; 0x24
 800254e:	4770      	bx	lr
 8002550:	40023800 	.word	0x40023800

08002554 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8002556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002558:	b919      	cbnz	r1, 8002562 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800255a:	ea22 0000 	bic.w	r0, r2, r0
 800255e:	6518      	str	r0, [r3, #80]	; 0x50
 8002560:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8002562:	4310      	orrs	r0, r2
 8002564:	6518      	str	r0, [r3, #80]	; 0x50
 8002566:	4770      	bx	lr
 8002568:	40023800 	.word	0x40023800

0800256c <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 800256e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002570:	b919      	cbnz	r1, 800257a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8002572:	ea22 0000 	bic.w	r0, r2, r0
 8002576:	6558      	str	r0, [r3, #84]	; 0x54
 8002578:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800257a:	4310      	orrs	r0, r2
 800257c:	6558      	str	r0, [r3, #84]	; 0x54
 800257e:	4770      	bx	lr
 8002580:	40023800 	.word	0x40023800

08002584 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8002586:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002588:	b919      	cbnz	r1, 8002592 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800258a:	ea22 0000 	bic.w	r0, r2, r0
 800258e:	6598      	str	r0, [r3, #88]	; 0x58
 8002590:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002592:	4310      	orrs	r0, r2
 8002594:	6598      	str	r0, [r3, #88]	; 0x58
 8002596:	4770      	bx	lr
 8002598:	40023800 	.word	0x40023800

0800259c <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 800259e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025a0:	b919      	cbnz	r1, 80025aa <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80025a2:	ea22 0000 	bic.w	r0, r2, r0
 80025a6:	6618      	str	r0, [r3, #96]	; 0x60
 80025a8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80025aa:	4310      	orrs	r0, r2
 80025ac:	6618      	str	r0, [r3, #96]	; 0x60
 80025ae:	4770      	bx	lr
 80025b0:	40023800 	.word	0x40023800

080025b4 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 80025b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b8:	b919      	cbnz	r1, 80025c2 <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80025ba:	ea22 0000 	bic.w	r0, r2, r0
 80025be:	6658      	str	r0, [r3, #100]	; 0x64
 80025c0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80025c2:	4310      	orrs	r0, r2
 80025c4:	6658      	str	r0, [r3, #100]	; 0x64
 80025c6:	4770      	bx	lr
 80025c8:	40023800 	.word	0x40023800

080025cc <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <RCC_ITConfig+0x14>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025d0:	b919      	cbnz	r1, 80025da <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80025d2:	ea22 0000 	bic.w	r0, r2, r0
 80025d6:	7018      	strb	r0, [r3, #0]
 80025d8:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80025da:	4310      	orrs	r0, r2
 80025dc:	7018      	strb	r0, [r3, #0]
 80025de:	4770      	bx	lr
 80025e0:	4002380d 	.word	0x4002380d

080025e4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80025e4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d00b      	beq.n	8002602 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80025ea:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <RCC_GetFlagStatus+0x30>)
 80025ee:	bf0c      	ite	eq
 80025f0:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80025f2:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80025f4:	f000 001f 	and.w	r0, r0, #31
 80025f8:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80025fc:	f000 0001 	and.w	r0, r0, #1
 8002600:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <RCC_GetFlagStatus+0x30>)
 8002604:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002606:	f000 001f 	and.w	r0, r0, #31
 800260a:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800260e:	f000 0001 	and.w	r0, r0, #1
 8002612:	4770      	bx	lr
 8002614:	40023800 	.word	0x40023800

08002618 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <RCC_ClearFlag+0xc>)
 800261a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800261c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002620:	675a      	str	r2, [r3, #116]	; 0x74
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800

08002628 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <RCC_GetITStatus+0x10>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800262e:	bf0c      	ite	eq
 8002630:	2000      	moveq	r0, #0
 8002632:	2001      	movne	r0, #1
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800263c:	4b01      	ldr	r3, [pc, #4]	; (8002644 <RCC_ClearITPendingBit+0x8>)
 800263e:	7018      	strb	r0, [r3, #0]
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	4002380e 	.word	0x4002380e

08002648 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002648:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <USART_DeInit+0xb0>)
 800264c:	4298      	cmp	r0, r3
 800264e:	d019      	beq.n	8002684 <USART_DeInit+0x3c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <USART_DeInit+0xb4>)
 8002652:	4298      	cmp	r0, r3
 8002654:	d020      	beq.n	8002698 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <USART_DeInit+0xb8>)
 8002658:	4298      	cmp	r0, r3
 800265a:	d029      	beq.n	80026b0 <USART_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <USART_DeInit+0xbc>)
 800265e:	4298      	cmp	r0, r3
 8002660:	d032      	beq.n	80026c8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <USART_DeInit+0xc0>)
 8002664:	4298      	cmp	r0, r3
 8002666:	d03b      	beq.n	80026e0 <USART_DeInit+0x98>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <USART_DeInit+0xc4>)
 800266a:	4298      	cmp	r0, r3
 800266c:	d000      	beq.n	8002670 <USART_DeInit+0x28>
 800266e:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002670:	2020      	movs	r0, #32
 8002672:	2101      	movs	r1, #1
 8002674:	f7ff ff62 	bl	800253c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002678:	2020      	movs	r0, #32
 800267a:	2100      	movs	r1, #0
    }
  }
}
 800267c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002680:	f7ff bf5c 	b.w	800253c <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002684:	2010      	movs	r0, #16
 8002686:	2101      	movs	r1, #1
 8002688:	f7ff ff58 	bl	800253c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800268c:	2010      	movs	r0, #16
 800268e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002694:	f7ff bf52 	b.w	800253c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002698:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800269c:	2101      	movs	r1, #1
 800269e:	f7ff ff41 	bl	8002524 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80026a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026a6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80026a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80026ac:	f7ff bf3a 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80026b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80026b4:	2101      	movs	r1, #1
 80026b6:	f7ff ff35 	bl	8002524 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80026ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80026be:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80026c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80026c4:	f7ff bf2e 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80026c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026cc:	2101      	movs	r1, #1
 80026ce:	f7ff ff29 	bl	8002524 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80026d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026d6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80026d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80026dc:	f7ff bf22 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80026e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026e4:	2101      	movs	r1, #1
 80026e6:	f7ff ff1d 	bl	8002524 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80026ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026ee:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80026f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80026f4:	f7ff bf16 	b.w	8002524 <RCC_APB1PeriphResetCmd>
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40004400 	.word	0x40004400
 8002700:	40004800 	.word	0x40004800
 8002704:	40004c00 	.word	0x40004c00
 8002708:	40005000 	.word	0x40005000
 800270c:	40011400 	.word	0x40011400

08002710 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002714:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002716:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002718:	892e      	ldrh	r6, [r5, #8]
 800271a:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800271c:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800271e:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002720:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002722:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002726:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002728:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800272a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800272c:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800272e:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002730:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002732:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002734:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002738:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800273c:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800273e:	430b      	orrs	r3, r1
 8002740:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002742:	8aa3      	ldrh	r3, [r4, #20]
 8002744:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800274a:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800274c:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800274e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002750:	4668      	mov	r0, sp
 8002752:	f7ff fe15 	bl	8002380 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <USART_Init+0xbc>)
 8002758:	429c      	cmp	r4, r3
 800275a:	d029      	beq.n	80027b0 <USART_Init+0xa0>
 800275c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002760:	429c      	cmp	r4, r3
 8002762:	d025      	beq.n	80027b0 <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002764:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002766:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002768:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800276a:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800276c:	b212      	sxth	r2, r2
 800276e:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002770:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002774:	bfb4      	ite	lt
 8002776:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002778:	0089      	lslge	r1, r1, #2
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800277e:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8002782:	4913      	ldr	r1, [pc, #76]	; (80027d0 <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002784:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002786:	fba1 5302 	umull	r5, r3, r1, r2
 800278a:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800278c:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800278e:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002790:	fb03 2215 	mls	r2, r3, r5, r2
 8002794:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002798:	db0c      	blt.n	80027b4 <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	3232      	adds	r2, #50	; 0x32
 800279e:	fba1 5102 	umull	r5, r1, r1, r2
 80027a2:	f3c1 1143 	ubfx	r1, r1, #5, #4
 80027a6:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8123      	strh	r3, [r4, #8]
}
 80027ac:	b005      	add	sp, #20
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80027b0:	9b03      	ldr	r3, [sp, #12]
 80027b2:	e7d8      	b.n	8002766 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	3232      	adds	r2, #50	; 0x32
 80027b8:	fba1 0102 	umull	r0, r1, r1, r2
 80027bc:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80027c0:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8123      	strh	r3, [r4, #8]
}
 80027c6:	b005      	add	sp, #20
 80027c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40011000 	.word	0x40011000
 80027d0:	51eb851f 	.word	0x51eb851f

080027d4 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80027d4:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80027d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80027da:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80027dc:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80027de:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80027e0:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80027e2:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80027e4:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80027e6:	8183      	strh	r3, [r0, #12]
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80027ec:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80027ee:	880a      	ldrh	r2, [r1, #0]
 80027f0:	884d      	ldrh	r5, [r1, #2]
 80027f2:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80027f4:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80027f6:	88c9      	ldrh	r1, [r1, #6]
 80027f8:	432a      	orrs	r2, r5
 80027fa:	4322      	orrs	r2, r4
 80027fc:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80027fe:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002800:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002802:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002806:	4313      	orrs	r3, r2
 8002808:	8203      	strh	r3, [r0, #16]
}
 800280a:	bc30      	pop	{r4, r5}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002810:	2300      	movs	r3, #0
 8002812:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002814:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002816:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002818:	80c3      	strh	r3, [r0, #6]
 800281a:	4770      	bx	lr

0800281c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800281c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800281e:	b929      	cbnz	r1, 800282c <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	8183      	strh	r3, [r0, #12]
 800282a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800282c:	b29b      	uxth	r3, r3
 800282e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002832:	8183      	strh	r3, [r0, #12]
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002838:	8b03      	ldrh	r3, [r0, #24]
 800283a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800283e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002840:	8b03      	ldrh	r3, [r0, #24]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4319      	orrs	r1, r3
 8002846:	8301      	strh	r1, [r0, #24]
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800284c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800284e:	b919      	cbnz	r1, 8002858 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002850:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002854:	8183      	strh	r3, [r0, #12]
 8002856:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002860:	b29b      	uxth	r3, r3
 8002862:	8183      	strh	r3, [r0, #12]
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002868:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800286a:	b929      	cbnz	r1, 8002878 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800286c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	8283      	strh	r3, [r0, #20]
 8002876:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002878:	b29b      	uxth	r3, r3
 800287a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800287e:	8283      	strh	r3, [r0, #20]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002884:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002888:	8081      	strh	r1, [r0, #4]
 800288a:	4770      	bx	lr

0800288c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800288c:	8880      	ldrh	r0, [r0, #4]
}
 800288e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002892:	4770      	bx	lr

08002894 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002894:	8a03      	ldrh	r3, [r0, #16]
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80028a0:	8a03      	ldrh	r3, [r0, #16]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4319      	orrs	r1, r3
 80028a6:	8201      	strh	r1, [r0, #16]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80028ac:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80028ae:	b929      	cbnz	r1, 80028bc <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	8183      	strh	r3, [r0, #12]
 80028ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	8183      	strh	r3, [r0, #12]
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80028c8:	8983      	ldrh	r3, [r0, #12]
 80028ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80028d4:	8983      	ldrh	r3, [r0, #12]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4319      	orrs	r1, r3
 80028da:	8181      	strh	r1, [r0, #12]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80028e0:	8a03      	ldrh	r3, [r0, #16]
 80028e2:	f023 0320 	bic.w	r3, r3, #32
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80028ec:	8a03      	ldrh	r3, [r0, #16]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4319      	orrs	r1, r3
 80028f2:	8201      	strh	r1, [r0, #16]
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80028f8:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028fa:	b929      	cbnz	r1, 8002908 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	8203      	strh	r3, [r0, #16]
 8002906:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002908:	b29b      	uxth	r3, r3
 800290a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290e:	8203      	strh	r3, [r0, #16]
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002914:	8983      	ldrh	r3, [r0, #12]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	8183      	strh	r3, [r0, #12]
 800291e:	4770      	bx	lr

08002920 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002920:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002922:	b929      	cbnz	r1, 8002930 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002924:	f023 0308 	bic.w	r3, r3, #8
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	8283      	strh	r3, [r0, #20]
 800292e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002930:	b29b      	uxth	r3, r3
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	8283      	strh	r3, [r0, #20]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800293c:	8b03      	ldrh	r3, [r0, #24]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002942:	8b03      	ldrh	r3, [r0, #24]
 8002944:	b29b      	uxth	r3, r3
 8002946:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800294a:	8301      	strh	r1, [r0, #24]
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002950:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002952:	b929      	cbnz	r1, 8002960 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002954:	f023 0320 	bic.w	r3, r3, #32
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	8283      	strh	r3, [r0, #20]
 800295e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002960:	b29b      	uxth	r3, r3
 8002962:	f043 0320 	orr.w	r3, r3, #32
 8002966:	8283      	strh	r3, [r0, #20]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800296c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800296e:	b929      	cbnz	r1, 800297c <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002970:	f023 0310 	bic.w	r3, r3, #16
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	8283      	strh	r3, [r0, #20]
 800297a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800297c:	b29b      	uxth	r3, r3
 800297e:	f043 0310 	orr.w	r3, r3, #16
 8002982:	8283      	strh	r3, [r0, #20]
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002988:	8a83      	ldrh	r3, [r0, #20]
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002994:	8a83      	ldrh	r3, [r0, #20]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4319      	orrs	r1, r3
 800299a:	8281      	strh	r1, [r0, #20]
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80029a0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80029a2:	b929      	cbnz	r1, 80029b0 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	8283      	strh	r3, [r0, #20]
 80029ae:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	8283      	strh	r3, [r0, #20]
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80029bc:	8a83      	ldrh	r3, [r0, #20]
 80029be:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80029c0:	b91a      	cbnz	r2, 80029ca <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80029c2:	ea23 0101 	bic.w	r1, r3, r1
 80029c6:	8281      	strh	r1, [r0, #20]
 80029c8:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80029ca:	4319      	orrs	r1, r3
 80029cc:	8281      	strh	r1, [r0, #20]
 80029ce:	4770      	bx	lr

080029d0 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80029d0:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80029d4:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80029d6:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80029da:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80029dc:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80029de:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80029e2:	d010      	beq.n	8002a06 <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80029e4:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 80029e6:	bf0c      	ite	eq
 80029e8:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80029ea:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80029ec:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80029ee:	b92a      	cbnz	r2, 80029fc <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80029f0:	ea24 0303 	bic.w	r3, r4, r3
 80029f4:	6003      	str	r3, [r0, #0]
  }
}
 80029f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029fa:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80029fc:	4323      	orrs	r3, r4
 80029fe:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a04:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8002a06:	300c      	adds	r0, #12
 8002a08:	e7f0      	b.n	80029ec <USART_ITConfig+0x1c>
 8002a0a:	bf00      	nop

08002a0c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002a0c:	8803      	ldrh	r3, [r0, #0]
 8002a0e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002a10:	bf0c      	ite	eq
 8002a12:	2000      	moveq	r0, #0
 8002a14:	2001      	movne	r0, #1
 8002a16:	4770      	bx	lr

08002a18 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002a18:	43c9      	mvns	r1, r1
 8002a1a:	b289      	uxth	r1, r1
 8002a1c:	8001      	strh	r1, [r0, #0]
 8002a1e:	4770      	bx	lr

08002a20 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002a20:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002a22:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002a26:	2401      	movs	r4, #1
 8002a28:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002a2c:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002a2e:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002a32:	d017      	beq.n	8002a64 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002a34:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8002a36:	bf0c      	ite	eq
 8002a38:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002a3a:	8a83      	ldrhne	r3, [r0, #20]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002a40:	8802      	ldrh	r2, [r0, #0]
 8002a42:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002a44:	b153      	cbz	r3, 8002a5c <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002a46:	0a09      	lsrs	r1, r1, #8
 8002a48:	2301      	movs	r3, #1
 8002a4a:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002a4e:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8002a50:	bf0c      	ite	eq
 8002a52:	2000      	moveq	r0, #0
 8002a54:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8002a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5a:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8002a5c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a62:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8002a64:	8983      	ldrh	r3, [r0, #12]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	e7e9      	b.n	8002a40 <USART_GetITStatus+0x20>

08002a6c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002a6c:	0a09      	lsrs	r1, r1, #8
 8002a6e:	2301      	movs	r3, #1
 8002a70:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002a74:	43c9      	mvns	r1, r1
 8002a76:	b289      	uxth	r1, r1
 8002a78:	8001      	strh	r1, [r0, #0]
 8002a7a:	4770      	bx	lr

08002a7c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002a7c:	b410      	push	{r4}

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002a7e:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <DMA_DeInit+0xe0>)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002a80:	6804      	ldr	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002a82:	2300      	movs	r3, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002a84:	f024 0401 	bic.w	r4, r4, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002a88:	2121      	movs	r1, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002a8a:	4290      	cmp	r0, r2
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002a8c:	6004      	str	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002a8e:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002a90:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002a92:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002a94:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002a96:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002a98:	6141      	str	r1, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002a9a:	d04d      	beq.n	8002b38 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <DMA_DeInit+0xe4>)
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d035      	beq.n	8002b0e <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <DMA_DeInit+0xe8>)
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d039      	beq.n	8002b1c <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <DMA_DeInit+0xec>)
 8002aaa:	4298      	cmp	r0, r3
 8002aac:	d03d      	beq.n	8002b2a <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <DMA_DeInit+0xf0>)
 8002ab0:	4298      	cmp	r0, r3
 8002ab2:	d047      	beq.n	8002b44 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <DMA_DeInit+0xf4>)
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d048      	beq.n	8002b4c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <DMA_DeInit+0xf8>)
 8002abc:	4298      	cmp	r0, r3
 8002abe:	d01d      	beq.n	8002afc <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <DMA_DeInit+0xfc>)
 8002ac2:	4298      	cmp	r0, r3
 8002ac4:	d01e      	beq.n	8002b04 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <DMA_DeInit+0x100>)
 8002ac8:	4298      	cmp	r0, r3
 8002aca:	d043      	beq.n	8002b54 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8002acc:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <DMA_DeInit+0x104>)
 8002ace:	4298      	cmp	r0, r3
 8002ad0:	d01d      	beq.n	8002b0e <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <DMA_DeInit+0x108>)
 8002ad4:	4298      	cmp	r0, r3
 8002ad6:	d021      	beq.n	8002b1c <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <DMA_DeInit+0x10c>)
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d025      	beq.n	8002b2a <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <DMA_DeInit+0x110>)
 8002ae0:	4298      	cmp	r0, r3
 8002ae2:	d02f      	beq.n	8002b44 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <DMA_DeInit+0x114>)
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d030      	beq.n	8002b4c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <DMA_DeInit+0x118>)
 8002aec:	4298      	cmp	r0, r3
 8002aee:	d005      	beq.n	8002afc <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <DMA_DeInit+0x11c>)
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d006      	beq.n	8002b04 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002afa:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <DMA_DeInit+0x120>)
 8002afe:	f843 2c94 	str.w	r2, [r3, #-148]
 8002b02:	e7f8      	b.n	8002af6 <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002b04:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002b08:	f843 2cac 	str.w	r2, [r3, #-172]
 8002b0c:	e7f3      	b.n	8002af6 <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002b0e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002b12:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b1a:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002b1c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002b20:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b28:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002b2a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002b2e:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b36:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002b3a:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002b3e:	223d      	movs	r2, #61	; 0x3d
 8002b40:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002b42:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <DMA_DeInit+0x128>)
 8002b46:	f843 2c64 	str.w	r2, [r3, #-100]
 8002b4a:	e7d4      	b.n	8002af6 <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002b4c:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <DMA_DeInit+0x12c>)
 8002b4e:	f843 2c7c 	str.w	r2, [r3, #-124]
 8002b52:	e7d0      	b.n	8002af6 <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002b54:	223d      	movs	r2, #61	; 0x3d
 8002b56:	f843 2c08 	str.w	r2, [r3, #-8]
 8002b5a:	e7cc      	b.n	8002af6 <DMA_DeInit+0x7a>
 8002b5c:	40026010 	.word	0x40026010
 8002b60:	40026028 	.word	0x40026028
 8002b64:	40026040 	.word	0x40026040
 8002b68:	40026058 	.word	0x40026058
 8002b6c:	40026070 	.word	0x40026070
 8002b70:	40026088 	.word	0x40026088
 8002b74:	400260a0 	.word	0x400260a0
 8002b78:	400260b8 	.word	0x400260b8
 8002b7c:	40026410 	.word	0x40026410
 8002b80:	40026428 	.word	0x40026428
 8002b84:	40026440 	.word	0x40026440
 8002b88:	40026458 	.word	0x40026458
 8002b8c:	40026470 	.word	0x40026470
 8002b90:	40026488 	.word	0x40026488
 8002b94:	400264a0 	.word	0x400264a0
 8002b98:	400264b8 	.word	0x400264b8
 8002b9c:	203d0000 	.word	0x203d0000
 8002ba0:	40026000 	.word	0x40026000
 8002ba4:	2000003d 	.word	0x2000003d
 8002ba8:	20000f40 	.word	0x20000f40

08002bac <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002bac:	68ca      	ldr	r2, [r1, #12]
 8002bae:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002bb0:	f8d0 c000 	ldr.w	ip, [r0]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002bb4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002bb8:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002bba:	698e      	ldr	r6, [r1, #24]
 8002bbc:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002bbe:	6a0c      	ldr	r4, [r1, #32]
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002bc0:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002bc4:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002bc8:	ea42 0a03 	orr.w	sl, r2, r3
 8002bcc:	ea4a 0707 	orr.w	r7, sl, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002bd0:	433e      	orrs	r6, r7
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002bd2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002bd4:	684f      	ldr	r7, [r1, #4]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002bd6:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002bd8:	432c      	orrs	r4, r5
 8002bda:	ea44 0203 	orr.w	r2, r4, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002bde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002be0:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <DMA_Init+0x6c>)
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002be2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002be4:	690d      	ldr	r5, [r1, #16]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002be6:	431a      	orrs	r2, r3
 8002be8:	ea42 0909 	orr.w	r9, r2, r9
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002bec:	ea49 0808 	orr.w	r8, r9, r8
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf0:	ea0c 0606 	and.w	r6, ip, r6
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002bf4:	ea48 0606 	orr.w	r6, r8, r6
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002bf8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002bfa:	6889      	ldr	r1, [r1, #8]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002bfc:	6006      	str	r6, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002bfe:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002c00:	4323      	orrs	r3, r4
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c02:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002c06:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002c08:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002c0a:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002c0c:	6087      	str	r7, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002c0e:	60c1      	str	r1, [r0, #12]
}
 8002c10:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	f01c803f 	.word	0xf01c803f

08002c1c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8002c20:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8002c22:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002c24:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8002c26:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002c28:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002c2a:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002c2c:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002c2e:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8002c30:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8002c32:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002c34:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002c36:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002c38:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002c3a:	6383      	str	r3, [r0, #56]	; 0x38
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop

08002c40 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002c40:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c42:	b919      	cbnz	r1, 8002c4c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6003      	str	r3, [r0, #0]
 8002c4a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6003      	str	r3, [r0, #0]
 8002c52:	4770      	bx	lr

08002c54 <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8002c54:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8002c56:	b919      	cbnz	r1, 8002c60 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8002c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c5c:	6003      	str	r3, [r0, #0]
 8002c5e:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8002c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c64:	6003      	str	r3, [r0, #0]
 8002c66:	4770      	bx	lr

08002c68 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8002c68:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8002c6a:	b919      	cbnz	r1, 8002c74 <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8002c6c:	f023 0320 	bic.w	r3, r3, #32
 8002c70:	6003      	str	r3, [r0, #0]
 8002c72:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	6003      	str	r3, [r0, #0]
 8002c7a:	4770      	bx	lr

08002c7c <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8002c7c:	6041      	str	r1, [r0, #4]
 8002c7e:	4770      	bx	lr

08002c80 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8002c80:	6840      	ldr	r0, [r0, #4]
}
 8002c82:	b280      	uxth	r0, r0
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8002c88:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8002c8a:	b922      	cbnz	r2, 8002c96 <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8002c8c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002c90:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8002c92:	6101      	str	r1, [r0, #16]
 8002c94:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8002c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c9a:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8002c9c:	6101      	str	r1, [r0, #16]
 8002c9e:	4770      	bx	lr

08002ca0 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8002ca0:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8002ca2:	b919      	cbnz	r1, 8002cac <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8002ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca8:	6003      	str	r3, [r0, #0]
 8002caa:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6003      	str	r3, [r0, #0]
 8002cb2:	4770      	bx	lr

08002cb4 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8002cb4:	b90a      	cbnz	r2, 8002cba <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8002cb6:	60c1      	str	r1, [r0, #12]
 8002cb8:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8002cba:	6101      	str	r1, [r0, #16]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8002cc0:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8002cc2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8002cc6:	4770      	bx	lr

08002cc8 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002cc8:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8002cca:	f000 0001 	and.w	r0, r0, #1
 8002cce:	4770      	bx	lr

08002cd0 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8002cd0:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 8002cd2:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002cd6:	4770      	bx	lr

08002cd8 <DMA_GetFlagStatus>:

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <DMA_GetFlagStatus+0x30>)
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <DMA_GetFlagStatus+0x34>)
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002cdc:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	; (8002d10 <DMA_GetFlagStatus+0x38>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	bf8c      	ite	hi
 8002ce4:	4610      	movhi	r0, r2
 8002ce6:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002ce8:	008b      	lsls	r3, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002cea:	bf4c      	ite	mi
 8002cec:	6843      	ldrmi	r3, [r0, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002cee:	6803      	ldrpl	r3, [r0, #0]
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8002cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002cf4:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002cf8:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002cfc:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8002cfe:	bf0c      	ite	eq
 8002d00:	2000      	moveq	r0, #0
 8002d02:	2001      	movne	r0, #1
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40026000 	.word	0x40026000
 8002d0c:	40026400 	.word	0x40026400
 8002d10:	4002640f 	.word	0x4002640f

08002d14 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002d14:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <DMA_ClearFlag+0x28>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002d18:	4c09      	ldr	r4, [pc, #36]	; (8002d40 <DMA_ClearFlag+0x2c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <DMA_ClearFlag+0x30>)
 8002d1c:	42a0      	cmp	r0, r4
 8002d1e:	bf8c      	ite	hi
 8002d20:	4610      	movhi	r0, r2
 8002d22:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002d24:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002d28:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002d2c:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8002d30:	bf14      	ite	ne
 8002d32:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002d34:	6081      	streq	r1, [r0, #8]
  }    
}
 8002d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40026400 	.word	0x40026400
 8002d40:	4002640f 	.word	0x4002640f
 8002d44:	40026000 	.word	0x40026000

08002d48 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8002d48:	060b      	lsls	r3, r1, #24
 8002d4a:	d50c      	bpl.n	8002d66 <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002d4c:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8002d4e:	b1aa      	cbz	r2, 8002d7c <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002d54:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002d56:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002d58:	d00f      	beq.n	8002d7a <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	f001 011e 	and.w	r1, r1, #30
 8002d60:	4319      	orrs	r1, r3
 8002d62:	6001      	str	r1, [r0, #0]
 8002d64:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002d66:	2980      	cmp	r1, #128	; 0x80
 8002d68:	d007      	beq.n	8002d7a <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	d1f5      	bne.n	8002d5a <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	f001 011e 	and.w	r1, r1, #30
 8002d74:	ea23 0101 	bic.w	r1, r3, r1
 8002d78:	6001      	str	r1, [r0, #0]
 8002d7a:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8002d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002d80:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8002d82:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002d84:	d1f3      	bne.n	8002d6e <DMA_ITConfig+0x26>
 8002d86:	4770      	bx	lr

08002d88 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002d88:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d8a:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <DMA_GetITStatus+0x48>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002d8c:	4d11      	ldr	r5, [pc, #68]	; (8002dd4 <DMA_GetITStatus+0x4c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d8e:	4c12      	ldr	r4, [pc, #72]	; (8002dd8 <DMA_GetITStatus+0x50>)
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002d90:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
 8002d94:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d98:	42a8      	cmp	r0, r5
 8002d9a:	bf88      	it	hi
 8002d9c:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002d9e:	b196      	cbz	r6, 8002dc6 <DMA_GetITStatus+0x3e>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002da0:	6804      	ldr	r4, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8002da2:	f004 041e 	and.w	r4, r4, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002da6:	ea04 24d1 	and.w	r4, r4, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002daa:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002dac:	bf4c      	ite	mi
 8002dae:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002db0:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002db2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002db6:	ea13 0002 	ands.w	r0, r3, r2
 8002dba:	d002      	beq.n	8002dc2 <DMA_GetITStatus+0x3a>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8002dbc:	1c20      	adds	r0, r4, #0
 8002dbe:	bf18      	it	ne
 8002dc0:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8002dc2:	bc70      	pop	{r4, r5, r6}
 8002dc4:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002dc6:	6944      	ldr	r4, [r0, #20]
 8002dc8:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8002dcc:	e7ed      	b.n	8002daa <DMA_GetITStatus+0x22>
 8002dce:	bf00      	nop
 8002dd0:	40026000 	.word	0x40026000
 8002dd4:	4002640f 	.word	0x4002640f
 8002dd8:	40026400 	.word	0x40026400

08002ddc <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002ddc:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <DMA_ClearITPendingBit+0x28>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002de0:	4c09      	ldr	r4, [pc, #36]	; (8002e08 <DMA_ClearITPendingBit+0x2c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <DMA_ClearITPendingBit+0x30>)
 8002de4:	42a0      	cmp	r0, r4
 8002de6:	bf8c      	ite	hi
 8002de8:	4610      	movhi	r0, r2
 8002dea:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002dec:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002df0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002df4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8002df8:	bf14      	ite	ne
 8002dfa:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002dfc:	6081      	streq	r1, [r0, #8]
  }   
}
 8002dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40026400 	.word	0x40026400
 8002e08:	4002640f 	.word	0x4002640f
 8002e0c:	40026000 	.word	0x40026000

08002e10 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8002e10:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8002e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e16:	2101      	movs	r1, #1
 8002e18:	f7ff fb90 	bl	800253c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8002e1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e20:	2100      	movs	r1, #0
}
 8002e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8002e26:	f7ff bb89 	b.w	800253c <RCC_APB2PeriphResetCmd>
 8002e2a:	bf00      	nop

08002e2c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8002e2c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <SDIO_Init+0x30>)
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e30:	6887      	ldr	r7, [r0, #8]
 8002e32:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002e36:	68c6      	ldr	r6, [r0, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8002e38:	6805      	ldr	r5, [r0, #0]
 8002e3a:	6904      	ldr	r4, [r0, #16]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e3c:	7d01      	ldrb	r1, [r0, #20]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8002e3e:	6853      	ldr	r3, [r2, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e40:	ea4c 0007 	orr.w	r0, ip, r7
 8002e44:	4330      	orrs	r0, r6
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8002e46:	4328      	orrs	r0, r5
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8002e48:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8002e4c:	4320      	orrs	r0, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8002e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8002e52:	4303      	orrs	r3, r0
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8002e54:	430b      	orrs	r3, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8002e56:	6053      	str	r3, [r2, #4]
}
 8002e58:	bcf0      	pop	{r4, r5, r6, r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	40012c00 	.word	0x40012c00

08002e60 <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8002e60:	2300      	movs	r3, #0
 8002e62:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8002e64:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8002e66:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8002e68:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8002e6a:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8002e6c:	6103      	str	r3, [r0, #16]
 8002e6e:	4770      	bx	lr

08002e70 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <SDIO_ClockCmd+0x8>)
 8002e72:	6018      	str	r0, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	422580a0 	.word	0x422580a0

08002e7c <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <SDIO_SetPowerState+0x8>)
 8002e7e:	6018      	str	r0, [r3, #0]
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <SDIO_GetPowerState+0xc>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
}
 8002e8c:	f000 0003 	and.w	r0, r0, #3
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00

08002e98 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <SDIO_SendCommand+0x28>)
 8002e9a:	6802      	ldr	r2, [r0, #0]
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8002e9c:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8002e9e:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002ea0:	6885      	ldr	r5, [r0, #8]
 8002ea2:	6841      	ldr	r1, [r0, #4]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002ea4:	68c4      	ldr	r4, [r0, #12]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8002ea6:	68da      	ldr	r2, [r3, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002ea8:	6900      	ldr	r0, [r0, #16]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002eaa:	4329      	orrs	r1, r5
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002eac:	4321      	orrs	r1, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8002eae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8002eb2:	4301      	orrs	r1, r0
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8002eb4:	f022 0207 	bic.w	r2, r2, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8002eb8:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8002eba:	60da      	str	r2, [r3, #12]
}
 8002ebc:	bc30      	pop	{r4, r5}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00

08002ec4 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8002ec8:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8002eca:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8002ecc:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8002ece:	6103      	str	r3, [r0, #16]
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop

08002ed4 <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <SDIO_GetCommandResponse+0x8>)
 8002ed6:	6918      	ldr	r0, [r3, #16]
}
 8002ed8:	b2c0      	uxtb	r0, r0
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <SDIO_GetResponse>:
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <SDIO_GetResponse+0x14>)
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8002ee2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8002ee4:	4403      	add	r3, r0
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
  __IO uint32_t tmp = 0;
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8002eea:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8002eec:	9b01      	ldr	r3, [sp, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
}
 8002ef0:	b002      	add	sp, #8
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c14 	.word	0x40012c14

08002ef8 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <SDIO_DataConfig+0x28>)
 8002efa:	6802      	ldr	r2, [r0, #0]
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8002efc:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8002f00:	6842      	ldr	r2, [r0, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002f04:	68c5      	ldr	r5, [r0, #12]
 8002f06:	6882      	ldr	r2, [r0, #8]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8002f08:	6904      	ldr	r4, [r0, #16]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8002f0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8002f0c:	6940      	ldr	r0, [r0, #20]
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002f0e:	432a      	orrs	r2, r5
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8002f10:	4322      	orrs	r2, r4
 8002f12:	4302      	orrs	r2, r0

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8002f14:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8002f18:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f1c:	bc30      	pop	{r4, r5}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00

08002f24 <SDIO_DataStructInit>:
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f2a:	e880 000c 	stmia.w	r0, {r2, r3}
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8002f2e:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8002f30:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8002f32:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8002f34:	6143      	str	r3, [r0, #20]
 8002f36:	4770      	bx	lr

08002f38 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <SDIO_GetDataCounter+0x8>)
 8002f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <SDIO_ReadData+0x8>)
 8002f46:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8002f4a:	4770      	bx	lr
 8002f4c:	40012c00 	.word	0x40012c00

08002f50 <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <SDIO_WriteData+0x8>)
 8002f52:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8002f5c:	4b01      	ldr	r3, [pc, #4]	; (8002f64 <SDIO_GetFIFOCount+0x8>)
 8002f5e:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00

08002f68 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <SDIO_StartSDIOReadWait+0x8>)
 8002f6a:	6018      	str	r0, [r3, #0]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	422585a0 	.word	0x422585a0

08002f74 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <SDIO_StopSDIOReadWait+0x8>)
 8002f76:	6018      	str	r0, [r3, #0]
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	422585a4 	.word	0x422585a4

08002f80 <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <SDIO_SetSDIOReadWaitMode+0x8>)
 8002f82:	6018      	str	r0, [r3, #0]
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	422585a8 	.word	0x422585a8

08002f8c <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8002f8c:	4b01      	ldr	r3, [pc, #4]	; (8002f94 <SDIO_SetSDIOOperation+0x8>)
 8002f8e:	6018      	str	r0, [r3, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	422585ac 	.word	0x422585ac

08002f98 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <SDIO_SendSDIOSuspendCmd+0x8>)
 8002f9a:	6018      	str	r0, [r3, #0]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	422581ac 	.word	0x422581ac

08002fa4 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <SDIO_CommandCompletionCmd+0x8>)
 8002fa6:	6018      	str	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	422581b0 	.word	0x422581b0

08002fb0 <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8002fb0:	f000 0001 	and.w	r0, r0, #1
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <SDIO_CEATAITCmd+0x10>)
 8002fb6:	f080 0001 	eor.w	r0, r0, #1
 8002fba:	6018      	str	r0, [r3, #0]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	422581b4 	.word	0x422581b4

08002fc4 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <SDIO_SendCEATACmd+0x8>)
 8002fc6:	6018      	str	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	422581b8 	.word	0x422581b8

08002fd0 <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8002fd0:	4b01      	ldr	r3, [pc, #4]	; (8002fd8 <SDIO_DMACmd+0x8>)
 8002fd2:	6018      	str	r0, [r3, #0]
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	4225858c 	.word	0x4225858c

08002fdc <SDIO_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SDIO_ITConfig+0x14>)
 8002fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002fe0:	b919      	cbnz	r1, 8002fea <SDIO_ITConfig+0xe>
    SDIO->MASK |= SDIO_IT;
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8002fe2:	ea22 0000 	bic.w	r0, r2, r0
 8002fe6:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002fe8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8002fea:	4310      	orrs	r0, r2
 8002fec:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00

08002ff4 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <SDIO_GetFlagStatus+0x10>)
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2000      	moveq	r0, #0
 8002ffe:	2001      	movne	r0, #1
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40012c00 	.word	0x40012c00

08003008 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <SDIO_ClearFlag+0x8>)
 800300a:	6398      	str	r0, [r3, #56]	; 0x38
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00

08003014 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <SDIO_GetITStatus+0x10>)
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800301a:	bf0c      	ite	eq
 800301c:	2000      	moveq	r0, #0
 800301e:	2001      	movne	r0, #1
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40012c00 	.word	0x40012c00

08003028 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8003028:	4b01      	ldr	r3, [pc, #4]	; (8003030 <SDIO_ClearITPendingBit+0x8>)
 800302a:	6398      	str	r0, [r3, #56]	; 0x38
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40012c00 	.word	0x40012c00

08003034 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8003034:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003036:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800303a:	2101      	movs	r1, #1
 800303c:	f7ff fa7e 	bl	800253c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8003040:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003044:	2100      	movs	r1, #0
}
 8003046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800304a:	f7ff ba77 	b.w	800253c <RCC_APB2PeriphResetCmd>
 800304e:	bf00      	nop

08003050 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <SYSCFG_MemoryRemapConfig+0x8>)
 8003052:	6018      	str	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40013800 	.word	0x40013800

0800305c <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800305c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003064:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003068:	f001 0103 	and.w	r1, r1, #3
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800306c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800306e:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003070:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003072:	220f      	movs	r2, #15
 8003074:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003076:	ea24 0202 	bic.w	r2, r4, r2
 800307a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800307c:	689a      	ldr	r2, [r3, #8]
}
 800307e:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003082:	4088      	lsls	r0, r1
 8003084:	4302      	orrs	r2, r0
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800308c:	4b01      	ldr	r3, [pc, #4]	; (8003094 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 800308e:	6018      	str	r0, [r3, #0]
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	422700dc 	.word	0x422700dc

08003098 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8003098:	4b01      	ldr	r3, [pc, #4]	; (80030a0 <SYSCFG_CompensationCellCmd+0x8>)
 800309a:	6018      	str	r0, [r3, #0]
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	42270400 	.word	0x42270400

080030a4 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <SYSCFG_GetCompensationCellStatus+0xc>)
 80030a6:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80030a8:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40013800 	.word	0x40013800

080030b4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <EXTI_DeInit+0x14>)
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 80030b6:	4905      	ldr	r1, [pc, #20]	; (80030cc <EXTI_DeInit+0x18>)
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80030bc:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80030be:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80030c0:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80030c2:	6159      	str	r1, [r3, #20]
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40013c00 	.word	0x40013c00
 80030cc:	007fffff 	.word	0x007fffff

080030d0 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80030d0:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80030d2:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80030d4:	b32b      	cbz	r3, 8003122 <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <EXTI_Init+0x7c>)
 80030d8:	6801      	ldr	r1, [r0, #0]
 80030da:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80030dc:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80030de:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80030e0:	43cc      	mvns	r4, r1
 80030e2:	4026      	ands	r6, r4
 80030e4:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80030e6:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80030e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80030ec:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80030f0:	4034      	ands	r4, r6
 80030f2:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80030f4:	6814      	ldr	r4, [r2, #0]
 80030f6:	4321      	orrs	r1, r4
 80030f8:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80030fa:	6802      	ldr	r2, [r0, #0]
 80030fc:	6898      	ldr	r0, [r3, #8]
 80030fe:	43d1      	mvns	r1, r2
 8003100:	4008      	ands	r0, r1
 8003102:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003104:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003106:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003108:	ea01 0100 	and.w	r1, r1, r0
 800310c:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800310e:	d014      	beq.n	800313a <EXTI_Init+0x6a>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003110:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8003114:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8003118:	bc70      	pop	{r4, r5, r6}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8003120:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003122:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003124:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800312a:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800312e:	bc70      	pop	{r4, r5, r6}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	ea22 0201 	bic.w	r2, r2, r1
 8003136:	601a      	str	r2, [r3, #0]
  }
}
 8003138:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	4311      	orrs	r1, r2
 800313e:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	430a      	orrs	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8003146:	bc70      	pop	{r4, r5, r6}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40013c00 	.word	0x40013c00

08003150 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8003150:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8003152:	220c      	movs	r2, #12
 8003154:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8003156:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8003158:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800315a:	7183      	strb	r3, [r0, #6]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <EXTI_GenerateSWInterrupt+0xc>)
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	4310      	orrs	r0, r2
 8003166:	6118      	str	r0, [r3, #16]
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40013c00 	.word	0x40013c00

08003170 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <EXTI_GetFlagStatus+0x10>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003176:	bf0c      	ite	eq
 8003178:	2000      	moveq	r0, #0
 800317a:	2001      	movne	r0, #1
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40013c00 	.word	0x40013c00

08003184 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003184:	4b01      	ldr	r3, [pc, #4]	; (800318c <EXTI_ClearFlag+0x8>)
 8003186:	6158      	str	r0, [r3, #20]
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40013c00 	.word	0x40013c00

08003190 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <EXTI_GetITStatus+0x18>)
 8003192:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4003      	ands	r3, r0
 8003198:	d004      	beq.n	80031a4 <EXTI_GetITStatus+0x14>
 800319a:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 800319c:	bf0c      	ite	eq
 800319e:	2000      	moveq	r0, #0
 80031a0:	2001      	movne	r0, #1
 80031a2:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 80031a4:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80031a6:	4770      	bx	lr
 80031a8:	40013c00 	.word	0x40013c00

080031ac <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <EXTI_ClearITPendingBit+0x8>)
 80031ae:	6158      	str	r0, [r3, #20]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80031b8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <NVIC_PriorityGroupConfig+0x10>)
 80031be:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80031c2:	60d8      	str	r0, [r3, #12]
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80031cc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80031ce:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80031d0:	b963      	cbnz	r3, 80031ec <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031d2:	7803      	ldrb	r3, [r0, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <NVIC_Init+0x70>)
 80031d6:	0959      	lsrs	r1, r3, #5
 80031d8:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2001      	movs	r0, #1
 80031e0:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80031e8:	bcf0      	pop	{r4, r5, r6, r7}
 80031ea:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80031ee:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80031f0:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80031f2:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80031f4:	7803      	ldrb	r3, [r0, #0]
 80031f6:	4911      	ldr	r1, [pc, #68]	; (800323c <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80031f8:	43d2      	mvns	r2, r2
 80031fa:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80031fe:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8003202:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003204:	b2e4      	uxtb	r4, r4
 8003206:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800320a:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800320e:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003210:	402a      	ands	r2, r5
 8003212:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003214:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003218:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003224:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003226:	2001      	movs	r0, #1
 8003228:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800322c:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003236:	bcf0      	pop	{r4, r5, r6, r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003244:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8003248:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800324c:	4b01      	ldr	r3, [pc, #4]	; (8003254 <NVIC_SetVectorTable+0x10>)
 800324e:	4308      	orrs	r0, r1
 8003250:	6098      	str	r0, [r3, #8]
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <NVIC_SystemLPConfig+0x14>)
 800325a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800325c:	b919      	cbnz	r1, 8003266 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800325e:	ea22 0000 	bic.w	r0, r2, r0
 8003262:	6118      	str	r0, [r3, #16]
 8003264:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8003266:	4310      	orrs	r0, r2
 8003268:	6118      	str	r0, [r3, #16]
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <SysTick_CLKSourceConfig+0x14>)
 8003272:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003274:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003276:	bf0c      	ite	eq
 8003278:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800327c:	f022 0204 	bicne.w	r2, r2, #4
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	4770      	bx	lr
 8003284:	e000e010 	.word	0xe000e010

08003288 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8003288:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <I2C_DeInit+0x60>)
 800328c:	4298      	cmp	r0, r3
 800328e:	d012      	beq.n	80032b6 <I2C_DeInit+0x2e>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <I2C_DeInit+0x64>)
 8003292:	4298      	cmp	r0, r3
 8003294:	d01b      	beq.n	80032ce <I2C_DeInit+0x46>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <I2C_DeInit+0x68>)
 8003298:	4298      	cmp	r0, r3
 800329a:	d000      	beq.n	800329e <I2C_DeInit+0x16>
 800329c:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800329e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80032a2:	2101      	movs	r1, #1
 80032a4:	f7ff f93e 	bl	8002524 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80032a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80032ac:	2100      	movs	r1, #0
    }
  }
}
 80032ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80032b2:	f7ff b937 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80032b6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032ba:	2101      	movs	r1, #1
 80032bc:	f7ff f932 	bl	8002524 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80032c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032c4:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80032c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80032ca:	f7ff b92b 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80032ce:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032d2:	2101      	movs	r1, #1
 80032d4:	f7ff f926 	bl	8002524 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80032d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032dc:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80032de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80032e2:	f7ff b91f 	b.w	8002524 <RCC_APB1PeriphResetCmd>
 80032e6:	bf00      	nop
 80032e8:	40005400 	.word	0x40005400
 80032ec:	40005800 	.word	0x40005800
 80032f0:	40005c00 	.word	0x40005c00

080032f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80032fa:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80032fc:	460d      	mov	r5, r1
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80032fe:	88a6      	ldrh	r6, [r4, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003300:	f7ff f83e 	bl	8002380 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003304:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003306:	4830      	ldr	r0, [pc, #192]	; (80033c8 <I2C_Init+0xd4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003308:	682a      	ldr	r2, [r5, #0]
 800330a:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80033d0 <I2C_Init+0xdc>
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800330e:	fba0 3001 	umull	r3, r0, r0, r1

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003312:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8003316:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003318:	0c80      	lsrs	r0, r0, #18

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800331a:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800331c:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 800331e:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003320:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003322:	8823      	ldrh	r3, [r4, #0]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800332c:	4562      	cmp	r2, ip
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800332e:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003330:	d823      	bhi.n	800337a <I2C_Init+0x86>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003332:	0053      	lsls	r3, r2, #1
 8003334:	fbb1 f3f3 	udiv	r3, r1, r3
 8003338:	b29b      	uxth	r3, r3
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800333a:	2b03      	cmp	r3, #3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800333c:	f107 0701 	add.w	r7, r7, #1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003340:	bf98      	it	ls
 8003342:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003344:	8427      	strh	r7, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003346:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003348:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800334a:	896e      	ldrh	r6, [r5, #10]
 800334c:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800334e:	8929      	ldrh	r1, [r5, #8]
 8003350:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003352:	b29b      	uxth	r3, r3
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800335a:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800335c:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003360:	f023 0302 	bic.w	r3, r3, #2
 8003364:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003366:	4330      	orrs	r0, r6

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003368:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800336a:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800336c:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800336e:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003370:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003372:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003374:	8122      	strh	r2, [r4, #8]
}
 8003376:	b005      	add	sp, #20
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800337a:	88ee      	ldrh	r6, [r5, #6]
 800337c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003380:	429e      	cmp	r6, r3
 8003382:	d01a      	beq.n	80033ba <I2C_Init+0xc6>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003384:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003388:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800338c:	fbb1 f3f2 	udiv	r3, r1, r2
 8003390:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8003396:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800339a:	b90a      	cbnz	r2, 80033a0 <I2C_Init+0xac>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800339c:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80033a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <I2C_Init+0xd8>)
 80033a6:	fb01 f000 	mul.w	r0, r1, r0
 80033aa:	fb82 1000 	smull	r1, r0, r2, r0
 80033ae:	0980      	lsrs	r0, r0, #6
 80033b0:	3001      	adds	r0, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80033b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80033b6:	8420      	strh	r0, [r4, #32]
 80033b8:	e7c5      	b.n	8003346 <I2C_Init+0x52>
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80033ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033be:	fbb1 f3f2 	udiv	r3, r1, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	e7e7      	b.n	8003396 <I2C_Init+0xa2>
 80033c6:	bf00      	nop
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3
 80033d0:	000186a0 	.word	0x000186a0

080033d4 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80033d4:	2300      	movs	r3, #0
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 80033d6:	b410      	push	{r4}
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80033d8:	f64b 71ff 	movw	r1, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80033dc:	f241 3488 	movw	r4, #5000	; 0x1388
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80033e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80033e4:	6004      	str	r4, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80033e6:	80c1      	strh	r1, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80033e8:	8182      	strh	r2, [r0, #12]
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80033ea:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80033ec:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80033ee:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
}
 80033f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop

080033f8 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80033f8:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80033fa:	b929      	cbnz	r1, 8003408 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	8003      	strh	r3, [r0, #0]
 8003406:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003408:	b29b      	uxth	r3, r3
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	8003      	strh	r3, [r0, #0]
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003414:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003416:	b929      	cbnz	r1, 8003424 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	8003      	strh	r3, [r0, #0]
 8003422:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003424:	b29b      	uxth	r3, r3
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	8003      	strh	r3, [r0, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003430:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003432:	b929      	cbnz	r1, 8003440 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	8003      	strh	r3, [r0, #0]
 800343e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003440:	b29b      	uxth	r3, r3
 8003442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003446:	8003      	strh	r3, [r0, #0]
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800344c:	b91a      	cbnz	r2, 8003456 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800344e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003452:	8201      	strh	r1, [r0, #16]
 8003454:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8003456:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 800345a:	8201      	strh	r1, [r0, #16]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003460:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003462:	b929      	cbnz	r1, 8003470 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	8003      	strh	r3, [r0, #0]
 800346e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003470:	b29b      	uxth	r3, r3
 8003472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003476:	8003      	strh	r3, [r0, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800347c:	8983      	ldrh	r3, [r0, #12]
 800347e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003480:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8003484:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003488:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800348a:	8181      	strh	r1, [r0, #12]
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8003490:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003492:	b929      	cbnz	r1, 80034a0 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	8183      	strh	r3, [r0, #12]
 800349e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	8183      	strh	r3, [r0, #12]
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop

080034ac <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80034ac:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034ae:	b929      	cbnz	r1, 80034bc <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80034b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	8003      	strh	r3, [r0, #0]
 80034ba:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c2:	8003      	strh	r3, [r0, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80034c8:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80034ca:	b919      	cbnz	r1, 80034d4 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80034cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034d0:	8003      	strh	r3, [r0, #0]
 80034d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8003      	strh	r3, [r0, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80034e4:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80034e6:	b129      	cbz	r1, 80034f4 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80034e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	8003      	strh	r3, [r0, #0]
 80034f2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fa:	8003      	strh	r3, [r0, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop

08003500 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8003500:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8003504:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8003506:	d005      	beq.n	8003514 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8003508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	8383      	strh	r3, [r0, #28]
 8003512:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8003514:	b29b      	uxth	r3, r3
 8003516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351a:	8383      	strh	r3, [r0, #28]
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop

08003520 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8003520:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8003524:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8003526:	d005      	beq.n	8003534 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8003528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	8003      	strh	r3, [r0, #0]
 8003532:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8003534:	b29b      	uxth	r3, r3
 8003536:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800353a:	8003      	strh	r3, [r0, #0]
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003540:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8003544:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003546:	d005      	beq.n	8003554 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8003548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	8003      	strh	r3, [r0, #0]
 8003552:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8003554:	b29b      	uxth	r3, r3
 8003556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800355a:	8003      	strh	r3, [r0, #0]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003560:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003562:	b929      	cbnz	r1, 8003570 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8003564:	f023 0310 	bic.w	r3, r3, #16
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	8003      	strh	r3, [r0, #0]
 800356e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003570:	b29b      	uxth	r3, r3
 8003572:	f043 0310 	orr.w	r3, r3, #16
 8003576:	8003      	strh	r3, [r0, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800357c:	8201      	strh	r1, [r0, #16]
 800357e:	4770      	bx	lr

08003580 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003580:	8a00      	ldrh	r0, [r0, #16]
}
 8003582:	b2c0      	uxtb	r0, r0
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003588:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800358a:	b929      	cbnz	r1, 8003598 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800358c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	8003      	strh	r3, [r0, #0]
 8003596:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003598:	b29b      	uxth	r3, r3
 800359a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800359e:	8003      	strh	r3, [r0, #0]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80035a4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80035a8:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80035aa:	d005      	beq.n	80035b8 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80035ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	8003      	strh	r3, [r0, #0]
 80035b6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035be:	8003      	strh	r3, [r0, #0]
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80035c4:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035c6:	b929      	cbnz	r1, 80035d4 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80035c8:	f023 0320 	bic.w	r3, r3, #32
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	8003      	strh	r3, [r0, #0]
 80035d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	8003      	strh	r3, [r0, #0]
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80035e0:	8b00      	ldrh	r0, [r0, #24]
}
 80035e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80035e6:	4770      	bx	lr

080035e8 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80035e8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035ea:	b929      	cbnz	r1, 80035f8 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	8083      	strh	r3, [r0, #4]
 80035f6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035fe:	8083      	strh	r3, [r0, #4]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop

08003604 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8003604:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003606:	b929      	cbnz	r1, 8003614 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8003608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	8083      	strh	r3, [r0, #4]
 8003612:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8003614:	b29b      	uxth	r3, r3
 8003616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800361a:	8083      	strh	r3, [r0, #4]
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop

08003620 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8003620:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8003626:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8003628:	9b01      	ldr	r3, [sp, #4]
 800362a:	4419      	add	r1, r3
 800362c:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800362e:	9b01      	ldr	r3, [sp, #4]
 8003630:	8818      	ldrh	r0, [r3, #0]
}
 8003632:	b280      	uxth	r0, r0
 8003634:	b002      	add	sp, #8
 8003636:	4770      	bx	lr

08003638 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003638:	8883      	ldrh	r3, [r0, #4]
 800363a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800363c:	b91a      	cbnz	r2, 8003646 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800363e:	ea23 0101 	bic.w	r1, r3, r1
 8003642:	8081      	strh	r1, [r0, #4]
 8003644:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003646:	4319      	orrs	r1, r3
 8003648:	8081      	strh	r1, [r0, #4]
 800364a:	4770      	bx	lr

0800364c <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800364c:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 800364e:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003650:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003652:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003656:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800365a:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 800365c:	1a0b      	subs	r3, r1, r0
 800365e:	4258      	negs	r0, r3
 8003660:	4158      	adcs	r0, r3
 8003662:	4770      	bx	lr

08003664 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003664:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8003666:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003668:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800366a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 800366e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003672:	4770      	bx	lr

08003674 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003674:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003676:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003678:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800367e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003680:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8003682:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8003684:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8003688:	b153      	cbz	r3, 80036a0 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800368a:	9b01      	ldr	r3, [sp, #4]
 800368c:	3314      	adds	r3, #20
 800368e:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003690:	9b01      	ldr	r3, [sp, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8003696:	bf0c      	ite	eq
 8003698:	2000      	moveq	r0, #0
 800369a:	2001      	movne	r0, #1
 800369c:	b002      	add	sp, #8
 800369e:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80036a0:	9b01      	ldr	r3, [sp, #4]
 80036a2:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80036a4:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	e7f2      	b.n	8003690 <I2C_GetFlagStatus+0x1c>
 80036aa:	bf00      	nop

080036ac <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80036ac:	43c9      	mvns	r1, r1
 80036ae:	b289      	uxth	r1, r1
 80036b0:	8281      	strh	r1, [r0, #20]
 80036b2:	4770      	bx	lr

080036b4 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036b4:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80036b6:	8a80      	ldrh	r0, [r0, #20]
 80036b8:	b280      	uxth	r0, r0
 80036ba:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036bc:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80036be:	d006      	beq.n	80036ce <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 80036c0:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80036c4:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80036c8:	bf0c      	ite	eq
 80036ca:	2000      	moveq	r0, #0
 80036cc:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80036ce:	4770      	bx	lr

080036d0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80036d0:	43c9      	mvns	r1, r1
 80036d2:	b289      	uxth	r1, r1
 80036d4:	8281      	strh	r1, [r0, #20]
 80036d6:	4770      	bx	lr

080036d8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80036d8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <SPI_I2S_DeInit+0x60>)
 80036dc:	4298      	cmp	r0, r3
 80036de:	d012      	beq.n	8003706 <SPI_I2S_DeInit+0x2e>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <SPI_I2S_DeInit+0x64>)
 80036e2:	4298      	cmp	r0, r3
 80036e4:	d01b      	beq.n	800371e <SPI_I2S_DeInit+0x46>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <SPI_I2S_DeInit+0x68>)
 80036e8:	4298      	cmp	r0, r3
 80036ea:	d000      	beq.n	80036ee <SPI_I2S_DeInit+0x16>
 80036ec:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80036ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036f2:	2101      	movs	r1, #1
 80036f4:	f7fe ff16 	bl	8002524 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80036f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036fc:	2100      	movs	r1, #0
    }
  }
}
 80036fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8003702:	f7fe bf0f 	b.w	8002524 <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003706:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800370a:	2101      	movs	r1, #1
 800370c:	f7fe ff16 	bl	800253c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8003710:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003714:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8003716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800371a:	f7fe bf0f 	b.w	800253c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800371e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003722:	2101      	movs	r1, #1
 8003724:	f7fe fefe 	bl	8002524 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8003728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800372c:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 800372e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8003732:	f7fe bef7 	b.w	8002524 <RCC_APB1PeriphResetCmd>
 8003736:	bf00      	nop
 8003738:	40013000 	.word	0x40013000
 800373c:	40003800 	.word	0x40003800
 8003740:	40003c00 	.word	0x40003c00

08003744 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8003744:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003748:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 800374c:	f8b1 9000 	ldrh.w	r9, [r1]
 8003750:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8003754:	890f      	ldrh	r7, [r1, #8]
 8003756:	894e      	ldrh	r6, [r1, #10]
 8003758:	898d      	ldrh	r5, [r1, #12]
 800375a:	89cc      	ldrh	r4, [r1, #14]
 800375c:	f8b1 c006 	ldrh.w	ip, [r1, #6]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003760:	8a0a      	ldrh	r2, [r1, #16]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003762:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003764:	ea4a 0109 	orr.w	r1, sl, r9
 8003768:	ea41 0108 	orr.w	r1, r1, r8
 800376c:	ea41 010c 	orr.w	r1, r1, ip
 8003770:	4339      	orrs	r1, r7
 8003772:	4331      	orrs	r1, r6
 8003774:	4329      	orrs	r1, r5
 8003776:	4321      	orrs	r1, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003778:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800377c:	430b      	orrs	r3, r1
 800377e:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8003780:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8003782:	8b83      	ldrh	r3, [r0, #28]
 8003784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
}
 800378e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003792:	8202      	strh	r2, [r0, #16]
}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8003798:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800379a:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800379c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037a0:	f023 030f 	bic.w	r3, r3, #15
 80037a4:	041b      	lsls	r3, r3, #16
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80037a6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80037aa:	0c1b      	lsrs	r3, r3, #16
  SPIx->I2SPR = 0x0002;
 80037ac:	2402      	movs	r4, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80037ae:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80037b0:	8404      	strh	r4, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80037b2:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80037b6:	42a2      	cmp	r2, r4
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80037b8:	fa1f fc8c 	uxth.w	ip, ip
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80037bc:	d04f      	beq.n	800385e <I2S_Init+0xc6>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <I2S_Init+0xe0>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80037c0:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80037c2:	689d      	ldr	r5, [r3, #8]
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	f04f 0920 	moveq.w	r9, #32
 80037cc:	f04f 0940 	movne.w	r9, #64	; 0x40
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80037d0:	022d      	lsls	r5, r5, #8
 80037d2:	d43f      	bmi.n	8003854 <I2S_Init+0xbc>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <I2S_Init+0xe0>)
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80037d6:	4f29      	ldr	r7, [pc, #164]	; (800387c <I2S_Init+0xe4>)
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80037d8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80037dc:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80037e0:	f8d3 a004 	ldr.w	sl, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80037e4:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80037e6:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80037ea:	f3c5 1888 	ubfx	r8, r5, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80037ee:	fbb7 f7fa 	udiv	r7, r7, sl
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80037f2:	f3c6 7602 	ubfx	r6, r6, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80037f6:	fb08 f707 	mul.w	r7, r8, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80037fe:	fbb7 f6f6 	udiv	r6, r7, r6
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8003802:	d02f      	beq.n	8003864 <I2S_Init+0xcc>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8003804:	fbb6 f5f9 	udiv	r5, r6, r9
 8003808:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800380c:	006d      	lsls	r5, r5, #1
 800380e:	fbb5 f2f2 	udiv	r2, r5, r2
 8003812:	3205      	adds	r2, #5
 8003814:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8003816:	4d1a      	ldr	r5, [pc, #104]	; (8003880 <I2S_Init+0xe8>)
 8003818:	fba5 6202 	umull	r6, r2, r5, r2
 800381c:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800381e:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8003820:	1eae      	subs	r6, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8003822:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8003826:	2efd      	cmp	r6, #253	; 0xfd
 8003828:	bf94      	ite	ls
 800382a:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 800382e:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003830:	880f      	ldrh	r7, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8003832:	884e      	ldrh	r6, [r1, #2]
 8003834:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003836:	ea4c 0107 	orr.w	r1, ip, r7
 800383a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800383e:	4331      	orrs	r1, r6
 8003840:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8003842:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8003844:	b289      	uxth	r1, r1
 8003846:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8003848:	b29b      	uxth	r3, r3
 800384a:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800384c:	8384      	strh	r4, [r0, #28]
}
 800384e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8003852:	4770      	bx	lr

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8003854:	689d      	ldr	r5, [r3, #8]
 8003856:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
 800385a:	609d      	str	r5, [r3, #8]
 800385c:	e7ba      	b.n	80037d4 <I2S_Init+0x3c>
 800385e:	888c      	ldrh	r4, [r1, #4]
 8003860:	88cb      	ldrh	r3, [r1, #6]
 8003862:	e7e5      	b.n	8003830 <I2S_Init+0x98>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8003864:	0a36      	lsrs	r6, r6, #8
 8003866:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800386a:	0076      	lsls	r6, r6, #1
 800386c:	fbb6 f2f2 	udiv	r2, r6, r2
 8003870:	3205      	adds	r2, #5
 8003872:	b292      	uxth	r2, r2
 8003874:	e7cf      	b.n	8003816 <I2S_Init+0x7e>
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	007a1200 	.word	0x007a1200
 8003880:	cccccccd 	.word	0xcccccccd

08003884 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8003884:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8003886:	2207      	movs	r2, #7
 8003888:	8202      	strh	r2, [r0, #16]
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800388a:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800388c:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800388e:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8003890:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8003892:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8003894:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8003896:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8003898:	81c3      	strh	r3, [r0, #14]
 800389a:	4770      	bx	lr

0800389c <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800389c:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800389e:	2202      	movs	r2, #2
 80038a0:	6082      	str	r2, [r0, #8]
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80038a2:	6003      	str	r3, [r0, #0]
 80038a4:	6043      	str	r3, [r0, #4]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80038a6:	8183      	strh	r3, [r0, #12]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80038ac:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038ae:	b929      	cbnz	r1, 80038bc <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80038b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	8003      	strh	r3, [r0, #0]
 80038ba:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	8003      	strh	r3, [r0, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop

080038c8 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80038c8:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80038ca:	b929      	cbnz	r1, 80038d8 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80038cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	8383      	strh	r3, [r0, #28]
 80038d6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038de:	8383      	strh	r3, [r0, #28]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop

080038e4 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 80038e4:	8803      	ldrh	r3, [r0, #0]
 80038e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 80038f0:	8803      	ldrh	r3, [r0, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4319      	orrs	r1, r3
 80038f6:	8001      	strh	r1, [r0, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop

080038fc <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80038fc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8003900:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8003902:	d005      	beq.n	8003910 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8003904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	8003      	strh	r3, [r0, #0]
 800390e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8003910:	b29b      	uxth	r3, r3
 8003912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003916:	8003      	strh	r3, [r0, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800391c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003920:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8003922:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8003924:	d004      	beq.n	8003930 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8003926:	b29b      	uxth	r3, r3
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	8003      	strh	r3, [r0, #0]
 800392e:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8003930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	8003      	strh	r3, [r0, #0]
 800393a:	4770      	bx	lr

0800393c <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800393c:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800393e:	b929      	cbnz	r1, 800394c <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	8083      	strh	r3, [r0, #4]
 800394a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800394c:	b29b      	uxth	r3, r3
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	8083      	strh	r3, [r0, #4]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop

08003958 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8003958:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800395a:	b929      	cbnz	r1, 8003968 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800395c:	f023 0310 	bic.w	r3, r3, #16
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	8083      	strh	r3, [r0, #4]
 8003966:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8003968:	b29b      	uxth	r3, r3
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	8083      	strh	r3, [r0, #4]
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8003974:	8b83      	ldrh	r3, [r0, #28]
 8003976:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800397a:	f023 030f 	bic.w	r3, r3, #15
 800397e:	041b      	lsls	r3, r3, #16
  I2Sxext->I2SPR = 0x0002;
 8003980:	2202      	movs	r2, #2
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8003986:	8402      	strh	r2, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8003988:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800398a:	880a      	ldrh	r2, [r1, #0]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800398c:	b430      	push	{r4, r5}
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800398e:	884d      	ldrh	r5, [r1, #2]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003990:	888c      	ldrh	r4, [r1, #4]
 8003992:	8989      	ldrh	r1, [r1, #12]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8003994:	b29b      	uxth	r3, r3
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003996:	432b      	orrs	r3, r5
 8003998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800399c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039a0:	4323      	orrs	r3, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80039a2:	b292      	uxth	r2, r2
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039a4:	430b      	orrs	r3, r1
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80039a6:	2a00      	cmp	r2, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039a8:	b29b      	uxth	r3, r3
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 80039aa:	bf14      	ite	ne
 80039ac:	2200      	movne	r2, #0
 80039ae:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039b2:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80039b4:	8383      	strh	r3, [r0, #28]
}
 80039b6:	bc30      	pop	{r4, r5}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80039bc:	8980      	ldrh	r0, [r0, #12]
}
 80039be:	b280      	uxth	r0, r0
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80039c4:	8181      	strh	r1, [r0, #12]
 80039c6:	4770      	bx	lr

080039c8 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80039c8:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039ca:	b929      	cbnz	r1, 80039d8 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80039cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	8003      	strh	r3, [r0, #0]
 80039d6:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039de:	8003      	strh	r3, [r0, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop

080039e4 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80039e4:	8803      	ldrh	r3, [r0, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ec:	8003      	strh	r3, [r0, #0]
 80039ee:	4770      	bx	lr

080039f0 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80039f0:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80039f2:	bf14      	ite	ne
 80039f4:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80039f6:	8a80      	ldrheq	r0, [r0, #20]
 80039f8:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 80039fa:	4770      	bx	lr

080039fc <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80039fc:	8a00      	ldrh	r0, [r0, #16]
}
 80039fe:	b280      	uxth	r0, r0
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8003a04:	8883      	ldrh	r3, [r0, #4]
 8003a06:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8003a08:	b91a      	cbnz	r2, 8003a12 <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8003a0a:	ea23 0101 	bic.w	r1, r3, r1
 8003a0e:	8081      	strh	r1, [r0, #4]
 8003a10:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8003a12:	4319      	orrs	r1, r3
 8003a14:	8081      	strh	r1, [r0, #4]
 8003a16:	4770      	bx	lr

08003a18 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	0909      	lsrs	r1, r1, #4
 8003a1c:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003a20:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003a22:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003a24:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8003a26:	b91a      	cbnz	r2, 8003a30 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8003a28:	ea23 0101 	bic.w	r1, r3, r1
 8003a2c:	8081      	strh	r1, [r0, #4]
 8003a2e:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003a30:	4319      	orrs	r1, r3
 8003a32:	8081      	strh	r1, [r0, #4]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003a38:	8903      	ldrh	r3, [r0, #8]
 8003a3a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2000      	moveq	r0, #0
 8003a40:	2001      	movne	r0, #1
 8003a42:	4770      	bx	lr

08003a44 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8003a44:	43c9      	mvns	r1, r1
 8003a46:	b289      	uxth	r1, r1
 8003a48:	8101      	strh	r1, [r0, #8]
 8003a4a:	4770      	bx	lr

08003a4c <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8003a4c:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8003a4e:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003a50:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003a52:	f001 030f 	and.w	r3, r1, #15
 8003a56:	2201      	movs	r2, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003a58:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003a5e:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8003a60:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003a62:	d005      	beq.n	8003a70 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8003a64:	0909      	lsrs	r1, r1, #4
 8003a66:	408a      	lsls	r2, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003a68:	4214      	tst	r4, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2000      	moveq	r0, #0
 8003a6e:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8003a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop

08003a78 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003a78:	f001 010f 	and.w	r1, r1, #15
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	fa03 f101 	lsl.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8003a82:	43c9      	mvns	r1, r1
 8003a84:	b289      	uxth	r1, r1
 8003a86:	8101      	strh	r1, [r0, #8]
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8003a8c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003a8e:	4d0f      	ldr	r5, [pc, #60]	; (8003acc <STM_EVAL_LEDInit+0x40>)
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8003a90:	4604      	mov	r4, r0
 8003a92:	b083      	sub	sp, #12
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003a94:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8003a98:	2101      	movs	r1, #1

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003a9a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003a9e:	f7fe fce1 	bl	8002464 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <STM_EVAL_LEDInit+0x44>)
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003aa4:	8a2b      	ldrh	r3, [r5, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003aa6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003aaa:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003aac:	2202      	movs	r2, #2
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003aae:	2301      	movs	r3, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003ab0:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003ab2:	4669      	mov	r1, sp
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003ab4:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003ab8:	f88d 3007 	strb.w	r3, [sp, #7]
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003abc:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003ac0:	f88d 2005 	strb.w	r2, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003ac4:	f7fe fad4 	bl	8002070 <GPIO_Init>
}
 8003ac8:	b003      	add	sp, #12
 8003aca:	bd30      	pop	{r4, r5, pc}
 8003acc:	0800577c 	.word	0x0800577c
 8003ad0:	2000002c 	.word	0x2000002c

08003ad4 <STM_EVAL_LEDOn>:
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <STM_EVAL_LEDOn+0x14>)
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <STM_EVAL_LEDOn+0x18>)
 8003ad8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003adc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003ae0:	8a12      	ldrh	r2, [r2, #16]
 8003ae2:	831a      	strh	r2, [r3, #24]
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	0800577c 	.word	0x0800577c
 8003aec:	2000002c 	.word	0x2000002c

08003af0 <STM_EVAL_LEDOff>:
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <STM_EVAL_LEDOff+0x14>)
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <STM_EVAL_LEDOff+0x18>)
 8003af4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003af8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003afc:	8a12      	ldrh	r2, [r2, #16]
 8003afe:	835a      	strh	r2, [r3, #26]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	0800577c 	.word	0x0800577c
 8003b08:	2000002c 	.word	0x2000002c

08003b0c <STM_EVAL_LEDToggle>:
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8003b0c:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <STM_EVAL_LEDToggle+0x18>)
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <STM_EVAL_LEDToggle+0x1c>)
 8003b10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003b14:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	8a01      	ldrh	r1, [r0, #16]
 8003b1c:	404a      	eors	r2, r1
 8003b1e:	615a      	str	r2, [r3, #20]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	0800577c 	.word	0x0800577c
 8003b28:	2000002c 	.word	0x2000002c

08003b2c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8003b2c:	b530      	push	{r4, r5, lr}
 8003b2e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8003b30:	2001      	movs	r0, #1
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8003b32:	b087      	sub	sp, #28
 8003b34:	460d      	mov	r5, r1
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8003b36:	4601      	mov	r1, r0
 8003b38:	f7fe fc94 	bl	8002464 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003b3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b40:	2101      	movs	r1, #1
 8003b42:	f7fe fcbf 	bl	80024c4 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8003b46:	ab06      	add	r3, sp, #24
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8003b48:	4918      	ldr	r1, [pc, #96]	; (8003bac <STM_EVAL_PBInit+0x80>)
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8003b4a:	2201      	movs	r2, #1
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8003b4c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8003b50:	f843 2d10 	str.w	r2, [r3, #-16]!
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8003b54:	6920      	ldr	r0, [r4, #16]
 8003b56:	4619      	mov	r1, r3
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003b58:	2400      	movs	r4, #0
 8003b5a:	f88d 400c 	strb.w	r4, [sp, #12]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003b5e:	f88d 400f 	strb.w	r4, [sp, #15]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8003b62:	f7fe fa85 	bl	8002070 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8003b66:	2d01      	cmp	r5, #1
 8003b68:	d001      	beq.n	8003b6e <STM_EVAL_PBInit+0x42>
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
  }
}
 8003b6a:	b007      	add	sp, #28
 8003b6c:	bd30      	pop	{r4, r5, pc}
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);

  if (Button_Mode == BUTTON_MODE_EXTI)
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff fa73 	bl	800305c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8003b76:	2308      	movs	r3, #8
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 8003b78:	a804      	add	r0, sp, #16
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8003b7a:	f88d 3015 	strb.w	r3, [sp, #21]
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8003b7e:	9504      	str	r5, [sp, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003b80:	f88d 4014 	strb.w	r4, [sp, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003b84:	f88d 5016 	strb.w	r5, [sp, #22]
    EXTI_Init(&EXTI_InitStructure);
 8003b88:	f7ff faa2 	bl	80030d0 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003b8c:	230f      	movs	r3, #15
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8003b8e:	2206      	movs	r2, #6
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8003b90:	a801      	add	r0, sp, #4

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003b92:	f88d 5007 	strb.w	r5, [sp, #7]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8003b96:	f88d 2004 	strb.w	r2, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003b9a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8003b9e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8003ba2:	f7ff fb13 	bl	80031cc <NVIC_Init>
  }
}
 8003ba6:	b007      	add	sp, #28
 8003ba8:	bd30      	pop	{r4, r5, pc}
 8003baa:	bf00      	nop
 8003bac:	2000002c 	.word	0x2000002c

08003bb0 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8003bb0:	b508      	push	{r3, lr}
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <STM_EVAL_PBGetState+0x14>)
 8003bb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003bb8:	2101      	movs	r1, #1
 8003bba:	6900      	ldr	r0, [r0, #16]
 8003bbc:	f7fe fad2 	bl	8002164 <GPIO_ReadInputDataBit>
}
 8003bc0:	bd08      	pop	{r3, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000002c 	.word	0x2000002c

08003bc8 <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8003bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8003bcc:	4d22      	ldr	r5, [pc, #136]	; (8003c58 <STM_EVAL_COMInit+0x90>)
 8003bce:	0084      	lsls	r4, r0, #2
 8003bd0:	192e      	adds	r6, r5, r4
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8003bd2:	4607      	mov	r7, r0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8003bd4:	6a33      	ldr	r3, [r6, #32]
 8003bd6:	69b0      	ldr	r0, [r6, #24]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8003bd8:	b082      	sub	sp, #8
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8003bda:	4318      	orrs	r0, r3
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8003bdc:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8003bde:	2101      	movs	r1, #1
 8003be0:	f7fe fc40 	bl	8002464 <RCC_AHB1PeriphClockCmd>

   /* Enable UART clock */
  RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 8003be4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8003be6:	2101      	movs	r1, #1
 8003be8:	f7fe fc6c 	bl	80024c4 <RCC_APB2PeriphClockCmd>
  
    /* Enable UART clock */
  //RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);	 

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <STM_EVAL_COMInit+0x94>)
 8003bee:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8003bf2:	441c      	add	r4, r3
 8003bf4:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8003bf6:	6960      	ldr	r0, [r4, #20]
 8003bf8:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8003bfc:	f7fe fad6 	bl	80021ac <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 8003c00:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8003c04:	69e0      	ldr	r0, [r4, #28]
 8003c06:	8f29      	ldrh	r1, [r5, #56]	; 0x38
 8003c08:	f7fe fad0 	bl	80021ac <GPIO_PinAFConfig>
  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 8003c0c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 8003c10:	6960      	ldr	r0, [r4, #20]
  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 8003c12:	9300      	str	r3, [sp, #0]
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003c14:	2602      	movs	r6, #2
  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003c16:	2701      	movs	r7, #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 8003c18:	4669      	mov	r1, sp

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003c20:	f88d 7007 	strb.w	r7, [sp, #7]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003c24:	f88d 6004 	strb.w	r6, [sp, #4]

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003c28:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 8003c2c:	f7fe fa20 	bl	8002070 <GPIO_Init>

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8003c30:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8003c34:	69e0      	ldr	r0, [r4, #28]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8003c36:	9300      	str	r3, [sp, #0]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8003c38:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003c3a:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8003c3e:	f7fe fa17 	bl	8002070 <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 8003c42:	4641      	mov	r1, r8
 8003c44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c46:	f7fe fd63 	bl	8002710 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 8003c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c4c:	4639      	mov	r1, r7
 8003c4e:	f7fe fde5 	bl	800281c <USART_Cmd>
}
 8003c52:	b002      	add	sp, #8
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c58:	0800577c 	.word	0x0800577c
 8003c5c:	2000002c 	.word	0x2000002c

08003c60 <SD_LowLevel_DeInit>:
  * @brief  DeInitializes the SDIO interface.
  * @param  None
  * @retval None
  */
void SD_LowLevel_DeInit(void)
{
 8003c60:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /*!< Disable SDIO Clock */
  SDIO_ClockCmd(DISABLE);
 8003c62:	2000      	movs	r0, #0
  * @brief  DeInitializes the SDIO interface.
  * @param  None
  * @retval None
  */
void SD_LowLevel_DeInit(void)
{
 8003c64:	b083      	sub	sp, #12
  SDIO_DeInit();
  
  /* Disable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
 8003c66:	4c23      	ldr	r4, [pc, #140]	; (8003cf4 <SD_LowLevel_DeInit+0x94>)
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
 8003c68:	4d23      	ldr	r5, [pc, #140]	; (8003cf8 <SD_LowLevel_DeInit+0x98>)
void SD_LowLevel_DeInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /*!< Disable SDIO Clock */
  SDIO_ClockCmd(DISABLE);
 8003c6a:	f7ff f901 	bl	8002e70 <SDIO_ClockCmd>
  
  /*!< Set Power State to OFF */
  SDIO_SetPowerState(SDIO_PowerState_OFF);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7ff f904 	bl	8002e7c <SDIO_SetPowerState>

  /*!< DeInitializes the SDIO peripheral */
  SDIO_DeInit();
 8003c74:	f7ff f8cc 	bl	8002e10 <SDIO_DeInit>
  
  /* Disable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
 8003c78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f7fe fc21 	bl	80024c4 <RCC_APB2PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
 8003c82:	4620      	mov	r0, r4
 8003c84:	2108      	movs	r1, #8
 8003c86:	2200      	movs	r2, #0
 8003c88:	f7fe fa90 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	2109      	movs	r1, #9
 8003c90:	2200      	movs	r2, #0
 8003c92:	f7fe fa8b 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8003c96:	4620      	mov	r0, r4
 8003c98:	210a      	movs	r1, #10
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f7fe fa86 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	210b      	movs	r1, #11
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f7fe fa81 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
 8003caa:	4620      	mov	r0, r4
 8003cac:	210c      	movs	r1, #12
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f7fe fa7c 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f7fe fa77 	bl	80021ac <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8003cbe:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003cc2:	2300      	movs	r3, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8003cc8:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003cca:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003cce:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003cd2:	f7fe f9cd 	bl	8002070 <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8003cda:	2304      	movs	r3, #4
 8003cdc:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003cde:	f7fe f9c7 	bl	8002070 <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4669      	mov	r1, sp
  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003cea:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003cec:	f7fe f9c0 	bl	8002070 <GPIO_Init>
}
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bd30      	pop	{r4, r5, pc}
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020c00 	.word	0x40020c00

08003cfc <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 8003cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 8003cfe:	4c2e      	ldr	r4, [pc, #184]	; (8003db8 <SD_LowLevel_Init+0xbc>)
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 8003d00:	4f2e      	ldr	r7, [pc, #184]	; (8003dbc <SD_LowLevel_Init+0xc0>)
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 8003d02:	b083      	sub	sp, #12
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 8003d04:	200e      	movs	r0, #14
 8003d06:	2101      	movs	r1, #1
 8003d08:	f7fe fbac 	bl	8002464 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	2108      	movs	r1, #8
 8003d10:	220c      	movs	r2, #12
 8003d12:	f7fe fa4b 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 8003d16:	4620      	mov	r0, r4
 8003d18:	2109      	movs	r1, #9
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	f7fe fa46 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 8003d20:	4620      	mov	r0, r4
 8003d22:	210a      	movs	r1, #10
 8003d24:	220c      	movs	r2, #12
 8003d26:	f7fe fa41 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	210b      	movs	r1, #11
 8003d2e:	220c      	movs	r2, #12
 8003d30:	f7fe fa3c 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 8003d34:	210c      	movs	r1, #12
 8003d36:	4620      	mov	r0, r4
 8003d38:	460a      	mov	r2, r1
 8003d3a:	f7fe fa37 	bl	80021ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 8003d3e:	4638      	mov	r0, r7
 8003d40:	2102      	movs	r1, #2
 8003d42:	220c      	movs	r2, #12
 8003d44:	f7fe fa32 	bl	80021ac <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8003d48:	2501      	movs	r5, #1
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8003d4a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003d4e:	2600      	movs	r6, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d50:	4620      	mov	r0, r4
 8003d52:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003d54:	2302      	movs	r3, #2
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8003d56:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003d58:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8003d5c:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003d60:	f88d 5007 	strb.w	r5, [sp, #7]

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003d64:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d68:	f7fe f982 	bl	8002070 <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8003d70:	2304      	movs	r3, #4
 8003d72:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003d74:	f7fe f97c 	bl	8002070 <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4669      	mov	r1, sp
  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d80:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003d82:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d86:	f7fe f973 	bl	8002070 <GPIO_Init>
  
  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8003d8e:	4669      	mov	r1, sp
 8003d90:	480b      	ldr	r0, [pc, #44]	; (8003dc0 <SD_LowLevel_Init+0xc4>)
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  
  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8003d92:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003d94:	f88d 6004 	strb.w	r6, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003d98:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8003d9c:	f7fe f968 	bl	8002070 <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 8003da0:	4629      	mov	r1, r5
 8003da2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003da6:	f7fe fb8d 	bl	80024c4 <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 8003daa:	4629      	mov	r1, r5
 8003dac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003db0:	f7fe fb58 	bl	8002464 <RCC_AHB1PeriphClockCmd>
}
 8003db4:	b003      	add	sp, #12
 8003db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40020400 	.word	0x40020400

08003dc4 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8003dc8:	4c26      	ldr	r4, [pc, #152]	; (8003e64 <SD_LowLevel_DMA_TxConfig+0xa0>)

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8003dca:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003e68 <SD_LowLevel_DMA_TxConfig+0xa4>
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 8003dce:	b091      	sub	sp, #68	; 0x44
 8003dd0:	4605      	mov	r5, r0
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8003dd2:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7fe ff9c 	bl	8002d14 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8003ddc:	4620      	mov	r0, r4
 8003dde:	2100      	movs	r1, #0
 8003de0:	f7fe ff2e 	bl	8002c40 <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7fe fe49 	bl	8002a7c <DMA_DeInit>
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003dea:	2704      	movs	r7, #4
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8003dec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8003df0:	2300      	movs	r3, #0
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003df2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003df6:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003dfa:	4620      	mov	r0, r4
  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 8003dfc:	9503      	str	r5, [sp, #12]
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8003dfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8003e02:	9101      	str	r1, [sp, #4]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8003e04:	f04f 0b40 	mov.w	fp, #64	; 0x40
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003e08:	eb0d 0107 	add.w	r1, sp, r7
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003e0c:	f44f 6980 	mov.w	r9, #1024	; 0x400
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8003e10:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003e14:	2603      	movs	r6, #3
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8003e16:	f44f 0500 	mov.w	r5, #8388608	; 0x800000

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8003e1a:	9305      	str	r3, [sp, #20]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003e1c:	9306      	str	r3, [sp, #24]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003e1e:	930a      	str	r3, [sp, #40]	; 0x28
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003e20:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003e24:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8003e28:	920f      	str	r2, [sp, #60]	; 0x3c

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8003e2a:	f8cd a008 	str.w	sl, [sp, #8]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8003e2e:	f8cd b010 	str.w	fp, [sp, #16]
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003e32:	f8cd 901c 	str.w	r9, [sp, #28]
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8003e36:	f8cd 8020 	str.w	r8, [sp, #32]
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003e3a:	970c      	str	r7, [sp, #48]	; 0x30
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003e3c:	960d      	str	r6, [sp, #52]	; 0x34
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8003e3e:	950e      	str	r5, [sp, #56]	; 0x38
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003e40:	f7fe feb4 	bl	8002bac <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8003e44:	2201      	movs	r2, #1
 8003e46:	4620      	mov	r0, r4
 8003e48:	2110      	movs	r1, #16
 8003e4a:	f7fe ff7d 	bl	8002d48 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8003e4e:	4620      	mov	r0, r4
 8003e50:	2120      	movs	r1, #32
 8003e52:	f7fe ff09 	bl	8002c68 <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8003e56:	4620      	mov	r0, r4
 8003e58:	2101      	movs	r1, #1
 8003e5a:	f7fe fef1 	bl	8002c40 <DMA_Cmd>
    
}
 8003e5e:	b011      	add	sp, #68	; 0x44
 8003e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e64:	40026458 	.word	0x40026458
 8003e68:	40012c80 	.word	0x40012c80

08003e6c <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8003e70:	4c25      	ldr	r4, [pc, #148]	; (8003f08 <SD_LowLevel_DMA_RxConfig+0x9c>)

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8003e72:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003f0c <SD_LowLevel_DMA_RxConfig+0xa0>
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8003e76:	b091      	sub	sp, #68	; 0x44
 8003e78:	4605      	mov	r5, r0
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8003e7a:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7fe ff48 	bl	8002d14 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8003e84:	4620      	mov	r0, r4
 8003e86:	2100      	movs	r1, #0
 8003e88:	f7fe feda 	bl	8002c40 <DMA_Cmd>
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003e8c:	2704      	movs	r7, #4

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f7fe fdf4 	bl	8002a7c <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8003e94:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003e98:	2300      	movs	r3, #0
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003e9a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003e9e:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003ea2:	4620      	mov	r0, r4
  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 8003ea4:	9503      	str	r5, [sp, #12]
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8003ea6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003eaa:	eb0d 0107 	add.w	r1, sp, r7
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003eae:	f44f 6b80 	mov.w	fp, #1024	; 0x400
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8003eb2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003eb6:	2603      	movs	r6, #3
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8003eb8:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003ebc:	9304      	str	r3, [sp, #16]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8003ebe:	9305      	str	r3, [sp, #20]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003ec0:	9306      	str	r3, [sp, #24]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003ec2:	930a      	str	r3, [sp, #40]	; 0x28
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003ec4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003ec8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8003ecc:	920f      	str	r2, [sp, #60]	; 0x3c
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8003ece:	f8cd a004 	str.w	sl, [sp, #4]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8003ed2:	f8cd 9008 	str.w	r9, [sp, #8]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  SDDMA_InitStructure.DMA_BufferSize = 0;
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003ed6:	f8cd b01c 	str.w	fp, [sp, #28]
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8003eda:	f8cd 8020 	str.w	r8, [sp, #32]
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003ede:	970c      	str	r7, [sp, #48]	; 0x30
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003ee0:	960d      	str	r6, [sp, #52]	; 0x34
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8003ee2:	950e      	str	r5, [sp, #56]	; 0x38
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003ee4:	f7fe fe62 	bl	8002bac <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4620      	mov	r0, r4
 8003eec:	2110      	movs	r1, #16
 8003eee:	f7fe ff2b 	bl	8002d48 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	f7fe feb7 	bl	8002c68 <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8003efa:	4620      	mov	r0, r4
 8003efc:	2101      	movs	r1, #1
 8003efe:	f7fe fe9f 	bl	8002c40 <DMA_Cmd>
}
 8003f02:	b011      	add	sp, #68	; 0x44
 8003f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f08:	40026458 	.word	0x40026458
 8003f0c:	40012c80 	.word	0x40012c80
 8003f10:	08005ab4 	.word	0x08005ab4
 8003f14:	20000000 	.word	0x20000000
 8003f18:	2000089c 	.word	0x2000089c
 8003f1c:	200008a0 	.word	0x200008a0
 8003f20:	2000092c 	.word	0x2000092c

08003f24 <__aeabi_drsub>:
 8003f24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003f28:	e002      	b.n	8003f30 <__adddf3>
 8003f2a:	bf00      	nop

08003f2c <__aeabi_dsub>:
 8003f2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003f30 <__adddf3>:
 8003f30:	b530      	push	{r4, r5, lr}
 8003f32:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003f36:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003f3a:	ea94 0f05 	teq	r4, r5
 8003f3e:	bf08      	it	eq
 8003f40:	ea90 0f02 	teqeq	r0, r2
 8003f44:	bf1f      	itttt	ne
 8003f46:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003f4a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003f4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003f52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003f56:	f000 80e2 	beq.w	800411e <__adddf3+0x1ee>
 8003f5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003f5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003f62:	bfb8      	it	lt
 8003f64:	426d      	neglt	r5, r5
 8003f66:	dd0c      	ble.n	8003f82 <__adddf3+0x52>
 8003f68:	442c      	add	r4, r5
 8003f6a:	ea80 0202 	eor.w	r2, r0, r2
 8003f6e:	ea81 0303 	eor.w	r3, r1, r3
 8003f72:	ea82 0000 	eor.w	r0, r2, r0
 8003f76:	ea83 0101 	eor.w	r1, r3, r1
 8003f7a:	ea80 0202 	eor.w	r2, r0, r2
 8003f7e:	ea81 0303 	eor.w	r3, r1, r3
 8003f82:	2d36      	cmp	r5, #54	; 0x36
 8003f84:	bf88      	it	hi
 8003f86:	bd30      	pophi	{r4, r5, pc}
 8003f88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003f8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003f90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003f94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003f98:	d002      	beq.n	8003fa0 <__adddf3+0x70>
 8003f9a:	4240      	negs	r0, r0
 8003f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003fa0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003fa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003fa8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003fac:	d002      	beq.n	8003fb4 <__adddf3+0x84>
 8003fae:	4252      	negs	r2, r2
 8003fb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003fb4:	ea94 0f05 	teq	r4, r5
 8003fb8:	f000 80a7 	beq.w	800410a <__adddf3+0x1da>
 8003fbc:	f1a4 0401 	sub.w	r4, r4, #1
 8003fc0:	f1d5 0e20 	rsbs	lr, r5, #32
 8003fc4:	db0d      	blt.n	8003fe2 <__adddf3+0xb2>
 8003fc6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003fca:	fa22 f205 	lsr.w	r2, r2, r5
 8003fce:	1880      	adds	r0, r0, r2
 8003fd0:	f141 0100 	adc.w	r1, r1, #0
 8003fd4:	fa03 f20e 	lsl.w	r2, r3, lr
 8003fd8:	1880      	adds	r0, r0, r2
 8003fda:	fa43 f305 	asr.w	r3, r3, r5
 8003fde:	4159      	adcs	r1, r3
 8003fe0:	e00e      	b.n	8004000 <__adddf3+0xd0>
 8003fe2:	f1a5 0520 	sub.w	r5, r5, #32
 8003fe6:	f10e 0e20 	add.w	lr, lr, #32
 8003fea:	2a01      	cmp	r2, #1
 8003fec:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003ff0:	bf28      	it	cs
 8003ff2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003ff6:	fa43 f305 	asr.w	r3, r3, r5
 8003ffa:	18c0      	adds	r0, r0, r3
 8003ffc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004004:	d507      	bpl.n	8004016 <__adddf3+0xe6>
 8004006:	f04f 0e00 	mov.w	lr, #0
 800400a:	f1dc 0c00 	rsbs	ip, ip, #0
 800400e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004012:	eb6e 0101 	sbc.w	r1, lr, r1
 8004016:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800401a:	d31b      	bcc.n	8004054 <__adddf3+0x124>
 800401c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004020:	d30c      	bcc.n	800403c <__adddf3+0x10c>
 8004022:	0849      	lsrs	r1, r1, #1
 8004024:	ea5f 0030 	movs.w	r0, r0, rrx
 8004028:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800402c:	f104 0401 	add.w	r4, r4, #1
 8004030:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004034:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004038:	f080 809a 	bcs.w	8004170 <__adddf3+0x240>
 800403c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004040:	bf08      	it	eq
 8004042:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004046:	f150 0000 	adcs.w	r0, r0, #0
 800404a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800404e:	ea41 0105 	orr.w	r1, r1, r5
 8004052:	bd30      	pop	{r4, r5, pc}
 8004054:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004058:	4140      	adcs	r0, r0
 800405a:	eb41 0101 	adc.w	r1, r1, r1
 800405e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004062:	f1a4 0401 	sub.w	r4, r4, #1
 8004066:	d1e9      	bne.n	800403c <__adddf3+0x10c>
 8004068:	f091 0f00 	teq	r1, #0
 800406c:	bf04      	itt	eq
 800406e:	4601      	moveq	r1, r0
 8004070:	2000      	moveq	r0, #0
 8004072:	fab1 f381 	clz	r3, r1
 8004076:	bf08      	it	eq
 8004078:	3320      	addeq	r3, #32
 800407a:	f1a3 030b 	sub.w	r3, r3, #11
 800407e:	f1b3 0220 	subs.w	r2, r3, #32
 8004082:	da0c      	bge.n	800409e <__adddf3+0x16e>
 8004084:	320c      	adds	r2, #12
 8004086:	dd08      	ble.n	800409a <__adddf3+0x16a>
 8004088:	f102 0c14 	add.w	ip, r2, #20
 800408c:	f1c2 020c 	rsb	r2, r2, #12
 8004090:	fa01 f00c 	lsl.w	r0, r1, ip
 8004094:	fa21 f102 	lsr.w	r1, r1, r2
 8004098:	e00c      	b.n	80040b4 <__adddf3+0x184>
 800409a:	f102 0214 	add.w	r2, r2, #20
 800409e:	bfd8      	it	le
 80040a0:	f1c2 0c20 	rsble	ip, r2, #32
 80040a4:	fa01 f102 	lsl.w	r1, r1, r2
 80040a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80040ac:	bfdc      	itt	le
 80040ae:	ea41 010c 	orrle.w	r1, r1, ip
 80040b2:	4090      	lslle	r0, r2
 80040b4:	1ae4      	subs	r4, r4, r3
 80040b6:	bfa2      	ittt	ge
 80040b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80040bc:	4329      	orrge	r1, r5
 80040be:	bd30      	popge	{r4, r5, pc}
 80040c0:	ea6f 0404 	mvn.w	r4, r4
 80040c4:	3c1f      	subs	r4, #31
 80040c6:	da1c      	bge.n	8004102 <__adddf3+0x1d2>
 80040c8:	340c      	adds	r4, #12
 80040ca:	dc0e      	bgt.n	80040ea <__adddf3+0x1ba>
 80040cc:	f104 0414 	add.w	r4, r4, #20
 80040d0:	f1c4 0220 	rsb	r2, r4, #32
 80040d4:	fa20 f004 	lsr.w	r0, r0, r4
 80040d8:	fa01 f302 	lsl.w	r3, r1, r2
 80040dc:	ea40 0003 	orr.w	r0, r0, r3
 80040e0:	fa21 f304 	lsr.w	r3, r1, r4
 80040e4:	ea45 0103 	orr.w	r1, r5, r3
 80040e8:	bd30      	pop	{r4, r5, pc}
 80040ea:	f1c4 040c 	rsb	r4, r4, #12
 80040ee:	f1c4 0220 	rsb	r2, r4, #32
 80040f2:	fa20 f002 	lsr.w	r0, r0, r2
 80040f6:	fa01 f304 	lsl.w	r3, r1, r4
 80040fa:	ea40 0003 	orr.w	r0, r0, r3
 80040fe:	4629      	mov	r1, r5
 8004100:	bd30      	pop	{r4, r5, pc}
 8004102:	fa21 f004 	lsr.w	r0, r1, r4
 8004106:	4629      	mov	r1, r5
 8004108:	bd30      	pop	{r4, r5, pc}
 800410a:	f094 0f00 	teq	r4, #0
 800410e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004112:	bf06      	itte	eq
 8004114:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004118:	3401      	addeq	r4, #1
 800411a:	3d01      	subne	r5, #1
 800411c:	e74e      	b.n	8003fbc <__adddf3+0x8c>
 800411e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004122:	bf18      	it	ne
 8004124:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004128:	d029      	beq.n	800417e <__adddf3+0x24e>
 800412a:	ea94 0f05 	teq	r4, r5
 800412e:	bf08      	it	eq
 8004130:	ea90 0f02 	teqeq	r0, r2
 8004134:	d005      	beq.n	8004142 <__adddf3+0x212>
 8004136:	ea54 0c00 	orrs.w	ip, r4, r0
 800413a:	bf04      	itt	eq
 800413c:	4619      	moveq	r1, r3
 800413e:	4610      	moveq	r0, r2
 8004140:	bd30      	pop	{r4, r5, pc}
 8004142:	ea91 0f03 	teq	r1, r3
 8004146:	bf1e      	ittt	ne
 8004148:	2100      	movne	r1, #0
 800414a:	2000      	movne	r0, #0
 800414c:	bd30      	popne	{r4, r5, pc}
 800414e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004152:	d105      	bne.n	8004160 <__adddf3+0x230>
 8004154:	0040      	lsls	r0, r0, #1
 8004156:	4149      	adcs	r1, r1
 8004158:	bf28      	it	cs
 800415a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004164:	bf3c      	itt	cc
 8004166:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800416a:	bd30      	popcc	{r4, r5, pc}
 800416c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004170:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	bd30      	pop	{r4, r5, pc}
 800417e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004182:	bf1a      	itte	ne
 8004184:	4619      	movne	r1, r3
 8004186:	4610      	movne	r0, r2
 8004188:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800418c:	bf1c      	itt	ne
 800418e:	460b      	movne	r3, r1
 8004190:	4602      	movne	r2, r0
 8004192:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004196:	bf06      	itte	eq
 8004198:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800419c:	ea91 0f03 	teqeq	r1, r3
 80041a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80041a4:	bd30      	pop	{r4, r5, pc}
 80041a6:	bf00      	nop

080041a8 <__aeabi_ui2d>:
 80041a8:	f090 0f00 	teq	r0, #0
 80041ac:	bf04      	itt	eq
 80041ae:	2100      	moveq	r1, #0
 80041b0:	4770      	bxeq	lr
 80041b2:	b530      	push	{r4, r5, lr}
 80041b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80041b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80041bc:	f04f 0500 	mov.w	r5, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	e750      	b.n	8004068 <__adddf3+0x138>
 80041c6:	bf00      	nop

080041c8 <__aeabi_i2d>:
 80041c8:	f090 0f00 	teq	r0, #0
 80041cc:	bf04      	itt	eq
 80041ce:	2100      	moveq	r1, #0
 80041d0:	4770      	bxeq	lr
 80041d2:	b530      	push	{r4, r5, lr}
 80041d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80041d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80041dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80041e0:	bf48      	it	mi
 80041e2:	4240      	negmi	r0, r0
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	e73e      	b.n	8004068 <__adddf3+0x138>
 80041ea:	bf00      	nop

080041ec <__aeabi_f2d>:
 80041ec:	0042      	lsls	r2, r0, #1
 80041ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80041f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80041f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80041fa:	bf1f      	itttt	ne
 80041fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004200:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004204:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004208:	4770      	bxne	lr
 800420a:	f092 0f00 	teq	r2, #0
 800420e:	bf14      	ite	ne
 8004210:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004214:	4770      	bxeq	lr
 8004216:	b530      	push	{r4, r5, lr}
 8004218:	f44f 7460 	mov.w	r4, #896	; 0x380
 800421c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004224:	e720      	b.n	8004068 <__adddf3+0x138>
 8004226:	bf00      	nop

08004228 <__aeabi_ul2d>:
 8004228:	ea50 0201 	orrs.w	r2, r0, r1
 800422c:	bf08      	it	eq
 800422e:	4770      	bxeq	lr
 8004230:	b530      	push	{r4, r5, lr}
 8004232:	f04f 0500 	mov.w	r5, #0
 8004236:	e00a      	b.n	800424e <__aeabi_l2d+0x16>

08004238 <__aeabi_l2d>:
 8004238:	ea50 0201 	orrs.w	r2, r0, r1
 800423c:	bf08      	it	eq
 800423e:	4770      	bxeq	lr
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004246:	d502      	bpl.n	800424e <__aeabi_l2d+0x16>
 8004248:	4240      	negs	r0, r0
 800424a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800424e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004252:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004256:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800425a:	f43f aedc 	beq.w	8004016 <__adddf3+0xe6>
 800425e:	f04f 0203 	mov.w	r2, #3
 8004262:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004266:	bf18      	it	ne
 8004268:	3203      	addne	r2, #3
 800426a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800426e:	bf18      	it	ne
 8004270:	3203      	addne	r2, #3
 8004272:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004276:	f1c2 0320 	rsb	r3, r2, #32
 800427a:	fa00 fc03 	lsl.w	ip, r0, r3
 800427e:	fa20 f002 	lsr.w	r0, r0, r2
 8004282:	fa01 fe03 	lsl.w	lr, r1, r3
 8004286:	ea40 000e 	orr.w	r0, r0, lr
 800428a:	fa21 f102 	lsr.w	r1, r1, r2
 800428e:	4414      	add	r4, r2
 8004290:	e6c1      	b.n	8004016 <__adddf3+0xe6>
 8004292:	bf00      	nop

08004294 <__aeabi_dmul>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800429a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800429e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80042a2:	bf1d      	ittte	ne
 80042a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80042a8:	ea94 0f0c 	teqne	r4, ip
 80042ac:	ea95 0f0c 	teqne	r5, ip
 80042b0:	f000 f8de 	bleq	8004470 <__aeabi_dmul+0x1dc>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea81 0603 	eor.w	r6, r1, r3
 80042ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80042be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80042c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80042c6:	bf18      	it	ne
 80042c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80042cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80042d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d4:	d038      	beq.n	8004348 <__aeabi_dmul+0xb4>
 80042d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80042da:	f04f 0500 	mov.w	r5, #0
 80042de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80042e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80042e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80042ea:	f04f 0600 	mov.w	r6, #0
 80042ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80042f2:	f09c 0f00 	teq	ip, #0
 80042f6:	bf18      	it	ne
 80042f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80042fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004300:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004304:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004308:	d204      	bcs.n	8004314 <__aeabi_dmul+0x80>
 800430a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800430e:	416d      	adcs	r5, r5
 8004310:	eb46 0606 	adc.w	r6, r6, r6
 8004314:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004318:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800431c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004320:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004324:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004328:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800432c:	bf88      	it	hi
 800432e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004332:	d81e      	bhi.n	8004372 <__aeabi_dmul+0xde>
 8004334:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004338:	bf08      	it	eq
 800433a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800433e:	f150 0000 	adcs.w	r0, r0, #0
 8004342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800434c:	ea46 0101 	orr.w	r1, r6, r1
 8004350:	ea40 0002 	orr.w	r0, r0, r2
 8004354:	ea81 0103 	eor.w	r1, r1, r3
 8004358:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800435c:	bfc2      	ittt	gt
 800435e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004362:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004366:	bd70      	popgt	{r4, r5, r6, pc}
 8004368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800436c:	f04f 0e00 	mov.w	lr, #0
 8004370:	3c01      	subs	r4, #1
 8004372:	f300 80ab 	bgt.w	80044cc <__aeabi_dmul+0x238>
 8004376:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800437a:	bfde      	ittt	le
 800437c:	2000      	movle	r0, #0
 800437e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004382:	bd70      	pople	{r4, r5, r6, pc}
 8004384:	f1c4 0400 	rsb	r4, r4, #0
 8004388:	3c20      	subs	r4, #32
 800438a:	da35      	bge.n	80043f8 <__aeabi_dmul+0x164>
 800438c:	340c      	adds	r4, #12
 800438e:	dc1b      	bgt.n	80043c8 <__aeabi_dmul+0x134>
 8004390:	f104 0414 	add.w	r4, r4, #20
 8004394:	f1c4 0520 	rsb	r5, r4, #32
 8004398:	fa00 f305 	lsl.w	r3, r0, r5
 800439c:	fa20 f004 	lsr.w	r0, r0, r4
 80043a0:	fa01 f205 	lsl.w	r2, r1, r5
 80043a4:	ea40 0002 	orr.w	r0, r0, r2
 80043a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80043ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80043b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80043b4:	fa21 f604 	lsr.w	r6, r1, r4
 80043b8:	eb42 0106 	adc.w	r1, r2, r6
 80043bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80043c0:	bf08      	it	eq
 80043c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f1c4 040c 	rsb	r4, r4, #12
 80043cc:	f1c4 0520 	rsb	r5, r4, #32
 80043d0:	fa00 f304 	lsl.w	r3, r0, r4
 80043d4:	fa20 f005 	lsr.w	r0, r0, r5
 80043d8:	fa01 f204 	lsl.w	r2, r1, r4
 80043dc:	ea40 0002 	orr.w	r0, r0, r2
 80043e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80043e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80043e8:	f141 0100 	adc.w	r1, r1, #0
 80043ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80043f0:	bf08      	it	eq
 80043f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f1c4 0520 	rsb	r5, r4, #32
 80043fc:	fa00 f205 	lsl.w	r2, r0, r5
 8004400:	ea4e 0e02 	orr.w	lr, lr, r2
 8004404:	fa20 f304 	lsr.w	r3, r0, r4
 8004408:	fa01 f205 	lsl.w	r2, r1, r5
 800440c:	ea43 0302 	orr.w	r3, r3, r2
 8004410:	fa21 f004 	lsr.w	r0, r1, r4
 8004414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004418:	fa21 f204 	lsr.w	r2, r1, r4
 800441c:	ea20 0002 	bic.w	r0, r0, r2
 8004420:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004424:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004428:	bf08      	it	eq
 800442a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f094 0f00 	teq	r4, #0
 8004434:	d10f      	bne.n	8004456 <__aeabi_dmul+0x1c2>
 8004436:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800443a:	0040      	lsls	r0, r0, #1
 800443c:	eb41 0101 	adc.w	r1, r1, r1
 8004440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004444:	bf08      	it	eq
 8004446:	3c01      	subeq	r4, #1
 8004448:	d0f7      	beq.n	800443a <__aeabi_dmul+0x1a6>
 800444a:	ea41 0106 	orr.w	r1, r1, r6
 800444e:	f095 0f00 	teq	r5, #0
 8004452:	bf18      	it	ne
 8004454:	4770      	bxne	lr
 8004456:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	eb43 0303 	adc.w	r3, r3, r3
 8004460:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004464:	bf08      	it	eq
 8004466:	3d01      	subeq	r5, #1
 8004468:	d0f7      	beq.n	800445a <__aeabi_dmul+0x1c6>
 800446a:	ea43 0306 	orr.w	r3, r3, r6
 800446e:	4770      	bx	lr
 8004470:	ea94 0f0c 	teq	r4, ip
 8004474:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004478:	bf18      	it	ne
 800447a:	ea95 0f0c 	teqne	r5, ip
 800447e:	d00c      	beq.n	800449a <__aeabi_dmul+0x206>
 8004480:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004484:	bf18      	it	ne
 8004486:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800448a:	d1d1      	bne.n	8004430 <__aeabi_dmul+0x19c>
 800448c:	ea81 0103 	eor.w	r1, r1, r3
 8004490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	bd70      	pop	{r4, r5, r6, pc}
 800449a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800449e:	bf06      	itte	eq
 80044a0:	4610      	moveq	r0, r2
 80044a2:	4619      	moveq	r1, r3
 80044a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80044a8:	d019      	beq.n	80044de <__aeabi_dmul+0x24a>
 80044aa:	ea94 0f0c 	teq	r4, ip
 80044ae:	d102      	bne.n	80044b6 <__aeabi_dmul+0x222>
 80044b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80044b4:	d113      	bne.n	80044de <__aeabi_dmul+0x24a>
 80044b6:	ea95 0f0c 	teq	r5, ip
 80044ba:	d105      	bne.n	80044c8 <__aeabi_dmul+0x234>
 80044bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80044c0:	bf1c      	itt	ne
 80044c2:	4610      	movne	r0, r2
 80044c4:	4619      	movne	r1, r3
 80044c6:	d10a      	bne.n	80044de <__aeabi_dmul+0x24a>
 80044c8:	ea81 0103 	eor.w	r1, r1, r3
 80044cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80044d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80044d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044d8:	f04f 0000 	mov.w	r0, #0
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80044e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80044e6:	bd70      	pop	{r4, r5, r6, pc}

080044e8 <__aeabi_ddiv>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80044ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80044f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80044f6:	bf1d      	ittte	ne
 80044f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80044fc:	ea94 0f0c 	teqne	r4, ip
 8004500:	ea95 0f0c 	teqne	r5, ip
 8004504:	f000 f8a7 	bleq	8004656 <__aeabi_ddiv+0x16e>
 8004508:	eba4 0405 	sub.w	r4, r4, r5
 800450c:	ea81 0e03 	eor.w	lr, r1, r3
 8004510:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004514:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004518:	f000 8088 	beq.w	800462c <__aeabi_ddiv+0x144>
 800451c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004520:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004524:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004528:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800452c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004530:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004534:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004538:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800453c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004540:	429d      	cmp	r5, r3
 8004542:	bf08      	it	eq
 8004544:	4296      	cmpeq	r6, r2
 8004546:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800454a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800454e:	d202      	bcs.n	8004556 <__aeabi_ddiv+0x6e>
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	ea4f 0232 	mov.w	r2, r2, rrx
 8004556:	1ab6      	subs	r6, r6, r2
 8004558:	eb65 0503 	sbc.w	r5, r5, r3
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	ea4f 0232 	mov.w	r2, r2, rrx
 8004562:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004566:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800456a:	ebb6 0e02 	subs.w	lr, r6, r2
 800456e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004572:	bf22      	ittt	cs
 8004574:	1ab6      	subcs	r6, r6, r2
 8004576:	4675      	movcs	r5, lr
 8004578:	ea40 000c 	orrcs.w	r0, r0, ip
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	ea4f 0232 	mov.w	r2, r2, rrx
 8004582:	ebb6 0e02 	subs.w	lr, r6, r2
 8004586:	eb75 0e03 	sbcs.w	lr, r5, r3
 800458a:	bf22      	ittt	cs
 800458c:	1ab6      	subcs	r6, r6, r2
 800458e:	4675      	movcs	r5, lr
 8004590:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	ea4f 0232 	mov.w	r2, r2, rrx
 800459a:	ebb6 0e02 	subs.w	lr, r6, r2
 800459e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80045a2:	bf22      	ittt	cs
 80045a4:	1ab6      	subcs	r6, r6, r2
 80045a6:	4675      	movcs	r5, lr
 80045a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80045b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80045b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80045ba:	bf22      	ittt	cs
 80045bc:	1ab6      	subcs	r6, r6, r2
 80045be:	4675      	movcs	r5, lr
 80045c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80045c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80045c8:	d018      	beq.n	80045fc <__aeabi_ddiv+0x114>
 80045ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80045ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80045d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80045d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80045da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80045de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80045e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80045e6:	d1c0      	bne.n	800456a <__aeabi_ddiv+0x82>
 80045e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80045ec:	d10b      	bne.n	8004606 <__aeabi_ddiv+0x11e>
 80045ee:	ea41 0100 	orr.w	r1, r1, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80045fa:	e7b6      	b.n	800456a <__aeabi_ddiv+0x82>
 80045fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004600:	bf04      	itt	eq
 8004602:	4301      	orreq	r1, r0
 8004604:	2000      	moveq	r0, #0
 8004606:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800460a:	bf88      	it	hi
 800460c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004610:	f63f aeaf 	bhi.w	8004372 <__aeabi_dmul+0xde>
 8004614:	ebb5 0c03 	subs.w	ip, r5, r3
 8004618:	bf04      	itt	eq
 800461a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800461e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004622:	f150 0000 	adcs.w	r0, r0, #0
 8004626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004630:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004634:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004638:	bfc2      	ittt	gt
 800463a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800463e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004642:	bd70      	popgt	{r4, r5, r6, pc}
 8004644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004648:	f04f 0e00 	mov.w	lr, #0
 800464c:	3c01      	subs	r4, #1
 800464e:	e690      	b.n	8004372 <__aeabi_dmul+0xde>
 8004650:	ea45 0e06 	orr.w	lr, r5, r6
 8004654:	e68d      	b.n	8004372 <__aeabi_dmul+0xde>
 8004656:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800465a:	ea94 0f0c 	teq	r4, ip
 800465e:	bf08      	it	eq
 8004660:	ea95 0f0c 	teqeq	r5, ip
 8004664:	f43f af3b 	beq.w	80044de <__aeabi_dmul+0x24a>
 8004668:	ea94 0f0c 	teq	r4, ip
 800466c:	d10a      	bne.n	8004684 <__aeabi_ddiv+0x19c>
 800466e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004672:	f47f af34 	bne.w	80044de <__aeabi_dmul+0x24a>
 8004676:	ea95 0f0c 	teq	r5, ip
 800467a:	f47f af25 	bne.w	80044c8 <__aeabi_dmul+0x234>
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	e72c      	b.n	80044de <__aeabi_dmul+0x24a>
 8004684:	ea95 0f0c 	teq	r5, ip
 8004688:	d106      	bne.n	8004698 <__aeabi_ddiv+0x1b0>
 800468a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800468e:	f43f aefd 	beq.w	800448c <__aeabi_dmul+0x1f8>
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	e722      	b.n	80044de <__aeabi_dmul+0x24a>
 8004698:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800469c:	bf18      	it	ne
 800469e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046a2:	f47f aec5 	bne.w	8004430 <__aeabi_dmul+0x19c>
 80046a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80046aa:	f47f af0d 	bne.w	80044c8 <__aeabi_dmul+0x234>
 80046ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80046b2:	f47f aeeb 	bne.w	800448c <__aeabi_dmul+0x1f8>
 80046b6:	e712      	b.n	80044de <__aeabi_dmul+0x24a>

080046b8 <__gedf2>:
 80046b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80046bc:	e006      	b.n	80046cc <__cmpdf2+0x4>
 80046be:	bf00      	nop

080046c0 <__ledf2>:
 80046c0:	f04f 0c01 	mov.w	ip, #1
 80046c4:	e002      	b.n	80046cc <__cmpdf2+0x4>
 80046c6:	bf00      	nop

080046c8 <__cmpdf2>:
 80046c8:	f04f 0c01 	mov.w	ip, #1
 80046cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80046d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80046d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80046d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80046dc:	bf18      	it	ne
 80046de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80046e2:	d01b      	beq.n	800471c <__cmpdf2+0x54>
 80046e4:	b001      	add	sp, #4
 80046e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80046ea:	bf0c      	ite	eq
 80046ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80046f0:	ea91 0f03 	teqne	r1, r3
 80046f4:	bf02      	ittt	eq
 80046f6:	ea90 0f02 	teqeq	r0, r2
 80046fa:	2000      	moveq	r0, #0
 80046fc:	4770      	bxeq	lr
 80046fe:	f110 0f00 	cmn.w	r0, #0
 8004702:	ea91 0f03 	teq	r1, r3
 8004706:	bf58      	it	pl
 8004708:	4299      	cmppl	r1, r3
 800470a:	bf08      	it	eq
 800470c:	4290      	cmpeq	r0, r2
 800470e:	bf2c      	ite	cs
 8004710:	17d8      	asrcs	r0, r3, #31
 8004712:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004716:	f040 0001 	orr.w	r0, r0, #1
 800471a:	4770      	bx	lr
 800471c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004724:	d102      	bne.n	800472c <__cmpdf2+0x64>
 8004726:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800472a:	d107      	bne.n	800473c <__cmpdf2+0x74>
 800472c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004734:	d1d6      	bne.n	80046e4 <__cmpdf2+0x1c>
 8004736:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800473a:	d0d3      	beq.n	80046e4 <__cmpdf2+0x1c>
 800473c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <__aeabi_cdrcmple>:
 8004744:	4684      	mov	ip, r0
 8004746:	4610      	mov	r0, r2
 8004748:	4662      	mov	r2, ip
 800474a:	468c      	mov	ip, r1
 800474c:	4619      	mov	r1, r3
 800474e:	4663      	mov	r3, ip
 8004750:	e000      	b.n	8004754 <__aeabi_cdcmpeq>
 8004752:	bf00      	nop

08004754 <__aeabi_cdcmpeq>:
 8004754:	b501      	push	{r0, lr}
 8004756:	f7ff ffb7 	bl	80046c8 <__cmpdf2>
 800475a:	2800      	cmp	r0, #0
 800475c:	bf48      	it	mi
 800475e:	f110 0f00 	cmnmi.w	r0, #0
 8004762:	bd01      	pop	{r0, pc}

08004764 <__aeabi_dcmpeq>:
 8004764:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004768:	f7ff fff4 	bl	8004754 <__aeabi_cdcmpeq>
 800476c:	bf0c      	ite	eq
 800476e:	2001      	moveq	r0, #1
 8004770:	2000      	movne	r0, #0
 8004772:	f85d fb08 	ldr.w	pc, [sp], #8
 8004776:	bf00      	nop

08004778 <__aeabi_dcmplt>:
 8004778:	f84d ed08 	str.w	lr, [sp, #-8]!
 800477c:	f7ff ffea 	bl	8004754 <__aeabi_cdcmpeq>
 8004780:	bf34      	ite	cc
 8004782:	2001      	movcc	r0, #1
 8004784:	2000      	movcs	r0, #0
 8004786:	f85d fb08 	ldr.w	pc, [sp], #8
 800478a:	bf00      	nop

0800478c <__aeabi_dcmple>:
 800478c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004790:	f7ff ffe0 	bl	8004754 <__aeabi_cdcmpeq>
 8004794:	bf94      	ite	ls
 8004796:	2001      	movls	r0, #1
 8004798:	2000      	movhi	r0, #0
 800479a:	f85d fb08 	ldr.w	pc, [sp], #8
 800479e:	bf00      	nop

080047a0 <__aeabi_dcmpge>:
 80047a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80047a4:	f7ff ffce 	bl	8004744 <__aeabi_cdrcmple>
 80047a8:	bf94      	ite	ls
 80047aa:	2001      	movls	r0, #1
 80047ac:	2000      	movhi	r0, #0
 80047ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80047b2:	bf00      	nop

080047b4 <__aeabi_dcmpgt>:
 80047b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80047b8:	f7ff ffc4 	bl	8004744 <__aeabi_cdrcmple>
 80047bc:	bf34      	ite	cc
 80047be:	2001      	movcc	r0, #1
 80047c0:	2000      	movcs	r0, #0
 80047c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80047c6:	bf00      	nop

080047c8 <__aeabi_d2iz>:
 80047c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80047cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80047d0:	d215      	bcs.n	80047fe <__aeabi_d2iz+0x36>
 80047d2:	d511      	bpl.n	80047f8 <__aeabi_d2iz+0x30>
 80047d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80047d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80047dc:	d912      	bls.n	8004804 <__aeabi_d2iz+0x3c>
 80047de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80047e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80047ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80047ee:	fa23 f002 	lsr.w	r0, r3, r2
 80047f2:	bf18      	it	ne
 80047f4:	4240      	negne	r0, r0
 80047f6:	4770      	bx	lr
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	4770      	bx	lr
 80047fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004802:	d105      	bne.n	8004810 <__aeabi_d2iz+0x48>
 8004804:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004808:	bf08      	it	eq
 800480a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800480e:	4770      	bx	lr
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <__aeabi_d2f>:
 8004818:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800481c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004820:	bf24      	itt	cs
 8004822:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004826:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800482a:	d90d      	bls.n	8004848 <__aeabi_d2f+0x30>
 800482c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004830:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004834:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004838:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800483c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004840:	bf08      	it	eq
 8004842:	f020 0001 	biceq.w	r0, r0, #1
 8004846:	4770      	bx	lr
 8004848:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800484c:	d121      	bne.n	8004892 <__aeabi_d2f+0x7a>
 800484e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004852:	bfbc      	itt	lt
 8004854:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004858:	4770      	bxlt	lr
 800485a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800485e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004862:	f1c2 0218 	rsb	r2, r2, #24
 8004866:	f1c2 0c20 	rsb	ip, r2, #32
 800486a:	fa10 f30c 	lsls.w	r3, r0, ip
 800486e:	fa20 f002 	lsr.w	r0, r0, r2
 8004872:	bf18      	it	ne
 8004874:	f040 0001 	orrne.w	r0, r0, #1
 8004878:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800487c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004880:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004884:	ea40 000c 	orr.w	r0, r0, ip
 8004888:	fa23 f302 	lsr.w	r3, r3, r2
 800488c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004890:	e7cc      	b.n	800482c <__aeabi_d2f+0x14>
 8004892:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004896:	d107      	bne.n	80048a8 <__aeabi_d2f+0x90>
 8004898:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800489c:	bf1e      	ittt	ne
 800489e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80048a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80048a6:	4770      	bxne	lr
 80048a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80048ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80048b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <main>:
uint8_t isIMUinFreefall(void);
uint32_t get_ticks();


int main(void)
{
 80048b8:	b508      	push	{r3, lr}
	//initializes peripherals
    init_Peripherals();
 80048ba:	f7fb fec3 	bl	8000644 <init_Peripherals>
 80048be:	4d1b      	ldr	r5, [pc, #108]	; (800492c <main+0x74>)
 80048c0:	4c1b      	ldr	r4, [pc, #108]	; (8004930 <main+0x78>)
uint8_t isIMUinFreefall(void)
{
	//calculate vector sum of components of acceleration
	float vectorSum = sqrt((dof.acc.x * dof.acc.x) + (dof.acc.y * dof.acc.y) + (dof.acc.z * dof.acc.z));

	if( ((float) FREE_FALL_THRESHOLD) > vectorSum)
 80048c2:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8004934 <main+0x7c>
    init_Peripherals();

    while(1) {

    	//update DOF from IMU
    	imu_getDOF(&dof);
 80048c6:	4819      	ldr	r0, [pc, #100]	; (800492c <main+0x74>)
 80048c8:	f7fd f892 	bl	80019f0 <imu_getDOF>
    	//output DOF over serial
    	printDOF();
 80048cc:	f7fb fcc0 	bl	8000250 <printDOF>
}

uint8_t isIMUinFreefall(void)
{
	//calculate vector sum of components of acceleration
	float vectorSum = sqrt((dof.acc.x * dof.acc.x) + (dof.acc.y * dof.acc.y) + (dof.acc.z * dof.acc.z));
 80048d0:	edd5 5a00 	vldr	s11, [r5]
 80048d4:	ed95 6a00 	vldr	s12, [r5]
 80048d8:	ed95 5a01 	vldr	s10, [r5, #4]
 80048dc:	edd5 7a01 	vldr	s15, [r5, #4]
 80048e0:	edd5 6a02 	vldr	s13, [r5, #8]
 80048e4:	ed95 7a02 	vldr	s14, [r5, #8]
 80048e8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80048ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80048f4:	ee17 0a90 	vmov	r0, s15
 80048f8:	f7ff fc78 	bl	80041ec <__aeabi_f2d>
 80048fc:	ec41 0b10 	vmov	d0, r0, r1
 8004900:	f000 f846 	bl	8004990 <sqrt>
 8004904:	ec51 0b10 	vmov	r0, r1, d0
 8004908:	f7ff ff86 	bl	8004818 <__aeabi_d2f>

	if( ((float) FREE_FALL_THRESHOLD) > vectorSum)
 800490c:	ee07 0a90 	vmov	s15, r0
 8004910:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d502      	bpl.n	8004920 <main+0x68>
    	printDOF();

    	//check for freeFall
    	if(TRUE == isIMUinFreefall())
    	{
    		my_printf("Catch me! I'm Falling!!!\r\n\n");
 800491a:	4807      	ldr	r0, [pc, #28]	; (8004938 <main+0x80>)
 800491c:	f7fc fd78 	bl	8001410 <my_printf>
    init_IMU();
}

void delay_ms(uint32_t t)
{
    g_timing_delay = t;
 8004920:	2301      	movs	r3, #1
 8004922:	6023      	str	r3, [r4, #0]

    while (g_timing_delay != 0);
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1fc      	bne.n	8004924 <main+0x6c>
 800492a:	e7cc      	b.n	80048c6 <main+0xe>
 800492c:	200008bc 	.word	0x200008bc
 8004930:	20000920 	.word	0x20000920
 8004934:	3e99999a 	.word	0x3e99999a
 8004938:	080058a8 	.word	0x080058a8

0800493c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800493c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800493e:	f000 b804 	b.w	800494a <LoopCopyDataInit>

08004942 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <LoopFillZerobss+0x16>)
  ldr  r3, [r3, r1]
 8004944:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004946:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004948:	3104      	adds	r1, #4

0800494a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800494a:	480c      	ldr	r0, [pc, #48]	; (800497c <LoopFillZerobss+0x1a>)
  ldr  r3, =_edata
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <LoopFillZerobss+0x1e>)
  adds  r2, r0, r1
 800494e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004950:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004952:	f4ff aff6 	bcc.w	8004942 <CopyDataInit>
  ldr  r2, =_sbss
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <LoopFillZerobss+0x22>)
  b  LoopFillZerobss
 8004958:	f000 b803 	b.w	8004962 <LoopFillZerobss>

0800495c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800495c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800495e:	f842 3b04 	str.w	r3, [r2], #4

08004962 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <LoopFillZerobss+0x26>)
  cmp  r2, r3
 8004964:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004966:	f4ff aff9 	bcc.w	800495c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800496a:	f7fb ff0d 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800496e:	f000 f97b 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004972:	f7ff ffa1 	bl	80048b8 <main>
  bx  lr    
 8004976:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8004978:	08005ab4 	.word	0x08005ab4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800497c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004980:	2000089c 	.word	0x2000089c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8004984:	200008a0 	.word	0x200008a0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004988:	2000092c 	.word	0x2000092c

0800498c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800498c:	f7ff bffe 	b.w	800498c <ADC_IRQHandler>

08004990 <sqrt>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	ed2d 8b04 	vpush	{d8-d9}
 8004996:	eeb0 8a40 	vmov.f32	s16, s0
 800499a:	eef0 8a60 	vmov.f32	s17, s1
 800499e:	4e29      	ldr	r6, [pc, #164]	; (8004a44 <sqrt+0xb4>)
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	f000 f853 	bl	8004a4c <__ieee754_sqrt>
 80049a6:	f996 3000 	ldrsb.w	r3, [r6]
 80049aa:	eeb0 9a40 	vmov.f32	s18, s0
 80049ae:	eef0 9a60 	vmov.f32	s19, s1
 80049b2:	3301      	adds	r3, #1
 80049b4:	d00f      	beq.n	80049d6 <sqrt+0x46>
 80049b6:	eeb0 0a48 	vmov.f32	s0, s16
 80049ba:	eef0 0a68 	vmov.f32	s1, s17
 80049be:	f000 f911 	bl	8004be4 <__fpclassifyd>
 80049c2:	b140      	cbz	r0, 80049d6 <sqrt+0x46>
 80049c4:	2400      	movs	r4, #0
 80049c6:	2500      	movs	r5, #0
 80049c8:	ec51 0b18 	vmov	r0, r1, d8
 80049cc:	4622      	mov	r2, r4
 80049ce:	462b      	mov	r3, r5
 80049d0:	f7ff fed2 	bl	8004778 <__aeabi_dcmplt>
 80049d4:	b938      	cbnz	r0, 80049e6 <sqrt+0x56>
 80049d6:	eeb0 0a49 	vmov.f32	s0, s18
 80049da:	eef0 0a69 	vmov.f32	s1, s19
 80049de:	b00a      	add	sp, #40	; 0x28
 80049e0:	ecbd 8b04 	vpop	{d8-d9}
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <sqrt+0xb8>)
 80049e8:	7836      	ldrb	r6, [r6, #0]
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	2300      	movs	r3, #0
 80049f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80049f4:	ed8d 8b02 	vstr	d8, [sp, #8]
 80049f8:	9200      	str	r2, [sp, #0]
 80049fa:	9308      	str	r3, [sp, #32]
 80049fc:	b96e      	cbnz	r6, 8004a1a <sqrt+0x8a>
 80049fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a02:	4668      	mov	r0, sp
 8004a04:	f000 f918 	bl	8004c38 <matherr>
 8004a08:	b188      	cbz	r0, 8004a2e <sqrt+0x9e>
 8004a0a:	9b08      	ldr	r3, [sp, #32]
 8004a0c:	b9a3      	cbnz	r3, 8004a38 <sqrt+0xa8>
 8004a0e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004a12:	b00a      	add	sp, #40	; 0x28
 8004a14:	ecbd 8b04 	vpop	{d8-d9}
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4622      	mov	r2, r4
 8004a20:	462b      	mov	r3, r5
 8004a22:	f7ff fd61 	bl	80044e8 <__aeabi_ddiv>
 8004a26:	2e02      	cmp	r6, #2
 8004a28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a2c:	d1e9      	bne.n	8004a02 <sqrt+0x72>
 8004a2e:	f000 f905 	bl	8004c3c <__errno>
 8004a32:	2321      	movs	r3, #33	; 0x21
 8004a34:	6003      	str	r3, [r0, #0]
 8004a36:	e7e8      	b.n	8004a0a <sqrt+0x7a>
 8004a38:	f000 f900 	bl	8004c3c <__errno>
 8004a3c:	9b08      	ldr	r3, [sp, #32]
 8004a3e:	6003      	str	r3, [r0, #0]
 8004a40:	e7e5      	b.n	8004a0e <sqrt+0x7e>
 8004a42:	bf00      	nop
 8004a44:	20000058 	.word	0x20000058
 8004a48:	08005a74 	.word	0x08005a74

08004a4c <__ieee754_sqrt>:
 8004a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a50:	ec53 2b10 	vmov	r2, r3, d0
 8004a54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004a58:	0d24      	lsrs	r4, r4, #20
 8004a5a:	4d61      	ldr	r5, [pc, #388]	; (8004be0 <__ieee754_sqrt+0x194>)
 8004a5c:	0524      	lsls	r4, r4, #20
 8004a5e:	42ac      	cmp	r4, r5
 8004a60:	ed2d 8b02 	vpush	{d8}
 8004a64:	eeb0 8a40 	vmov.f32	s16, s0
 8004a68:	eef0 8a60 	vmov.f32	s17, s1
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	ee10 0a10 	vmov	r0, s0
 8004a72:	f000 8094 	beq.w	8004b9e <__ieee754_sqrt+0x152>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	dd74      	ble.n	8004b64 <__ieee754_sqrt+0x118>
 8004a7a:	151f      	asrs	r7, r3, #20
 8004a7c:	d07d      	beq.n	8004b7a <__ieee754_sqrt+0x12e>
 8004a7e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8004a82:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004a86:	07fa      	lsls	r2, r7, #31
 8004a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004a8c:	d45f      	bmi.n	8004b4e <__ieee754_sqrt+0x102>
 8004a8e:	0fc3      	lsrs	r3, r0, #31
 8004a90:	f04f 0c00 	mov.w	ip, #0
 8004a94:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004a98:	0042      	lsls	r2, r0, #1
 8004a9a:	107f      	asrs	r7, r7, #1
 8004a9c:	4665      	mov	r5, ip
 8004a9e:	2016      	movs	r0, #22
 8004aa0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa4:	186c      	adds	r4, r5, r1
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	ea4f 76d2 	mov.w	r6, r2, lsr #31
 8004aac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ab0:	dc02      	bgt.n	8004ab8 <__ieee754_sqrt+0x6c>
 8004ab2:	1b1b      	subs	r3, r3, r4
 8004ab4:	1865      	adds	r5, r4, r1
 8004ab6:	448c      	add	ip, r1
 8004ab8:	3801      	subs	r0, #1
 8004aba:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8004abe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ac2:	d1ef      	bne.n	8004aa4 <__ieee754_sqrt+0x58>
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	2620      	movs	r6, #32
 8004ac8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004acc:	e009      	b.n	8004ae2 <__ieee754_sqrt+0x96>
 8004ace:	d023      	beq.n	8004b18 <__ieee754_sqrt+0xcc>
 8004ad0:	0fd4      	lsrs	r4, r2, #31
 8004ad2:	3e01      	subs	r6, #1
 8004ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ad8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004adc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ae0:	d01e      	beq.n	8004b20 <__ieee754_sqrt+0xd4>
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	eb01 0408 	add.w	r4, r1, r8
 8004ae8:	ddf1      	ble.n	8004ace <__ieee754_sqrt+0x82>
 8004aea:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
 8004aee:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8004af2:	eb04 0801 	add.w	r8, r4, r1
 8004af6:	d009      	beq.n	8004b0c <__ieee754_sqrt+0xc0>
 8004af8:	46a9      	mov	r9, r5
 8004afa:	1b5b      	subs	r3, r3, r5
 8004afc:	4294      	cmp	r4, r2
 8004afe:	bf88      	it	hi
 8004b00:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004b04:	1b12      	subs	r2, r2, r4
 8004b06:	4408      	add	r0, r1
 8004b08:	464d      	mov	r5, r9
 8004b0a:	e7e1      	b.n	8004ad0 <__ieee754_sqrt+0x84>
 8004b0c:	f1b8 0f00 	cmp.w	r8, #0
 8004b10:	dbf2      	blt.n	8004af8 <__ieee754_sqrt+0xac>
 8004b12:	f105 0901 	add.w	r9, r5, #1
 8004b16:	e7f0      	b.n	8004afa <__ieee754_sqrt+0xae>
 8004b18:	4294      	cmp	r4, r2
 8004b1a:	d9e6      	bls.n	8004aea <__ieee754_sqrt+0x9e>
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	e7d7      	b.n	8004ad0 <__ieee754_sqrt+0x84>
 8004b20:	431a      	orrs	r2, r3
 8004b22:	d119      	bne.n	8004b58 <__ieee754_sqrt+0x10c>
 8004b24:	0846      	lsrs	r6, r0, #1
 8004b26:	ea4f 016c 	mov.w	r1, ip, asr #1
 8004b2a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8004b2e:	f01c 0f01 	tst.w	ip, #1
 8004b32:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8004b36:	bf18      	it	ne
 8004b38:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
 8004b3c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8004b40:	4632      	mov	r2, r6
 8004b42:	ec43 2b10 	vmov	d0, r2, r3
 8004b46:	ecbd 8b02 	vpop	{d8}
 8004b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4e:	0fc3      	lsrs	r3, r0, #31
 8004b50:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004b54:	0040      	lsls	r0, r0, #1
 8004b56:	e79a      	b.n	8004a8e <__ieee754_sqrt+0x42>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d02e      	beq.n	8004bba <__ieee754_sqrt+0x16e>
 8004b5c:	f000 0301 	and.w	r3, r0, #1
 8004b60:	4418      	add	r0, r3
 8004b62:	e7df      	b.n	8004b24 <__ieee754_sqrt+0xd8>
 8004b64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	d0ec      	beq.n	8004b46 <__ieee754_sqrt+0xfa>
 8004b6c:	bb63      	cbnz	r3, 8004bc8 <__ieee754_sqrt+0x17c>
 8004b6e:	461f      	mov	r7, r3
 8004b70:	0ac1      	lsrs	r1, r0, #11
 8004b72:	3f15      	subs	r7, #21
 8004b74:	0540      	lsls	r0, r0, #21
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d0fa      	beq.n	8004b70 <__ieee754_sqrt+0x124>
 8004b7a:	f411 1380 	ands.w	r3, r1, #1048576	; 0x100000
 8004b7e:	d11f      	bne.n	8004bc0 <__ieee754_sqrt+0x174>
 8004b80:	0049      	lsls	r1, r1, #1
 8004b82:	02cc      	lsls	r4, r1, #11
 8004b84:	f103 0301 	add.w	r3, r3, #1
 8004b88:	d5fa      	bpl.n	8004b80 <__ieee754_sqrt+0x134>
 8004b8a:	f1c3 0201 	rsb	r2, r3, #1
 8004b8e:	f1c3 0420 	rsb	r4, r3, #32
 8004b92:	fa20 f404 	lsr.w	r4, r0, r4
 8004b96:	4321      	orrs	r1, r4
 8004b98:	4417      	add	r7, r2
 8004b9a:	4098      	lsls	r0, r3
 8004b9c:	e76f      	b.n	8004a7e <__ieee754_sqrt+0x32>
 8004b9e:	ec51 0b10 	vmov	r0, r1, d0
 8004ba2:	f7ff fb77 	bl	8004294 <__aeabi_dmul>
 8004ba6:	ec53 2b18 	vmov	r2, r3, d8
 8004baa:	f7ff f9c1 	bl	8003f30 <__adddf3>
 8004bae:	ecbd 8b02 	vpop	{d8}
 8004bb2:	ec41 0b10 	vmov	d0, r0, r1
 8004bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bba:	f10c 0c01 	add.w	ip, ip, #1
 8004bbe:	e7b2      	b.n	8004b26 <__ieee754_sqrt+0xda>
 8004bc0:	2420      	movs	r4, #32
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e7e4      	b.n	8004b92 <__ieee754_sqrt+0x146>
 8004bc8:	ec51 0b10 	vmov	r0, r1, d0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	f7ff f9ad 	bl	8003f2c <__aeabi_dsub>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	f7ff fc87 	bl	80044e8 <__aeabi_ddiv>
 8004bda:	ec41 0b10 	vmov	d0, r0, r1
 8004bde:	e7b2      	b.n	8004b46 <__ieee754_sqrt+0xfa>
 8004be0:	7ff00000 	.word	0x7ff00000

08004be4 <__fpclassifyd>:
 8004be4:	ec53 2b10 	vmov	r2, r3, d0
 8004be8:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8004bec:	b410      	push	{r4}
 8004bee:	d008      	beq.n	8004c02 <__fpclassifyd+0x1e>
 8004bf0:	480f      	ldr	r0, [pc, #60]	; (8004c30 <__fpclassifyd+0x4c>)
 8004bf2:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8004bf6:	4284      	cmp	r4, r0
 8004bf8:	d80a      	bhi.n	8004c10 <__fpclassifyd+0x2c>
 8004bfa:	2004      	movs	r0, #4
 8004bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	bf0c      	ite	eq
 8004c06:	2002      	moveq	r0, #2
 8004c08:	2003      	movne	r0, #3
 8004c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004c14:	d201      	bcs.n	8004c1a <__fpclassifyd+0x36>
 8004c16:	2003      	movs	r0, #3
 8004c18:	e7f7      	b.n	8004c0a <__fpclassifyd+0x26>
 8004c1a:	4806      	ldr	r0, [pc, #24]	; (8004c34 <__fpclassifyd+0x50>)
 8004c1c:	4281      	cmp	r1, r0
 8004c1e:	d001      	beq.n	8004c24 <__fpclassifyd+0x40>
 8004c20:	2000      	movs	r0, #0
 8004c22:	e7f2      	b.n	8004c0a <__fpclassifyd+0x26>
 8004c24:	f1d2 0001 	rsbs	r0, r2, #1
 8004c28:	bf38      	it	cc
 8004c2a:	2000      	movcc	r0, #0
 8004c2c:	e7ed      	b.n	8004c0a <__fpclassifyd+0x26>
 8004c2e:	bf00      	nop
 8004c30:	7fdfffff 	.word	0x7fdfffff
 8004c34:	7ff00000 	.word	0x7ff00000

08004c38 <matherr>:
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4770      	bx	lr

08004c3c <__errno>:
 8004c3c:	4b01      	ldr	r3, [pc, #4]	; (8004c44 <__errno+0x8>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000488 	.word	0x20000488

08004c48 <exit>:
 8004c48:	b508      	push	{r3, lr}
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	f000 f8dd 	bl	8004e0c <__call_exitprocs>
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <exit+0x1c>)
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004c58:	b103      	cbz	r3, 8004c5c <exit+0x14>
 8004c5a:	4798      	blx	r3
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7fb ffe3 	bl	8000c28 <_exit>
 8004c62:	bf00      	nop
 8004c64:	08005a80 	.word	0x08005a80

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4e0f      	ldr	r6, [pc, #60]	; (8004ca8 <__libc_init_array+0x40>)
 8004c6c:	4d0f      	ldr	r5, [pc, #60]	; (8004cac <__libc_init_array+0x44>)
 8004c6e:	1b76      	subs	r6, r6, r5
 8004c70:	10b6      	asrs	r6, r6, #2
 8004c72:	d007      	beq.n	8004c84 <__libc_init_array+0x1c>
 8004c74:	3d04      	subs	r5, #4
 8004c76:	2400      	movs	r4, #0
 8004c78:	3401      	adds	r4, #1
 8004c7a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004c7e:	4798      	blx	r3
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	d1f9      	bne.n	8004c78 <__libc_init_array+0x10>
 8004c84:	4e0a      	ldr	r6, [pc, #40]	; (8004cb0 <__libc_init_array+0x48>)
 8004c86:	4d0b      	ldr	r5, [pc, #44]	; (8004cb4 <__libc_init_array+0x4c>)
 8004c88:	1b76      	subs	r6, r6, r5
 8004c8a:	f000 fefd 	bl	8005a88 <_init>
 8004c8e:	10b6      	asrs	r6, r6, #2
 8004c90:	d008      	beq.n	8004ca4 <__libc_init_array+0x3c>
 8004c92:	3d04      	subs	r5, #4
 8004c94:	2400      	movs	r4, #0
 8004c96:	3401      	adds	r4, #1
 8004c98:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004c9c:	4798      	blx	r3
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d1f9      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08005aa8 	.word	0x08005aa8
 8004cac:	08005aa8 	.word	0x08005aa8
 8004cb0:	08005ab0 	.word	0x08005ab0
 8004cb4:	08005aa8 	.word	0x08005aa8

08004cb8 <memset>:
 8004cb8:	b4f0      	push	{r4, r5, r6, r7}
 8004cba:	0784      	lsls	r4, r0, #30
 8004cbc:	d043      	beq.n	8004d46 <memset+0x8e>
 8004cbe:	1e54      	subs	r4, r2, #1
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d03e      	beq.n	8004d42 <memset+0x8a>
 8004cc4:	b2cd      	uxtb	r5, r1
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	e003      	b.n	8004cd2 <memset+0x1a>
 8004cca:	1e62      	subs	r2, r4, #1
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	d038      	beq.n	8004d42 <memset+0x8a>
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	f803 5b01 	strb.w	r5, [r3], #1
 8004cd6:	079a      	lsls	r2, r3, #30
 8004cd8:	d1f7      	bne.n	8004cca <memset+0x12>
 8004cda:	2c03      	cmp	r4, #3
 8004cdc:	d92a      	bls.n	8004d34 <memset+0x7c>
 8004cde:	b2cd      	uxtb	r5, r1
 8004ce0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004ce4:	2c0f      	cmp	r4, #15
 8004ce6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004cea:	d915      	bls.n	8004d18 <memset+0x60>
 8004cec:	f1a4 0710 	sub.w	r7, r4, #16
 8004cf0:	093f      	lsrs	r7, r7, #4
 8004cf2:	f103 0610 	add.w	r6, r3, #16
 8004cf6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6015      	str	r5, [r2, #0]
 8004cfe:	6055      	str	r5, [r2, #4]
 8004d00:	6095      	str	r5, [r2, #8]
 8004d02:	60d5      	str	r5, [r2, #12]
 8004d04:	3210      	adds	r2, #16
 8004d06:	42b2      	cmp	r2, r6
 8004d08:	d1f8      	bne.n	8004cfc <memset+0x44>
 8004d0a:	f004 040f 	and.w	r4, r4, #15
 8004d0e:	3701      	adds	r7, #1
 8004d10:	2c03      	cmp	r4, #3
 8004d12:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8004d16:	d90d      	bls.n	8004d34 <memset+0x7c>
 8004d18:	461e      	mov	r6, r3
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	3a04      	subs	r2, #4
 8004d1e:	2a03      	cmp	r2, #3
 8004d20:	f846 5b04 	str.w	r5, [r6], #4
 8004d24:	d8fa      	bhi.n	8004d1c <memset+0x64>
 8004d26:	1f22      	subs	r2, r4, #4
 8004d28:	f022 0203 	bic.w	r2, r2, #3
 8004d2c:	3204      	adds	r2, #4
 8004d2e:	4413      	add	r3, r2
 8004d30:	f004 0403 	and.w	r4, r4, #3
 8004d34:	b12c      	cbz	r4, 8004d42 <memset+0x8a>
 8004d36:	b2c9      	uxtb	r1, r1
 8004d38:	441c      	add	r4, r3
 8004d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	d1fb      	bne.n	8004d3a <memset+0x82>
 8004d42:	bcf0      	pop	{r4, r5, r6, r7}
 8004d44:	4770      	bx	lr
 8004d46:	4614      	mov	r4, r2
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e7c6      	b.n	8004cda <memset+0x22>

08004d4c <cleanup_glue>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	460c      	mov	r4, r1
 8004d50:	6809      	ldr	r1, [r1, #0]
 8004d52:	4605      	mov	r5, r0
 8004d54:	b109      	cbz	r1, 8004d5a <cleanup_glue+0xe>
 8004d56:	f7ff fff9 	bl	8004d4c <cleanup_glue>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d62:	f000 b937 	b.w	8004fd4 <_free_r>
 8004d66:	bf00      	nop

08004d68 <_reclaim_reent>:
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <_reclaim_reent+0x8c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	4605      	mov	r5, r0
 8004d72:	d032      	beq.n	8004dda <_reclaim_reent+0x72>
 8004d74:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004d76:	b1aa      	cbz	r2, 8004da4 <_reclaim_reent+0x3c>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	461e      	mov	r6, r3
 8004d7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d80:	b909      	cbnz	r1, 8004d86 <_reclaim_reent+0x1e>
 8004d82:	e007      	b.n	8004d94 <_reclaim_reent+0x2c>
 8004d84:	4621      	mov	r1, r4
 8004d86:	680c      	ldr	r4, [r1, #0]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f923 	bl	8004fd4 <_free_r>
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d1f8      	bne.n	8004d84 <_reclaim_reent+0x1c>
 8004d92:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004d94:	3601      	adds	r6, #1
 8004d96:	2e20      	cmp	r6, #32
 8004d98:	4633      	mov	r3, r6
 8004d9a:	d1ef      	bne.n	8004d7c <_reclaim_reent+0x14>
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 f918 	bl	8004fd4 <_free_r>
 8004da4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004da6:	b111      	cbz	r1, 8004dae <_reclaim_reent+0x46>
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f913 	bl	8004fd4 <_free_r>
 8004dae:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8004db2:	b159      	cbz	r1, 8004dcc <_reclaim_reent+0x64>
 8004db4:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8004db8:	42b1      	cmp	r1, r6
 8004dba:	d101      	bne.n	8004dc0 <_reclaim_reent+0x58>
 8004dbc:	e006      	b.n	8004dcc <_reclaim_reent+0x64>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	680c      	ldr	r4, [r1, #0]
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f906 	bl	8004fd4 <_free_r>
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d1f8      	bne.n	8004dbe <_reclaim_reent+0x56>
 8004dcc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8004dce:	b111      	cbz	r1, 8004dd6 <_reclaim_reent+0x6e>
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f8ff 	bl	8004fd4 <_free_r>
 8004dd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004dd8:	b903      	cbnz	r3, 8004ddc <_reclaim_reent+0x74>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004dde:	4628      	mov	r0, r5
 8004de0:	4798      	blx	r3
 8004de2:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8004de6:	2900      	cmp	r1, #0
 8004de8:	d0f7      	beq.n	8004dda <_reclaim_reent+0x72>
 8004dea:	4628      	mov	r0, r5
 8004dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004df0:	f7ff bfac 	b.w	8004d4c <cleanup_glue>
 8004df4:	20000488 	.word	0x20000488

08004df8 <register_fini>:
 8004df8:	4b02      	ldr	r3, [pc, #8]	; (8004e04 <register_fini+0xc>)
 8004dfa:	b113      	cbz	r3, 8004e02 <register_fini+0xa>
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <register_fini+0x10>)
 8004dfe:	f000 b87d 	b.w	8004efc <atexit>
 8004e02:	4770      	bx	lr
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004f09 	.word	0x08004f09

08004e0c <__call_exitprocs>:
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <__call_exitprocs+0xe8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b085      	sub	sp, #20
 8004e16:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	9002      	str	r0, [sp, #8]
 8004e1e:	460f      	mov	r7, r1
 8004e20:	9203      	str	r2, [sp, #12]
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
 8004e28:	f1b8 0f00 	cmp.w	r8, #0
 8004e2c:	d01c      	beq.n	8004e68 <__call_exitprocs+0x5c>
 8004e2e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004e32:	f04f 0901 	mov.w	r9, #1
 8004e36:	46da      	mov	sl, fp
 8004e38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004e3c:	1e5c      	subs	r4, r3, #1
 8004e3e:	d411      	bmi.n	8004e64 <__call_exitprocs+0x58>
 8004e40:	f108 0588 	add.w	r5, r8, #136	; 0x88
 8004e44:	1c9e      	adds	r6, r3, #2
 8004e46:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004e4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8004e4e:	b177      	cbz	r7, 8004e6e <__call_exitprocs+0x62>
 8004e50:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004e52:	42bb      	cmp	r3, r7
 8004e54:	d00b      	beq.n	8004e6e <__call_exitprocs+0x62>
 8004e56:	3c01      	subs	r4, #1
 8004e58:	1c63      	adds	r3, r4, #1
 8004e5a:	f1a5 0504 	sub.w	r5, r5, #4
 8004e5e:	f1a6 0604 	sub.w	r6, r6, #4
 8004e62:	d1f4      	bne.n	8004e4e <__call_exitprocs+0x42>
 8004e64:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <__call_exitprocs+0xec>)
 8004e66:	bb7a      	cbnz	r2, 8004ec8 <__call_exitprocs+0xbc>
 8004e68:	b005      	add	sp, #20
 8004e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004e72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004e76:	3a01      	subs	r2, #1
 8004e78:	42a2      	cmp	r2, r4
 8004e7a:	bf16      	itet	ne
 8004e7c:	2200      	movne	r2, #0
 8004e7e:	f8c8 4004 	streq.w	r4, [r8, #4]
 8004e82:	f846 2c04 	strne.w	r2, [r6, #-4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0e5      	beq.n	8004e56 <__call_exitprocs+0x4a>
 8004e8a:	f8d8 1188 	ldr.w	r1, [r8, #392]	; 0x188
 8004e8e:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8004e92:	fa09 f204 	lsl.w	r2, r9, r4
 8004e96:	420a      	tst	r2, r1
 8004e98:	d010      	beq.n	8004ebc <__call_exitprocs+0xb0>
 8004e9a:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
 8004e9e:	420a      	tst	r2, r1
 8004ea0:	d10e      	bne.n	8004ec0 <__call_exitprocs+0xb4>
 8004ea2:	9802      	ldr	r0, [sp, #8]
 8004ea4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8004ea8:	4798      	blx	r3
 8004eaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004eae:	455b      	cmp	r3, fp
 8004eb0:	d1b7      	bne.n	8004e22 <__call_exitprocs+0x16>
 8004eb2:	f8da 3000 	ldr.w	r3, [sl]
 8004eb6:	4543      	cmp	r3, r8
 8004eb8:	d0cd      	beq.n	8004e56 <__call_exitprocs+0x4a>
 8004eba:	e7b2      	b.n	8004e22 <__call_exitprocs+0x16>
 8004ebc:	4798      	blx	r3
 8004ebe:	e7f4      	b.n	8004eaa <__call_exitprocs+0x9e>
 8004ec0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8004ec4:	4798      	blx	r3
 8004ec6:	e7f0      	b.n	8004eaa <__call_exitprocs+0x9e>
 8004ec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004ecc:	b96b      	cbnz	r3, 8004eea <__call_exitprocs+0xde>
 8004ece:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed2:	b163      	cbz	r3, 8004eee <__call_exitprocs+0xe2>
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	f8ca 3000 	str.w	r3, [sl]
 8004eda:	f3af 8000 	nop.w
 8004ede:	f8da 8000 	ldr.w	r8, [sl]
 8004ee2:	f1b8 0f00 	cmp.w	r8, #0
 8004ee6:	d1a7      	bne.n	8004e38 <__call_exitprocs+0x2c>
 8004ee8:	e7be      	b.n	8004e68 <__call_exitprocs+0x5c>
 8004eea:	f8d8 3000 	ldr.w	r3, [r8]
 8004eee:	46c2      	mov	sl, r8
 8004ef0:	4698      	mov	r8, r3
 8004ef2:	e7f6      	b.n	8004ee2 <__call_exitprocs+0xd6>
 8004ef4:	08005a80 	.word	0x08005a80
 8004ef8:	00000000 	.word	0x00000000

08004efc <atexit>:
 8004efc:	4601      	mov	r1, r0
 8004efe:	2000      	movs	r0, #0
 8004f00:	4602      	mov	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	f000 bbe6 	b.w	80056d4 <__register_exitproc>

08004f08 <__libc_fini_array>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d09      	ldr	r5, [pc, #36]	; (8004f30 <__libc_fini_array+0x28>)
 8004f0c:	4c09      	ldr	r4, [pc, #36]	; (8004f34 <__libc_fini_array+0x2c>)
 8004f0e:	1b64      	subs	r4, r4, r5
 8004f10:	10a4      	asrs	r4, r4, #2
 8004f12:	bf18      	it	ne
 8004f14:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8004f18:	d005      	beq.n	8004f26 <__libc_fini_array+0x1e>
 8004f1a:	3c01      	subs	r4, #1
 8004f1c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004f20:	4798      	blx	r3
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	d1f9      	bne.n	8004f1a <__libc_fini_array+0x12>
 8004f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f2a:	f000 bdb3 	b.w	8005a94 <_fini>
 8004f2e:	bf00      	nop
 8004f30:	08005ab0 	.word	0x08005ab0
 8004f34:	08005ab4 	.word	0x08005ab4

08004f38 <_malloc_trim_r>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4d23      	ldr	r5, [pc, #140]	; (8004fc8 <_malloc_trim_r+0x90>)
 8004f3c:	460f      	mov	r7, r1
 8004f3e:	4604      	mov	r4, r0
 8004f40:	f000 fbb2 	bl	80056a8 <__malloc_lock>
 8004f44:	68ab      	ldr	r3, [r5, #8]
 8004f46:	685e      	ldr	r6, [r3, #4]
 8004f48:	f026 0603 	bic.w	r6, r6, #3
 8004f4c:	1bf1      	subs	r1, r6, r7
 8004f4e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004f52:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004f56:	f021 010f 	bic.w	r1, r1, #15
 8004f5a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8004f5e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004f62:	db07      	blt.n	8004f74 <_malloc_trim_r+0x3c>
 8004f64:	4620      	mov	r0, r4
 8004f66:	2100      	movs	r1, #0
 8004f68:	f000 fba2 	bl	80056b0 <_sbrk_r>
 8004f6c:	68ab      	ldr	r3, [r5, #8]
 8004f6e:	4433      	add	r3, r6
 8004f70:	4298      	cmp	r0, r3
 8004f72:	d004      	beq.n	8004f7e <_malloc_trim_r+0x46>
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fb99 	bl	80056ac <__malloc_unlock>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4279      	negs	r1, r7
 8004f82:	f000 fb95 	bl	80056b0 <_sbrk_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d00d      	beq.n	8004fa6 <_malloc_trim_r+0x6e>
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <_malloc_trim_r+0x94>)
 8004f8c:	68aa      	ldr	r2, [r5, #8]
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	1bf6      	subs	r6, r6, r7
 8004f92:	f046 0601 	orr.w	r6, r6, #1
 8004f96:	4620      	mov	r0, r4
 8004f98:	1bc9      	subs	r1, r1, r7
 8004f9a:	6056      	str	r6, [r2, #4]
 8004f9c:	6019      	str	r1, [r3, #0]
 8004f9e:	f000 fb85 	bl	80056ac <__malloc_unlock>
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f000 fb81 	bl	80056b0 <_sbrk_r>
 8004fae:	68ab      	ldr	r3, [r5, #8]
 8004fb0:	1ac2      	subs	r2, r0, r3
 8004fb2:	2a0f      	cmp	r2, #15
 8004fb4:	ddde      	ble.n	8004f74 <_malloc_trim_r+0x3c>
 8004fb6:	4d06      	ldr	r5, [pc, #24]	; (8004fd0 <_malloc_trim_r+0x98>)
 8004fb8:	4904      	ldr	r1, [pc, #16]	; (8004fcc <_malloc_trim_r+0x94>)
 8004fba:	682d      	ldr	r5, [r5, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	1b40      	subs	r0, r0, r5
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	6008      	str	r0, [r1, #0]
 8004fc6:	e7d5      	b.n	8004f74 <_malloc_trim_r+0x3c>
 8004fc8:	2000048c 	.word	0x2000048c
 8004fcc:	200008f8 	.word	0x200008f8
 8004fd0:	20000898 	.word	0x20000898

08004fd4 <_free_r>:
 8004fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	460d      	mov	r5, r1
 8004fda:	4606      	mov	r6, r0
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d055      	beq.n	800508c <_free_r+0xb8>
 8004fe0:	f000 fb62 	bl	80056a8 <__malloc_lock>
 8004fe4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8004fe8:	f8df c174 	ldr.w	ip, [pc, #372]	; 8005160 <_free_r+0x18c>
 8004fec:	f021 0301 	bic.w	r3, r1, #1
 8004ff0:	f1a5 0408 	sub.w	r4, r5, #8
 8004ff4:	18e2      	adds	r2, r4, r3
 8004ff6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004ffa:	6857      	ldr	r7, [r2, #4]
 8004ffc:	4290      	cmp	r0, r2
 8004ffe:	f027 0703 	bic.w	r7, r7, #3
 8005002:	d069      	beq.n	80050d8 <_free_r+0x104>
 8005004:	f011 0101 	ands.w	r1, r1, #1
 8005008:	6057      	str	r7, [r2, #4]
 800500a:	d032      	beq.n	8005072 <_free_r+0x9e>
 800500c:	2100      	movs	r1, #0
 800500e:	19d0      	adds	r0, r2, r7
 8005010:	6840      	ldr	r0, [r0, #4]
 8005012:	07c0      	lsls	r0, r0, #31
 8005014:	d406      	bmi.n	8005024 <_free_r+0x50>
 8005016:	443b      	add	r3, r7
 8005018:	6890      	ldr	r0, [r2, #8]
 800501a:	2900      	cmp	r1, #0
 800501c:	d04e      	beq.n	80050bc <_free_r+0xe8>
 800501e:	68d2      	ldr	r2, [r2, #12]
 8005020:	60c2      	str	r2, [r0, #12]
 8005022:	6090      	str	r0, [r2, #8]
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	6062      	str	r2, [r4, #4]
 800502a:	50e3      	str	r3, [r4, r3]
 800502c:	b9e1      	cbnz	r1, 8005068 <_free_r+0x94>
 800502e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005032:	d32d      	bcc.n	8005090 <_free_r+0xbc>
 8005034:	0a5a      	lsrs	r2, r3, #9
 8005036:	2a04      	cmp	r2, #4
 8005038:	d86a      	bhi.n	8005110 <_free_r+0x13c>
 800503a:	0998      	lsrs	r0, r3, #6
 800503c:	3038      	adds	r0, #56	; 0x38
 800503e:	0041      	lsls	r1, r0, #1
 8005040:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 8005044:	4946      	ldr	r1, [pc, #280]	; (8005160 <_free_r+0x18c>)
 8005046:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800504a:	4562      	cmp	r2, ip
 800504c:	d066      	beq.n	800511c <_free_r+0x148>
 800504e:	6851      	ldr	r1, [r2, #4]
 8005050:	f021 0103 	bic.w	r1, r1, #3
 8005054:	428b      	cmp	r3, r1
 8005056:	d202      	bcs.n	800505e <_free_r+0x8a>
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	4594      	cmp	ip, r2
 800505c:	d1f7      	bne.n	800504e <_free_r+0x7a>
 800505e:	68d3      	ldr	r3, [r2, #12]
 8005060:	60e3      	str	r3, [r4, #12]
 8005062:	60a2      	str	r2, [r4, #8]
 8005064:	609c      	str	r4, [r3, #8]
 8005066:	60d4      	str	r4, [r2, #12]
 8005068:	4630      	mov	r0, r6
 800506a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506e:	f000 bb1d 	b.w	80056ac <__malloc_unlock>
 8005072:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	f10c 0808 	add.w	r8, ip, #8
 800507c:	68a0      	ldr	r0, [r4, #8]
 800507e:	4540      	cmp	r0, r8
 8005080:	442b      	add	r3, r5
 8005082:	d043      	beq.n	800510c <_free_r+0x138>
 8005084:	68e5      	ldr	r5, [r4, #12]
 8005086:	60c5      	str	r5, [r0, #12]
 8005088:	60a8      	str	r0, [r5, #8]
 800508a:	e7c0      	b.n	800500e <_free_r+0x3a>
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8005096:	2501      	movs	r5, #1
 8005098:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800509c:	6891      	ldr	r1, [r2, #8]
 800509e:	60a1      	str	r1, [r4, #8]
 80050a0:	109b      	asrs	r3, r3, #2
 80050a2:	fa05 f303 	lsl.w	r3, r5, r3
 80050a6:	4318      	orrs	r0, r3
 80050a8:	60e2      	str	r2, [r4, #12]
 80050aa:	f8cc 0004 	str.w	r0, [ip, #4]
 80050ae:	6094      	str	r4, [r2, #8]
 80050b0:	4630      	mov	r0, r6
 80050b2:	60cc      	str	r4, [r1, #12]
 80050b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	f000 baf8 	b.w	80056ac <__malloc_unlock>
 80050bc:	4d29      	ldr	r5, [pc, #164]	; (8005164 <_free_r+0x190>)
 80050be:	42a8      	cmp	r0, r5
 80050c0:	d1ad      	bne.n	800501e <_free_r+0x4a>
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	f8cc 4014 	str.w	r4, [ip, #20]
 80050ca:	f8cc 4010 	str.w	r4, [ip, #16]
 80050ce:	60e0      	str	r0, [r4, #12]
 80050d0:	60a0      	str	r0, [r4, #8]
 80050d2:	6062      	str	r2, [r4, #4]
 80050d4:	50e3      	str	r3, [r4, r3]
 80050d6:	e7c7      	b.n	8005068 <_free_r+0x94>
 80050d8:	441f      	add	r7, r3
 80050da:	07cb      	lsls	r3, r1, #31
 80050dc:	d407      	bmi.n	80050ee <_free_r+0x11a>
 80050de:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80050e2:	1ae4      	subs	r4, r4, r3
 80050e4:	441f      	add	r7, r3
 80050e6:	68a2      	ldr	r2, [r4, #8]
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	60d3      	str	r3, [r2, #12]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <_free_r+0x194>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f047 0201 	orr.w	r2, r7, #1
 80050f6:	429f      	cmp	r7, r3
 80050f8:	6062      	str	r2, [r4, #4]
 80050fa:	f8cc 4008 	str.w	r4, [ip, #8]
 80050fe:	d3b3      	bcc.n	8005068 <_free_r+0x94>
 8005100:	4b1a      	ldr	r3, [pc, #104]	; (800516c <_free_r+0x198>)
 8005102:	4630      	mov	r0, r6
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	f7ff ff17 	bl	8004f38 <_malloc_trim_r>
 800510a:	e7ad      	b.n	8005068 <_free_r+0x94>
 800510c:	2101      	movs	r1, #1
 800510e:	e77e      	b.n	800500e <_free_r+0x3a>
 8005110:	2a14      	cmp	r2, #20
 8005112:	d80c      	bhi.n	800512e <_free_r+0x15a>
 8005114:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005118:	0041      	lsls	r1, r0, #1
 800511a:	e791      	b.n	8005040 <_free_r+0x6c>
 800511c:	684b      	ldr	r3, [r1, #4]
 800511e:	1080      	asrs	r0, r0, #2
 8005120:	2501      	movs	r5, #1
 8005122:	fa05 f000 	lsl.w	r0, r5, r0
 8005126:	4303      	orrs	r3, r0
 8005128:	604b      	str	r3, [r1, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	e798      	b.n	8005060 <_free_r+0x8c>
 800512e:	2a54      	cmp	r2, #84	; 0x54
 8005130:	d803      	bhi.n	800513a <_free_r+0x166>
 8005132:	0b18      	lsrs	r0, r3, #12
 8005134:	306e      	adds	r0, #110	; 0x6e
 8005136:	0041      	lsls	r1, r0, #1
 8005138:	e782      	b.n	8005040 <_free_r+0x6c>
 800513a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800513e:	d803      	bhi.n	8005148 <_free_r+0x174>
 8005140:	0bd8      	lsrs	r0, r3, #15
 8005142:	3077      	adds	r0, #119	; 0x77
 8005144:	0041      	lsls	r1, r0, #1
 8005146:	e77b      	b.n	8005040 <_free_r+0x6c>
 8005148:	f240 5154 	movw	r1, #1364	; 0x554
 800514c:	428a      	cmp	r2, r1
 800514e:	d803      	bhi.n	8005158 <_free_r+0x184>
 8005150:	0c98      	lsrs	r0, r3, #18
 8005152:	307c      	adds	r0, #124	; 0x7c
 8005154:	0041      	lsls	r1, r0, #1
 8005156:	e773      	b.n	8005040 <_free_r+0x6c>
 8005158:	21fc      	movs	r1, #252	; 0xfc
 800515a:	207e      	movs	r0, #126	; 0x7e
 800515c:	e770      	b.n	8005040 <_free_r+0x6c>
 800515e:	bf00      	nop
 8005160:	2000048c 	.word	0x2000048c
 8005164:	20000494 	.word	0x20000494
 8005168:	20000894 	.word	0x20000894
 800516c:	200008f4 	.word	0x200008f4

08005170 <_malloc_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	f101 050b 	add.w	r5, r1, #11
 8005178:	2d16      	cmp	r5, #22
 800517a:	b083      	sub	sp, #12
 800517c:	4606      	mov	r6, r0
 800517e:	d927      	bls.n	80051d0 <_malloc_r+0x60>
 8005180:	f035 0507 	bics.w	r5, r5, #7
 8005184:	d427      	bmi.n	80051d6 <_malloc_r+0x66>
 8005186:	42a9      	cmp	r1, r5
 8005188:	d825      	bhi.n	80051d6 <_malloc_r+0x66>
 800518a:	4630      	mov	r0, r6
 800518c:	f000 fa8c 	bl	80056a8 <__malloc_lock>
 8005190:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005194:	d226      	bcs.n	80051e4 <_malloc_r+0x74>
 8005196:	4fc1      	ldr	r7, [pc, #772]	; (800549c <_malloc_r+0x32c>)
 8005198:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800519c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 80051a0:	68dc      	ldr	r4, [r3, #12]
 80051a2:	429c      	cmp	r4, r3
 80051a4:	f000 81d2 	beq.w	800554c <_malloc_r+0x3dc>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	68e2      	ldr	r2, [r4, #12]
 80051ac:	68a1      	ldr	r1, [r4, #8]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	4423      	add	r3, r4
 80051b4:	4630      	mov	r0, r6
 80051b6:	685d      	ldr	r5, [r3, #4]
 80051b8:	60ca      	str	r2, [r1, #12]
 80051ba:	f045 0501 	orr.w	r5, r5, #1
 80051be:	6091      	str	r1, [r2, #8]
 80051c0:	605d      	str	r5, [r3, #4]
 80051c2:	f000 fa73 	bl	80056ac <__malloc_unlock>
 80051c6:	3408      	adds	r4, #8
 80051c8:	4620      	mov	r0, r4
 80051ca:	b003      	add	sp, #12
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d0:	2510      	movs	r5, #16
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	d9d9      	bls.n	800518a <_malloc_r+0x1a>
 80051d6:	2400      	movs	r4, #0
 80051d8:	230c      	movs	r3, #12
 80051da:	4620      	mov	r0, r4
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	b003      	add	sp, #12
 80051e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80051e8:	f000 808a 	beq.w	8005300 <_malloc_r+0x190>
 80051ec:	f1bc 0f04 	cmp.w	ip, #4
 80051f0:	f200 8160 	bhi.w	80054b4 <_malloc_r+0x344>
 80051f4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80051f8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80051fc:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005200:	4fa6      	ldr	r7, [pc, #664]	; (800549c <_malloc_r+0x32c>)
 8005202:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8005206:	68cc      	ldr	r4, [r1, #12]
 8005208:	42a1      	cmp	r1, r4
 800520a:	d105      	bne.n	8005218 <_malloc_r+0xa8>
 800520c:	e00c      	b.n	8005228 <_malloc_r+0xb8>
 800520e:	2b00      	cmp	r3, #0
 8005210:	da7a      	bge.n	8005308 <_malloc_r+0x198>
 8005212:	68e4      	ldr	r4, [r4, #12]
 8005214:	42a1      	cmp	r1, r4
 8005216:	d007      	beq.n	8005228 <_malloc_r+0xb8>
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	f022 0203 	bic.w	r2, r2, #3
 800521e:	1b53      	subs	r3, r2, r5
 8005220:	2b0f      	cmp	r3, #15
 8005222:	ddf4      	ble.n	800520e <_malloc_r+0x9e>
 8005224:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005228:	f10c 0c01 	add.w	ip, ip, #1
 800522c:	4b9b      	ldr	r3, [pc, #620]	; (800549c <_malloc_r+0x32c>)
 800522e:	693c      	ldr	r4, [r7, #16]
 8005230:	f103 0e08 	add.w	lr, r3, #8
 8005234:	4574      	cmp	r4, lr
 8005236:	f000 817e 	beq.w	8005536 <_malloc_r+0x3c6>
 800523a:	6861      	ldr	r1, [r4, #4]
 800523c:	f021 0103 	bic.w	r1, r1, #3
 8005240:	1b4a      	subs	r2, r1, r5
 8005242:	2a0f      	cmp	r2, #15
 8005244:	f300 8164 	bgt.w	8005510 <_malloc_r+0x3a0>
 8005248:	2a00      	cmp	r2, #0
 800524a:	f8c3 e014 	str.w	lr, [r3, #20]
 800524e:	f8c3 e010 	str.w	lr, [r3, #16]
 8005252:	da6a      	bge.n	800532a <_malloc_r+0x1ba>
 8005254:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005258:	f080 813a 	bcs.w	80054d0 <_malloc_r+0x360>
 800525c:	08c9      	lsrs	r1, r1, #3
 800525e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8005262:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	6881      	ldr	r1, [r0, #8]
 800526a:	60a1      	str	r1, [r4, #8]
 800526c:	f04f 0901 	mov.w	r9, #1
 8005270:	fa09 f808 	lsl.w	r8, r9, r8
 8005274:	ea48 0202 	orr.w	r2, r8, r2
 8005278:	60e0      	str	r0, [r4, #12]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	6084      	str	r4, [r0, #8]
 800527e:	60cc      	str	r4, [r1, #12]
 8005280:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8005284:	2001      	movs	r0, #1
 8005286:	4098      	lsls	r0, r3
 8005288:	4290      	cmp	r0, r2
 800528a:	d85b      	bhi.n	8005344 <_malloc_r+0x1d4>
 800528c:	4202      	tst	r2, r0
 800528e:	d106      	bne.n	800529e <_malloc_r+0x12e>
 8005290:	f02c 0c03 	bic.w	ip, ip, #3
 8005294:	0040      	lsls	r0, r0, #1
 8005296:	4202      	tst	r2, r0
 8005298:	f10c 0c04 	add.w	ip, ip, #4
 800529c:	d0fa      	beq.n	8005294 <_malloc_r+0x124>
 800529e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 80052a2:	4644      	mov	r4, r8
 80052a4:	46e1      	mov	r9, ip
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d107      	bne.n	80052bc <_malloc_r+0x14c>
 80052ac:	e145      	b.n	800553a <_malloc_r+0x3ca>
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	f280 8156 	bge.w	8005560 <_malloc_r+0x3f0>
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	429c      	cmp	r4, r3
 80052b8:	f000 813f 	beq.w	800553a <_malloc_r+0x3ca>
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	f021 0103 	bic.w	r1, r1, #3
 80052c2:	1b4a      	subs	r2, r1, r5
 80052c4:	2a0f      	cmp	r2, #15
 80052c6:	ddf2      	ble.n	80052ae <_malloc_r+0x13e>
 80052c8:	461c      	mov	r4, r3
 80052ca:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80052ce:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80052d2:	1959      	adds	r1, r3, r5
 80052d4:	f045 0901 	orr.w	r9, r5, #1
 80052d8:	f042 0501 	orr.w	r5, r2, #1
 80052dc:	f8c3 9004 	str.w	r9, [r3, #4]
 80052e0:	4630      	mov	r0, r6
 80052e2:	f8c8 c00c 	str.w	ip, [r8, #12]
 80052e6:	f8cc 8008 	str.w	r8, [ip, #8]
 80052ea:	6179      	str	r1, [r7, #20]
 80052ec:	6139      	str	r1, [r7, #16]
 80052ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 80052f2:	f8c1 e008 	str.w	lr, [r1, #8]
 80052f6:	604d      	str	r5, [r1, #4]
 80052f8:	508a      	str	r2, [r1, r2]
 80052fa:	f000 f9d7 	bl	80056ac <__malloc_unlock>
 80052fe:	e763      	b.n	80051c8 <_malloc_r+0x58>
 8005300:	217e      	movs	r1, #126	; 0x7e
 8005302:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8005306:	e77b      	b.n	8005200 <_malloc_r+0x90>
 8005308:	4422      	add	r2, r4
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6850      	ldr	r0, [r2, #4]
 800530e:	68a1      	ldr	r1, [r4, #8]
 8005310:	f040 0501 	orr.w	r5, r0, #1
 8005314:	60cb      	str	r3, [r1, #12]
 8005316:	4630      	mov	r0, r6
 8005318:	6099      	str	r1, [r3, #8]
 800531a:	6055      	str	r5, [r2, #4]
 800531c:	f000 f9c6 	bl	80056ac <__malloc_unlock>
 8005320:	3408      	adds	r4, #8
 8005322:	4620      	mov	r0, r4
 8005324:	b003      	add	sp, #12
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	4421      	add	r1, r4
 800532c:	4630      	mov	r0, r6
 800532e:	684b      	ldr	r3, [r1, #4]
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	604b      	str	r3, [r1, #4]
 8005336:	f000 f9b9 	bl	80056ac <__malloc_unlock>
 800533a:	3408      	adds	r4, #8
 800533c:	4620      	mov	r0, r4
 800533e:	b003      	add	sp, #12
 8005340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	68bc      	ldr	r4, [r7, #8]
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	f023 0903 	bic.w	r9, r3, #3
 800534c:	45a9      	cmp	r9, r5
 800534e:	d304      	bcc.n	800535a <_malloc_r+0x1ea>
 8005350:	ebc5 0309 	rsb	r3, r5, r9
 8005354:	2b0f      	cmp	r3, #15
 8005356:	f300 8091 	bgt.w	800547c <_malloc_r+0x30c>
 800535a:	4b51      	ldr	r3, [pc, #324]	; (80054a0 <_malloc_r+0x330>)
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <_malloc_r+0x334>)
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	eb05 0a01 	add.w	sl, r5, r1
 8005368:	eb04 0b09 	add.w	fp, r4, r9
 800536c:	f000 8161 	beq.w	8005632 <_malloc_r+0x4c2>
 8005370:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 8005374:	f10a 0a0f 	add.w	sl, sl, #15
 8005378:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 800537c:	f02a 0a0f 	bic.w	sl, sl, #15
 8005380:	4630      	mov	r0, r6
 8005382:	4651      	mov	r1, sl
 8005384:	9201      	str	r2, [sp, #4]
 8005386:	f000 f993 	bl	80056b0 <_sbrk_r>
 800538a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800538e:	4680      	mov	r8, r0
 8005390:	9a01      	ldr	r2, [sp, #4]
 8005392:	f000 8100 	beq.w	8005596 <_malloc_r+0x426>
 8005396:	4583      	cmp	fp, r0
 8005398:	f200 80fa 	bhi.w	8005590 <_malloc_r+0x420>
 800539c:	f8df c110 	ldr.w	ip, [pc, #272]	; 80054b0 <_malloc_r+0x340>
 80053a0:	f8dc 3000 	ldr.w	r3, [ip]
 80053a4:	45c3      	cmp	fp, r8
 80053a6:	4453      	add	r3, sl
 80053a8:	f8cc 3000 	str.w	r3, [ip]
 80053ac:	f000 814a 	beq.w	8005644 <_malloc_r+0x4d4>
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	493c      	ldr	r1, [pc, #240]	; (80054a4 <_malloc_r+0x334>)
 80053b4:	3201      	adds	r2, #1
 80053b6:	bf1b      	ittet	ne
 80053b8:	ebcb 0b08 	rsbne	fp, fp, r8
 80053bc:	445b      	addne	r3, fp
 80053be:	f8c1 8000 	streq.w	r8, [r1]
 80053c2:	f8cc 3000 	strne.w	r3, [ip]
 80053c6:	f018 0307 	ands.w	r3, r8, #7
 80053ca:	f000 8113 	beq.w	80055f4 <_malloc_r+0x484>
 80053ce:	f1c3 0208 	rsb	r2, r3, #8
 80053d2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80053d6:	4490      	add	r8, r2
 80053d8:	3308      	adds	r3, #8
 80053da:	44c2      	add	sl, r8
 80053dc:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 80053e0:	ebca 0a03 	rsb	sl, sl, r3
 80053e4:	4651      	mov	r1, sl
 80053e6:	4630      	mov	r0, r6
 80053e8:	f8cd c004 	str.w	ip, [sp, #4]
 80053ec:	f000 f960 	bl	80056b0 <_sbrk_r>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80053f6:	f000 8135 	beq.w	8005664 <_malloc_r+0x4f4>
 80053fa:	ebc8 0200 	rsb	r2, r8, r0
 80053fe:	4452      	add	r2, sl
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	f8dc 3000 	ldr.w	r3, [ip]
 8005408:	f8c7 8008 	str.w	r8, [r7, #8]
 800540c:	4453      	add	r3, sl
 800540e:	42bc      	cmp	r4, r7
 8005410:	f8c8 2004 	str.w	r2, [r8, #4]
 8005414:	f8cc 3000 	str.w	r3, [ip]
 8005418:	f8df a094 	ldr.w	sl, [pc, #148]	; 80054b0 <_malloc_r+0x340>
 800541c:	d015      	beq.n	800544a <_malloc_r+0x2da>
 800541e:	f1b9 0f0f 	cmp.w	r9, #15
 8005422:	f240 80ea 	bls.w	80055fa <_malloc_r+0x48a>
 8005426:	6861      	ldr	r1, [r4, #4]
 8005428:	f1a9 020c 	sub.w	r2, r9, #12
 800542c:	f022 0207 	bic.w	r2, r2, #7
 8005430:	f001 0e01 	and.w	lr, r1, #1
 8005434:	18a1      	adds	r1, r4, r2
 8005436:	2005      	movs	r0, #5
 8005438:	ea42 0e0e 	orr.w	lr, r2, lr
 800543c:	2a0f      	cmp	r2, #15
 800543e:	f8c4 e004 	str.w	lr, [r4, #4]
 8005442:	6048      	str	r0, [r1, #4]
 8005444:	6088      	str	r0, [r1, #8]
 8005446:	f200 8111 	bhi.w	800566c <_malloc_r+0x4fc>
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <_malloc_r+0x338>)
 800544c:	68bc      	ldr	r4, [r7, #8]
 800544e:	6811      	ldr	r1, [r2, #0]
 8005450:	428b      	cmp	r3, r1
 8005452:	bf88      	it	hi
 8005454:	6013      	strhi	r3, [r2, #0]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <_malloc_r+0x33c>)
 8005458:	6811      	ldr	r1, [r2, #0]
 800545a:	428b      	cmp	r3, r1
 800545c:	bf88      	it	hi
 800545e:	6013      	strhi	r3, [r2, #0]
 8005460:	6862      	ldr	r2, [r4, #4]
 8005462:	f022 0203 	bic.w	r2, r2, #3
 8005466:	4295      	cmp	r5, r2
 8005468:	ebc5 0302 	rsb	r3, r5, r2
 800546c:	d801      	bhi.n	8005472 <_malloc_r+0x302>
 800546e:	2b0f      	cmp	r3, #15
 8005470:	dc04      	bgt.n	800547c <_malloc_r+0x30c>
 8005472:	4630      	mov	r0, r6
 8005474:	f000 f91a 	bl	80056ac <__malloc_unlock>
 8005478:	2400      	movs	r4, #0
 800547a:	e6a5      	b.n	80051c8 <_malloc_r+0x58>
 800547c:	1962      	adds	r2, r4, r5
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	f045 0501 	orr.w	r5, r5, #1
 8005486:	6065      	str	r5, [r4, #4]
 8005488:	4630      	mov	r0, r6
 800548a:	60ba      	str	r2, [r7, #8]
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	f000 f90d 	bl	80056ac <__malloc_unlock>
 8005492:	3408      	adds	r4, #8
 8005494:	4620      	mov	r0, r4
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	2000048c 	.word	0x2000048c
 80054a0:	200008f4 	.word	0x200008f4
 80054a4:	20000898 	.word	0x20000898
 80054a8:	200008f0 	.word	0x200008f0
 80054ac:	200008ec 	.word	0x200008ec
 80054b0:	200008f8 	.word	0x200008f8
 80054b4:	f1bc 0f14 	cmp.w	ip, #20
 80054b8:	d961      	bls.n	800557e <_malloc_r+0x40e>
 80054ba:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80054be:	f200 808f 	bhi.w	80055e0 <_malloc_r+0x470>
 80054c2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 80054c6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 80054ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80054ce:	e697      	b.n	8005200 <_malloc_r+0x90>
 80054d0:	0a4b      	lsrs	r3, r1, #9
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d958      	bls.n	8005588 <_malloc_r+0x418>
 80054d6:	2b14      	cmp	r3, #20
 80054d8:	f200 80ae 	bhi.w	8005638 <_malloc_r+0x4c8>
 80054dc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80054e0:	0050      	lsls	r0, r2, #1
 80054e2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80054e6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80056a4 <_malloc_r+0x534>
 80054ea:	6883      	ldr	r3, [r0, #8]
 80054ec:	4283      	cmp	r3, r0
 80054ee:	f000 808a 	beq.w	8005606 <_malloc_r+0x496>
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	f022 0203 	bic.w	r2, r2, #3
 80054f8:	4291      	cmp	r1, r2
 80054fa:	d202      	bcs.n	8005502 <_malloc_r+0x392>
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4298      	cmp	r0, r3
 8005500:	d1f7      	bne.n	80054f2 <_malloc_r+0x382>
 8005502:	68d9      	ldr	r1, [r3, #12]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	60e1      	str	r1, [r4, #12]
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	608c      	str	r4, [r1, #8]
 800550c:	60dc      	str	r4, [r3, #12]
 800550e:	e6b7      	b.n	8005280 <_malloc_r+0x110>
 8005510:	1961      	adds	r1, r4, r5
 8005512:	f042 0701 	orr.w	r7, r2, #1
 8005516:	f045 0501 	orr.w	r5, r5, #1
 800551a:	6065      	str	r5, [r4, #4]
 800551c:	4630      	mov	r0, r6
 800551e:	6159      	str	r1, [r3, #20]
 8005520:	6119      	str	r1, [r3, #16]
 8005522:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005526:	f8c1 e008 	str.w	lr, [r1, #8]
 800552a:	604f      	str	r7, [r1, #4]
 800552c:	508a      	str	r2, [r1, r2]
 800552e:	3408      	adds	r4, #8
 8005530:	f000 f8bc 	bl	80056ac <__malloc_unlock>
 8005534:	e648      	b.n	80051c8 <_malloc_r+0x58>
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	e6a2      	b.n	8005280 <_malloc_r+0x110>
 800553a:	f109 0901 	add.w	r9, r9, #1
 800553e:	f019 0f03 	tst.w	r9, #3
 8005542:	f104 0408 	add.w	r4, r4, #8
 8005546:	f47f aeae 	bne.w	80052a6 <_malloc_r+0x136>
 800554a:	e02d      	b.n	80055a8 <_malloc_r+0x438>
 800554c:	f104 0308 	add.w	r3, r4, #8
 8005550:	6964      	ldr	r4, [r4, #20]
 8005552:	42a3      	cmp	r3, r4
 8005554:	bf08      	it	eq
 8005556:	f10c 0c02 	addeq.w	ip, ip, #2
 800555a:	f43f ae67 	beq.w	800522c <_malloc_r+0xbc>
 800555e:	e623      	b.n	80051a8 <_malloc_r+0x38>
 8005560:	4419      	add	r1, r3
 8005562:	461c      	mov	r4, r3
 8005564:	6848      	ldr	r0, [r1, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800556c:	f040 0501 	orr.w	r5, r0, #1
 8005570:	604d      	str	r5, [r1, #4]
 8005572:	4630      	mov	r0, r6
 8005574:	60d3      	str	r3, [r2, #12]
 8005576:	609a      	str	r2, [r3, #8]
 8005578:	f000 f898 	bl	80056ac <__malloc_unlock>
 800557c:	e624      	b.n	80051c8 <_malloc_r+0x58>
 800557e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 8005582:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005586:	e63b      	b.n	8005200 <_malloc_r+0x90>
 8005588:	098a      	lsrs	r2, r1, #6
 800558a:	3238      	adds	r2, #56	; 0x38
 800558c:	0050      	lsls	r0, r2, #1
 800558e:	e7a8      	b.n	80054e2 <_malloc_r+0x372>
 8005590:	42bc      	cmp	r4, r7
 8005592:	f43f af03 	beq.w	800539c <_malloc_r+0x22c>
 8005596:	68bc      	ldr	r4, [r7, #8]
 8005598:	6862      	ldr	r2, [r4, #4]
 800559a:	f022 0203 	bic.w	r2, r2, #3
 800559e:	e762      	b.n	8005466 <_malloc_r+0x2f6>
 80055a0:	f8d8 8000 	ldr.w	r8, [r8]
 80055a4:	4598      	cmp	r8, r3
 80055a6:	d17b      	bne.n	80056a0 <_malloc_r+0x530>
 80055a8:	f01c 0f03 	tst.w	ip, #3
 80055ac:	f1a8 0308 	sub.w	r3, r8, #8
 80055b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80055b4:	d1f4      	bne.n	80055a0 <_malloc_r+0x430>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	ea23 0300 	bic.w	r3, r3, r0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	0040      	lsls	r0, r0, #1
 80055c0:	4298      	cmp	r0, r3
 80055c2:	f63f aebf 	bhi.w	8005344 <_malloc_r+0x1d4>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f43f aebc 	beq.w	8005344 <_malloc_r+0x1d4>
 80055cc:	4203      	tst	r3, r0
 80055ce:	46cc      	mov	ip, r9
 80055d0:	f47f ae65 	bne.w	800529e <_malloc_r+0x12e>
 80055d4:	0040      	lsls	r0, r0, #1
 80055d6:	4203      	tst	r3, r0
 80055d8:	f10c 0c04 	add.w	ip, ip, #4
 80055dc:	d0fa      	beq.n	80055d4 <_malloc_r+0x464>
 80055de:	e65e      	b.n	800529e <_malloc_r+0x12e>
 80055e0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80055e4:	d81a      	bhi.n	800561c <_malloc_r+0x4ac>
 80055e6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 80055ea:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80055ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80055f2:	e605      	b.n	8005200 <_malloc_r+0x90>
 80055f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f8:	e6ef      	b.n	80053da <_malloc_r+0x26a>
 80055fa:	2301      	movs	r3, #1
 80055fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8005600:	4644      	mov	r4, r8
 8005602:	2200      	movs	r2, #0
 8005604:	e72f      	b.n	8005466 <_malloc_r+0x2f6>
 8005606:	1091      	asrs	r1, r2, #2
 8005608:	2001      	movs	r0, #1
 800560a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800560e:	fa00 f101 	lsl.w	r1, r0, r1
 8005612:	430a      	orrs	r2, r1
 8005614:	f8c8 2004 	str.w	r2, [r8, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	e774      	b.n	8005506 <_malloc_r+0x396>
 800561c:	f240 5354 	movw	r3, #1364	; 0x554
 8005620:	459c      	cmp	ip, r3
 8005622:	d81b      	bhi.n	800565c <_malloc_r+0x4ec>
 8005624:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8005628:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 800562c:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005630:	e5e6      	b.n	8005200 <_malloc_r+0x90>
 8005632:	f10a 0a10 	add.w	sl, sl, #16
 8005636:	e6a3      	b.n	8005380 <_malloc_r+0x210>
 8005638:	2b54      	cmp	r3, #84	; 0x54
 800563a:	d81f      	bhi.n	800567c <_malloc_r+0x50c>
 800563c:	0b0a      	lsrs	r2, r1, #12
 800563e:	326e      	adds	r2, #110	; 0x6e
 8005640:	0050      	lsls	r0, r2, #1
 8005642:	e74e      	b.n	80054e2 <_malloc_r+0x372>
 8005644:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8005648:	2900      	cmp	r1, #0
 800564a:	f47f aeb1 	bne.w	80053b0 <_malloc_r+0x240>
 800564e:	eb0a 0109 	add.w	r1, sl, r9
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	f041 0101 	orr.w	r1, r1, #1
 8005658:	6051      	str	r1, [r2, #4]
 800565a:	e6f6      	b.n	800544a <_malloc_r+0x2da>
 800565c:	21fc      	movs	r1, #252	; 0xfc
 800565e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8005662:	e5cd      	b.n	8005200 <_malloc_r+0x90>
 8005664:	2201      	movs	r2, #1
 8005666:	f04f 0a00 	mov.w	sl, #0
 800566a:	e6cb      	b.n	8005404 <_malloc_r+0x294>
 800566c:	f104 0108 	add.w	r1, r4, #8
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff fcaf 	bl	8004fd4 <_free_r>
 8005676:	f8da 3000 	ldr.w	r3, [sl]
 800567a:	e6e6      	b.n	800544a <_malloc_r+0x2da>
 800567c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005680:	d803      	bhi.n	800568a <_malloc_r+0x51a>
 8005682:	0bca      	lsrs	r2, r1, #15
 8005684:	3277      	adds	r2, #119	; 0x77
 8005686:	0050      	lsls	r0, r2, #1
 8005688:	e72b      	b.n	80054e2 <_malloc_r+0x372>
 800568a:	f240 5254 	movw	r2, #1364	; 0x554
 800568e:	4293      	cmp	r3, r2
 8005690:	d803      	bhi.n	800569a <_malloc_r+0x52a>
 8005692:	0c8a      	lsrs	r2, r1, #18
 8005694:	327c      	adds	r2, #124	; 0x7c
 8005696:	0050      	lsls	r0, r2, #1
 8005698:	e723      	b.n	80054e2 <_malloc_r+0x372>
 800569a:	20fc      	movs	r0, #252	; 0xfc
 800569c:	227e      	movs	r2, #126	; 0x7e
 800569e:	e720      	b.n	80054e2 <_malloc_r+0x372>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	e78c      	b.n	80055be <_malloc_r+0x44e>
 80056a4:	2000048c 	.word	0x2000048c

080056a8 <__malloc_lock>:
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop

080056ac <__malloc_unlock>:
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop

080056b0 <_sbrk_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4c07      	ldr	r4, [pc, #28]	; (80056d0 <_sbrk_r+0x20>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4605      	mov	r5, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	f7fb fa1c 	bl	8000af8 <_sbrk>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d000      	beq.n	80056c6 <_sbrk_r+0x16>
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0fb      	beq.n	80056c4 <_sbrk_r+0x14>
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20000928 	.word	0x20000928

080056d4 <__register_exitproc>:
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	4c27      	ldr	r4, [pc, #156]	; (8005774 <__register_exitproc+0xa0>)
 80056d8:	6826      	ldr	r6, [r4, #0]
 80056da:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80056de:	b085      	sub	sp, #20
 80056e0:	4607      	mov	r7, r0
 80056e2:	2c00      	cmp	r4, #0
 80056e4:	d041      	beq.n	800576a <__register_exitproc+0x96>
 80056e6:	6865      	ldr	r5, [r4, #4]
 80056e8:	2d1f      	cmp	r5, #31
 80056ea:	dd1e      	ble.n	800572a <__register_exitproc+0x56>
 80056ec:	4822      	ldr	r0, [pc, #136]	; (8005778 <__register_exitproc+0xa4>)
 80056ee:	b918      	cbnz	r0, 80056f8 <__register_exitproc+0x24>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f4:	b005      	add	sp, #20
 80056f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80056fc:	9103      	str	r1, [sp, #12]
 80056fe:	9202      	str	r2, [sp, #8]
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	f3af 8000 	nop.w
 8005706:	9903      	ldr	r1, [sp, #12]
 8005708:	9a02      	ldr	r2, [sp, #8]
 800570a:	9b01      	ldr	r3, [sp, #4]
 800570c:	4604      	mov	r4, r0
 800570e:	2800      	cmp	r0, #0
 8005710:	d0ee      	beq.n	80056f0 <__register_exitproc+0x1c>
 8005712:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005716:	6025      	str	r5, [r4, #0]
 8005718:	2000      	movs	r0, #0
 800571a:	6060      	str	r0, [r4, #4]
 800571c:	4605      	mov	r5, r0
 800571e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005722:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005726:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800572a:	b93f      	cbnz	r7, 800573c <__register_exitproc+0x68>
 800572c:	1cab      	adds	r3, r5, #2
 800572e:	2000      	movs	r0, #0
 8005730:	3501      	adds	r5, #1
 8005732:	6065      	str	r5, [r4, #4]
 8005734:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8005738:	b005      	add	sp, #20
 800573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8005740:	f04f 0c01 	mov.w	ip, #1
 8005744:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005748:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800574c:	fa0c f205 	lsl.w	r2, ip, r5
 8005750:	4316      	orrs	r6, r2
 8005752:	2f02      	cmp	r7, #2
 8005754:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8005758:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800575c:	d1e6      	bne.n	800572c <__register_exitproc+0x58>
 800575e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8005762:	431a      	orrs	r2, r3
 8005764:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8005768:	e7e0      	b.n	800572c <__register_exitproc+0x58>
 800576a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800576e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005772:	e7b8      	b.n	80056e6 <__register_exitproc+0x12>
 8005774:	08005a80 	.word	0x08005a80
 8005778:	00000000 	.word	0x00000000

0800577c <GPIO_CLK>:
 800577c:	00000008 00000008 00000008 00000008     ................

0800578c <GPIO_PIN>:
 800578c:	20001000 80004000                       ... .@..

08005794 <COM_RX_PORT_CLK>:
 8005794:	00000004 00000004                       ........

0800579c <COM_TX_PORT_CLK>:
 800579c:	00000004 00000004                       ........

080057a4 <COM_USART_CLK>:
 80057a4:	00000020 00040000                        .......

080057ac <COM_TX_PIN_SOURCE>:
 80057ac:	000a0006                                ....

080057b0 <COM_TX_AF>:
 80057b0:	00070008                                ....

080057b4 <COM_RX_PIN_SOURCE>:
 80057b4:	000b0007                                ....

080057b8 <COM_RX_AF>:
 80057b8:	00070008                                ....

080057bc <COM_TX_PIN>:
 80057bc:	04000040                                @...

080057c0 <COM_RX_PIN>:
 80057c0:	08000080                                ....

080057c4 <BUTTON_IRQn>:
 80057c4:	00000006                                ....

080057c8 <BUTTON_PIN_SOURCE>:
 80057c8:	00000000                                ....

080057cc <BUTTON_PORT_SOURCE>:
 80057cc:	00000000                                ....

080057d0 <BUTTON_EXTI_LINE>:
 80057d0:	00000001                                ....

080057d4 <BUTTON_CLK>:
 80057d4:	00000001                                ....

080057d8 <BUTTON_PIN>:
 80057d8:	00000001 2e636361 25203a78 64252e64     ....acc.x: %d.%d
 80057e8:	0a0d6720 00000000 2e636361 25203a79      g......acc.y: %
 80057f8:	64252e64 0a0d6720 00000000 2e636361     d.%d g......acc.
 8005808:	25203a7a 64252e64 0a0d6720 00000000     z: %d.%d g......
 8005818:	2e67616d 25203a78 64252e64 75616720     mag.x: %d.%d gau
 8005828:	0a0d7373 00000000 2e67616d 25203a79     ss......mag.y: %
 8005838:	64252e64 75616720 0a0d7373 00000000     d.%d gauss......
 8005848:	2e67616d 25203a7a 64252e64 75616720     mag.z: %d.%d gau
 8005858:	0a0d7373 00000000 2e746f72 25203a78     ss......rot.x: %
 8005868:	64252e64 67656420 0a0d732f 00000000     d.%d deg/s......
 8005878:	2e746f72 25203a79 64252e64 67656420     rot.y: %d.%d deg
 8005888:	0a0d732f 00000000 2e746f72 25203a7a     /s......rot.z: %
 8005898:	64252e64 67656420 0a0d732f 00000000     d.%d deg/s......
 80058a8:	63746143 656d2068 27492021 6146206d     Catch me! I'm Fa
 80058b8:	6e696c6c 21212167 000a0a0d 5f494d4e     lling!!!....NMI_
 80058c8:	646e6148 0d72656c 0000000a 64726148     Handler.....Hard
 80058d8:	6c756146 000a0d74 63702020 7825203a     Fault...  pc: %x
 80058e8:	00000a0d 73702020 25203a72 000a0d78     ....  psr: %x...
 80058f8:	726c2020 7825203a 00000a0d 4d6d654d       lr: %x....MemM
 8005908:	67616e61 61485f65 656c646e 000a0d72     anage_Handler...
 8005918:	46737542 746c7561 6e61485f 72656c64     BusFault_Handler
 8005928:	00000a0d 67617355 75614665 485f746c     ....UsageFault_H
 8005938:	6c646e61 0a0d7265 00000000 78252020     andler......  %x
 8005948:	00000a0d 69442020 65646976 20796220     ....  Divide by 
 8005958:	6f72657a 00000a0d 6e552020 67696c61     zero....  Unalig
 8005968:	2064656e 65636361 0a0d7373 00000000     ned access......
 8005978:	6f4e2020 2d6f6320 636f7270 6f737365       No co-processo
 8005988:	000a0d72 6e492020 696c6176 43502064     r...  Invalid PC
 8005998:	616f6c20 000a0d64 6e492020 696c6176      load...  Invali
 80059a8:	74732064 0d657461 0000000a 6e552020     d state.....  Un
 80059b8:	69666564 2064656e 74736e69 74637572     defined instruct
 80059c8:	0d6e6f69 0000000a 5f435653 646e6148     ion.....SVC_Hand
 80059d8:	0d72656c 0000000a 75626544 6e6f4d67     ler.....DebugMon
 80059e8:	6e61485f 72656c64 00000a0d 646e6550     _Handler....Pend
 80059f8:	485f5653 6c646e61 0a0d7265 00000000     SV_Handler......
 8005a08:	70616548 646e6120 61747320 63206b63     Heap and stack c
 8005a18:	696c6c6f 6e6f6973 0000000a 74697865     ollision....exit
 8005a28:	00000000 6c756e28 0000296c 61460909     ....(null)....Fa
 8005a38:	72756c69 65722065 76696563 20676e69     ilure receiving 
 8005a48:	61746144 0a0d4c5f 00000000 61460909     Data_L........Fa
 8005a58:	72756c69 65722065 76696563 20676e69     ilure receiving 
 8005a68:	61746144 0a0d485f 00000000 74727173     Data_H......sqrt
 8005a78:	00000000 00000043                       ....C...

08005a80 <_global_impure_ptr>:
 8005a80:	20000060                                `.. 

08005a84 <__EH_FRAME_BEGIN__>:
 8005a84:	00000000                                ....

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
